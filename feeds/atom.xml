<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Logan's Note</title><link href="http://logan.tw/" rel="alternate"></link><link href="http://logan.tw/feeds/atom.xml" rel="self"></link><id>http://logan.tw/</id><updated>2018-02-18T15:50:00+08:00</updated><entry><title>Build qemu-user-static from source code</title><link href="http://logan.tw/posts/2018/02/18/build-qemu-user-static-from-source-code/" rel="alternate"></link><published>2018-02-18T15:50:00+08:00</published><updated>2018-02-18T15:50:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2018-02-18:/posts/2018/02/18/build-qemu-user-static-from-source-code/</id><summary type="html">&lt;p&gt;&lt;code&gt;qemu-user-static&lt;/code&gt; is an important tool for cross-architecture developers.
It allows developers to create a &lt;em&gt;chroot environment&lt;/em&gt; and run the
&lt;em&gt;cross-compiled&lt;/em&gt; programs.  For example, a developer may run an AArch64
executable without the overhead of system-level emulation.&lt;/p&gt;
&lt;p&gt;I usually install the &lt;code&gt;qemu-user-static&lt;/code&gt; binaries from Ubuntu apt
repository.  However, I encountered some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;qemu-user-static&lt;/code&gt; is an important tool for cross-architecture developers.
It allows developers to create a &lt;em&gt;chroot environment&lt;/em&gt; and run the
&lt;em&gt;cross-compiled&lt;/em&gt; programs.  For example, a developer may run an AArch64
executable without the overhead of system-level emulation.&lt;/p&gt;
&lt;p&gt;I usually install the &lt;code&gt;qemu-user-static&lt;/code&gt; binaries from Ubuntu apt
repository.  However, I encountered some bugs that have been fixed in the QEMU
upstream but the fixes haven't been back ported to the Ubuntu deb package.
Thus, I decided to &lt;strong&gt;build qemu-user-static from source code&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="instructions"&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Install the QEMU build dependencies with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get build-dep qemu
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Download QEMU source code with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://git.qemu.org/qemu.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; qemu
$ git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Configure QEMU with &lt;code&gt;--static&lt;/code&gt;, &lt;code&gt;--disable-system&lt;/code&gt;, and
&lt;code&gt;--enable-linux-user&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./configure &lt;span class="se"&gt;\&lt;/span&gt;
    --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/qemu-user-static &lt;span class="se"&gt;\&lt;/span&gt;
    --static &lt;span class="se"&gt;\&lt;/span&gt;
    --disable-system &lt;span class="se"&gt;\&lt;/span&gt;
    --enable-linux-user
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Specifying &lt;code&gt;--disable-system&lt;/code&gt; disables softmmu targets.  It is a known
issue that softmmu targets rely on some shared libraries.  Those softmmu
targets will cause link error if &lt;code&gt;--static&lt;/code&gt; is specified.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Build and install QEMU with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make -j8
$ make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add &lt;code&gt;-static&lt;/code&gt; suffix to executables so that &lt;code&gt;qemu-debootstrap&lt;/code&gt; can
pick up these executables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../qemu-user-static/bin
$ &lt;span class="k"&gt;for&lt;/span&gt; i in *&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; cp &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;-static&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="qemu"></category></entry><entry><title>Find Undefined Behavior with Clang UBSan</title><link href="http://logan.tw/posts/2018/01/27/find-undefined-behavior-with-clang-ubsan/" rel="alternate"></link><published>2018-01-27T20:01:00+08:00</published><updated>2018-01-27T20:01:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2018-01-27:/posts/2018/01/27/find-undefined-behavior-with-clang-ubsan/</id><summary type="html">&lt;p&gt;Two weeks ago, I came across an interesting bug.  The &lt;code&gt;convert()&lt;/code&gt; function
below returns &lt;code&gt;0x80000001&lt;/code&gt; when &lt;code&gt;p&lt;/code&gt; points to &lt;code&gt;0x01&lt;/code&gt;,
&lt;code&gt;0x00&lt;/code&gt;, &lt;code&gt;0x00&lt;/code&gt;, &lt;code&gt;0x80&lt;/code&gt;, but the expected return value is
&lt;code&gt;0x00000001&lt;/code&gt; instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;                  &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;             &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Two weeks ago, I came across an interesting bug.  The &lt;code&gt;convert()&lt;/code&gt; function
below returns &lt;code&gt;0x80000001&lt;/code&gt; when &lt;code&gt;p&lt;/code&gt; points to &lt;code&gt;0x01&lt;/code&gt;,
&lt;code&gt;0x00&lt;/code&gt;, &lt;code&gt;0x00&lt;/code&gt;, &lt;code&gt;0x80&lt;/code&gt;, but the expected return value is
&lt;code&gt;0x00000001&lt;/code&gt; instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;                  &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;             &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to the bug report, this function was fine in the past but became
broken after the compiler toolchain was upgraded.  It sounds like an
&lt;strong&gt;undefined behavior&lt;/strong&gt; in the code, but I cannot spot any integer overflows or
underflows in the if-else statement (even though it looks suspicious).&lt;/p&gt;
&lt;p&gt;Although I found the root cause by disassembling the binary, I feel this is a
great example to showcase the power of Clang
&lt;a class="reference external" href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html"&gt;Undefined Behavior Sanitizer (UBSan)&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="undefiend-behavior-sanitizer"&gt;
&lt;h2&gt;Undefiend Behavior Sanitizer&lt;/h2&gt;
&lt;p&gt;Clang has a built-in Undefined Behavior Sanitizer (UBSan).  UBSan instruments
the input source code with several run-time checks and print error messages if
undefined behaviors occur.&lt;/p&gt;
&lt;p&gt;To instrument a program with UBSan, add &lt;code&gt;-fsanitize=undefined&lt;/code&gt; to the
compiler options (both &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ clang input.c -fsanitize&lt;span class="o"&gt;=&lt;/span&gt;undefined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test the &lt;code&gt;convert()&lt;/code&gt; function, a &lt;code&gt;main()&lt;/code&gt; function is added to
&lt;code&gt;input.c&lt;/code&gt;.  It reads the user input and prints the returned value of
&lt;code&gt;convert()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;inttypes.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;                  &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;             &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;SCNx32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%08&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;PRIx32&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, compile the program with &lt;code&gt;clang -fsanitize=undefined&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ clang input.c -fsanitize&lt;span class="o"&gt;=&lt;/span&gt;undefined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the executable and enter &lt;code&gt;00000000&lt;/code&gt; and &lt;code&gt;80000001&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./a.out
&lt;span class="m"&gt;00000000&lt;/span&gt;
&lt;span class="m"&gt;80000000&lt;/span&gt;
&lt;span class="m"&gt;80000001&lt;/span&gt;
input.c:10:33: runtime error: signed integer overflow: &lt;span class="m"&gt;16777216&lt;/span&gt; * &lt;span class="m"&gt;128&lt;/span&gt; cannot be represented in &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;00000001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In response to the first input &lt;code&gt;00000000&lt;/code&gt;, the program prints the expected
&lt;code&gt;80000000&lt;/code&gt;.  However, when &lt;code&gt;80000001&lt;/code&gt; is entered, UBSan detects an
error and prints an error message.  It points out the signed integer overflow in
&lt;code&gt;256 * 256 * 256 * p[3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This error message deserves more elaborations.  &lt;code&gt;p[3]&lt;/code&gt; is an
&lt;code&gt;unsigned char&lt;/code&gt;.  It will be promoted to a &lt;code&gt;signed int&lt;/code&gt; ranging from
0 to 255.  And then, this &lt;code&gt;signed int&lt;/code&gt; will be multipled by &lt;code&gt;256 *
256 * 256&lt;/code&gt;.  The multiplication &lt;em&gt;may&lt;/em&gt; result in a signed integer overflow.
According to the C/C++ specification, a signed integer overflow may lead to
undefined behaviors.&lt;/p&gt;
&lt;p&gt;In fact, some Clang optimizations actually exploit this undefined behavior and
removed the &lt;em&gt;then block&lt;/em&gt; of the if-else statement.  Clang generates following
assembly for ARM architecture:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;; clang -target armv7-linux-gnueabi -mthumb -S -O2 input.c&lt;/span&gt;
&lt;span class="nf"&gt;ldr&lt;/span&gt; &lt;span class="no"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;orr&lt;/span&gt; &lt;span class="no"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;#-2147483648&lt;/span&gt;
&lt;span class="no"&gt;bx&lt;/span&gt;  &lt;span class="no"&gt;lr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are several ways to avoid this undefined behavior.  The simpliest
solution is to replace multiplication expressions with more idiomatic shift
expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
                &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class="mi"&gt;8u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
                &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
                &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;24u&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;INT32_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Undefined behaviors are dangerous.  Every C/C++ programmers must avoid them at
all costs.  However, some undefined behaviors are subtle and difficult to spot.
Undefined Behavior Sanitizer (UBSan) helps programmers find undefined behaviors
in their program.  Add &lt;code&gt;-fsanitize=undefined&lt;/code&gt; to the compiler options if
you are investigating miscompilation or debugging the program which used to
work.&lt;/p&gt;
&lt;/div&gt;
</content><category term="cxx"></category><category term="clang"></category><category term="sanitizer"></category></entry><entry><title>Full-text Search with Django and PostgreSQL</title><link href="http://logan.tw/posts/2017/12/30/full-text-search-with-django-and-postgresql/" rel="alternate"></link><published>2017-12-30T19:50:00+08:00</published><updated>2017-12-30T19:50:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2017-12-30:/posts/2017/12/30/full-text-search-with-django-and-postgresql/</id><summary type="html">&lt;p&gt;Django has several PostgreSQL database functions to support full-text search.
If you are using PostgreSQL as the database backend, then it is easy to add
full-text search to your Django app.&lt;/p&gt;
&lt;p&gt;In this post, I would like to build an demo app with full-text search.  This
post covers several PostgreSQL-specific …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django has several PostgreSQL database functions to support full-text search.
If you are using PostgreSQL as the database backend, then it is easy to add
full-text search to your Django app.&lt;/p&gt;
&lt;p&gt;In this post, I would like to build an demo app with full-text search.  This
post covers several PostgreSQL-specific features, such as &lt;a class="reference internal" href="#searchvectorfield-and-ginindex"&gt;SearchVectorField&lt;/a&gt;,
&lt;a class="reference internal" href="#update-search-vectors"&gt;SearchVector&lt;/a&gt;, &lt;a class="reference internal" href="#full-text-search-queries"&gt;SearchQuery&lt;/a&gt;, and &lt;a class="reference internal" href="#rank-and-order"&gt;SearchRank&lt;/a&gt;.  In addition, this post uses
PostgreSQL triggers to &lt;a class="reference internal" href="#update-search-vectors-with-a-trigger"&gt;update SearchVectorField automatically&lt;/a&gt; and explains
how to &lt;a class="reference internal" href="#manage-triggers-with-django-migrations"&gt;manage triggers with Django migrations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post is organized as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setup-environment"&gt;Setup environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#searchvectorfield-and-ginindex"&gt;SearchVectorField and GinIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#update-search-vectors"&gt;Update search vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#full-text-search-queries"&gt;Full-text search queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#update-search-vectors-with-a-trigger"&gt;Update search vectors with a trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rank-and-order"&gt;Rank and order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#add-weights-to-search-vectors"&gt;Add weights to search vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#derive-search-vectors-from-related-objects"&gt;Derive search vectors from related objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#epilogue"&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The source code of the demo app is in the GitHub repository
&lt;a class="reference external" href="https://github.com/loganchien/django-fts-demo"&gt;loganchien/django-fts-demo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="setup-environment"&gt;
&lt;h2&gt;Setup Environment&lt;/h2&gt;
&lt;p&gt;To build the demo app, PostgreSQL and Django are required.  This section
includes the instructions to set up the environment.&lt;/p&gt;
&lt;div class="section" id="postgresql"&gt;
&lt;h3&gt;PostgreSQL&lt;/h3&gt;
&lt;p&gt;Install PostgreSQL on Ubuntu with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install postgresql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create users and databases, enter &lt;em&gt;PostgreSQL interactive shell&lt;/em&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres psql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the PostgreSQL interactive shell, create a user with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;USER&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;PASSWORD&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[password]&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;CREATEDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, create a database with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;OWNER&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;ENCODING&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Leave the interactive shell with &lt;code&gt;\q&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test whether it works or not:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ psql -h localhost -U &lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;db_name&lt;span class="o"&gt;]&lt;/span&gt;
Password &lt;span class="k"&gt;for&lt;/span&gt; user &lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;password&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# \q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="django"&gt;
&lt;h3&gt;Django&lt;/h3&gt;
&lt;p&gt;Create and enter a Python virtual environment with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv fts_demo -p /usr/bin/python3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install &lt;code&gt;django&lt;/code&gt; and &lt;code&gt;psycopg2&lt;/code&gt; package with &lt;code&gt;pip install&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install &lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0 &lt;span class="nv"&gt;psycopg2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.3.2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a project named &lt;code&gt;fts_demo&lt;/code&gt; and an app named &lt;code&gt;fts&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-admin startproject fts_demo
$ &lt;span class="nb"&gt;cd&lt;/span&gt; fts_demo
$ ./manage.py startapp fts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open &lt;code&gt;fts_demo/settings.py&lt;/code&gt; and edit the settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim fts_demo/settings.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add &lt;code&gt;fts&lt;/code&gt; to the end of &lt;code&gt;INSTALLED_APPS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;fts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# ADDED&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the default database settings in the &lt;code&gt;DATABASES&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;[db_name]&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;[username]&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;[password]&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;5432&amp;#39;&lt;/span&gt;,
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="searchvectorfield-and-ginindex"&gt;
&lt;h2&gt;SearchVectorField and GinIndex&lt;/h2&gt;
&lt;p&gt;To perform full-text searches efficiently, a database has to preprocess the data
and summerize them as &lt;strong&gt;search vectors&lt;/strong&gt;.  Different search techniques may have
different search vector structures.  In PostgreSQL, a search vector consists of
several vocabularies and their locations.  For example, in the table below, the
inputs on the left column are converted to search vectors on the right column:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="3%" /&gt;
&lt;col width="43%" /&gt;
&lt;col width="53%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Id&lt;/th&gt;
&lt;th class="head"&gt;Input&lt;/th&gt;
&lt;th class="head"&gt;Search Vector&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;John is reading a book.&lt;/td&gt;
&lt;td&gt;'book':5 'john':1 'read':3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Johnson reads an article.&lt;/td&gt;
&lt;td&gt;'articl':4 'johnson':1 'read':2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Because it takes time to convert strings into search vectors, it would be better
to save these search vectors in the database as well.  Since Django 1.10, you
may add &lt;code&gt;SearchVectorField&lt;/code&gt; to a model and save the search vector to this
column.  It will be converted to &lt;code&gt;tsvector&lt;/code&gt;, which is a PostgreSQL
built-in text search type.&lt;/p&gt;
&lt;p&gt;A search vector column summerizes a row.  However, there are many rows in a
database table, thus &lt;strong&gt;indexes&lt;/strong&gt; should be created so that the database can
select matching rows efficiently.  For example, a naive index implementation may
map words to row IDs, so that the database can easily answer &lt;code&gt;1&lt;/code&gt; and
&lt;code&gt;2&lt;/code&gt; when a user searches for &lt;code&gt;read&lt;/code&gt;:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="64%" /&gt;
&lt;col width="36%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Words&lt;/th&gt;
&lt;th class="head"&gt;Rows&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;articl&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;book&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;john&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;johnson&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;1, 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In the real world, the structures of database indexes are much more complex.
PostgreSQL provides GinIndex and GistIndex.  &lt;strong&gt;GinIndex&lt;/strong&gt; is based on
&lt;em&gt;Generalized Inverted Index (GIN)&lt;/em&gt; and &lt;strong&gt;GistIndex&lt;/strong&gt; is based on
&lt;em&gt;Generalized Search Tree (GiST)&lt;/em&gt;.  They have
&lt;a class="reference external" href="https://www.postgresql.org/docs/9.6/static/textsearch-indexes.html"&gt;different trade-offs and performance characteristics&lt;/a&gt;.  Django supports both
of them and their usages are similar.  For the sake of brevity, &lt;code&gt;GinIndex&lt;/code&gt;
is chosen for our demo app.&lt;/p&gt;
&lt;div class="section" id="define-a-model"&gt;
&lt;h3&gt;Define a Model&lt;/h3&gt;
&lt;p&gt;In our demo app, we would like to save several articles in the database.  Each
&lt;em&gt;article&lt;/em&gt; consists of a &lt;em&gt;headline&lt;/em&gt; and some &lt;em&gt;content&lt;/em&gt;.  And we would like to
search these articles by some keywords.&lt;/p&gt;
&lt;p&gt;Let's open &lt;code&gt;fts/models.py&lt;/code&gt; and add a &lt;code&gt;Article&lt;/code&gt; model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchVectorField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.indexes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GinIndex&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;search_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchVectorField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;indexes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GinIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then create a migration for this model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py makemigrations fts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And migrate the database with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py migrate fts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As described earlier, the &lt;code&gt;search_vector&lt;/code&gt; field is created to hold the
preprocessed search vectors.  The &lt;code&gt;search_vector&lt;/code&gt; field has to be nullable
(&lt;code&gt;null=True&lt;/code&gt;) because due to some limitation &lt;code&gt;SearchVectorField&lt;/code&gt; has
to be updated &lt;em&gt;after&lt;/em&gt; an object is created.&lt;/p&gt;
&lt;p&gt;In addition, a &lt;code&gt;GinIndex&lt;/code&gt; is created for the &lt;code&gt;search_vector&lt;/code&gt; field
to enable efficient search queries.  It specified in the &lt;code&gt;Meta&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update-search-vectors"&gt;
&lt;h2&gt;Update Search Vectors&lt;/h2&gt;
&lt;p&gt;Before performing any full-text search, you should update search vectors.  If
you don't update search vectors, no results will be found.&lt;/p&gt;
&lt;p&gt;For example, if you run the following code in &lt;code&gt;./manage.py shell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fts.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Progressive tesne&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Present tense&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Johnson reads an article.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Article for piano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob plays a piano.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, you will see this output (no results):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To &lt;strong&gt;update the search vectors&lt;/strong&gt;, run the code below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchVector&lt;/span&gt;
&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SearchVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The arguments of &lt;code&gt;SearchVector()&lt;/code&gt; are the names of the columns that
contain the input strings.  The search vectors will be derived from these
columns.  In our example, we would like to derive search vectors the from
&lt;em&gt;headline&lt;/em&gt; and &lt;em&gt;content&lt;/em&gt; columns.&lt;/p&gt;
&lt;p&gt;Now, the full-text search should work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;&lt;code&gt;SearchVectorField&lt;/code&gt; must be updated &lt;em&gt;after&lt;/em&gt; an object is created
because &lt;code&gt;SearchVector()&lt;/code&gt; is an &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/models/expressions/#f-expressions"&gt;F() expression&lt;/a&gt;,
which refers another column.  It is not available when you are creating a
new object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="full-text-search-queries"&gt;
&lt;h2&gt;Full-text Search Queries&lt;/h2&gt;
&lt;p&gt;To search for a keyword, add &lt;code&gt;filter(search_vector=query)&lt;/code&gt; to the database
query.  &lt;code&gt;filter()&lt;/code&gt; will select the relevant objects that match with the
query.&lt;/p&gt;
&lt;p&gt;For example, the example below searches for the objects with &lt;code&gt;book&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example below shows that prefixes don't match (i.e. &lt;code&gt;book&lt;/code&gt; in the
&lt;code&gt;content&lt;/code&gt; column doesn't match with the query keyword &lt;code&gt;boo&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;boo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example below shows that &lt;code&gt;John&lt;/code&gt; and &lt;code&gt;Johnson&lt;/code&gt; are different:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example below shows how &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Stemming"&gt;stemming&lt;/a&gt; works.  A query with the keyword
&lt;code&gt;read&lt;/code&gt; matches both &lt;code&gt;reading&lt;/code&gt; and &lt;code&gt;reads&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Johnson reads an article.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="using-searchquery"&gt;
&lt;h3&gt;Using SearchQuery&lt;/h3&gt;
&lt;p&gt;More advanced queries can be built with &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/contrib/postgres/search/#searchquery"&gt;SearchQuery&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First of all, wrapping a string with &lt;code&gt;SearchQuery()&lt;/code&gt; is equal to the
queries mentioned earlier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two &lt;code&gt;SearchQuery()&lt;/code&gt; instances can be combined with an OR operator
(&lt;code&gt;|&lt;/code&gt;).  The example below matches all articles with either &lt;code&gt;read&lt;/code&gt;
or &lt;code&gt;piano&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;piano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Johnson reads an article.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob plays a piano.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two &lt;code&gt;SearchQuery()&lt;/code&gt; instances can be combined with an AND operator
(&lt;code&gt;&amp;amp;&lt;/code&gt;).  The example below matches all articles with both &lt;code&gt;read&lt;/code&gt;
and &lt;code&gt;article&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Johnson reads an article.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code&gt;SearchQuery()&lt;/code&gt; instance can be qualified by a NOT operator
(&lt;code&gt;~&lt;/code&gt;).  The example below matches all articles &lt;em&gt;without&lt;/em&gt; &lt;code&gt;johnson&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;johnson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob plays a piano.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, operators can be combined together.  For example, the example below
matches all articles with &lt;code&gt;read&lt;/code&gt; but without &lt;code&gt;johnson&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;johnson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, after testing, you may clear the database by rolling back the
migrations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py migrate fts zero
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update-search-vectors-with-a-trigger"&gt;
&lt;h2&gt;Update Search Vectors with a Trigger&lt;/h2&gt;
&lt;p&gt;A trigger is a database hook that calls the registered procedure when the
specified events occur.  An application of triggers is to keep the database in a
consistent state.  For example, one may create a trigger to restore the
invariant when a query invalidates the database invariant.  If the trigger fails
to restore the invariant, the query will fail and the database will remain
unchanged.  In our demo app, we would like to create a trigger which always
keeps &lt;code&gt;search_vector&lt;/code&gt; in sync with &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is the SQL syntax to create a trigger:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;trigger_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;BEFORE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;AFTER&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;OF&lt;/span&gt; &lt;span class="k"&gt;column&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;DELETE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;EACH&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ROW&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;STATEMENT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;procedure&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A trigger may listen to following events:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;INSERT&lt;/code&gt; -- A new row is inserted into the table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UPDATE&lt;/code&gt; -- A row in the table is updated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UPDATE OF column1, column2&lt;/code&gt; -- The value of &lt;code&gt;column1&lt;/code&gt; or
&lt;code&gt;column2&lt;/code&gt; of a row in the table is updated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; -- A row is deleted from a table.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A trigger may listen to multiple events.  To listen to multiple events, combine
the events with &lt;code&gt;OR&lt;/code&gt; operators.  For example, a trigger with
&lt;code&gt;INSERT OR UPDATE&lt;/code&gt; listens to both &lt;code&gt;INSERT&lt;/code&gt; and &lt;code&gt;UPDATE&lt;/code&gt;
events.&lt;/p&gt;
&lt;p&gt;A trigger may call the procedure &lt;code&gt;BEFORE&lt;/code&gt; or &lt;code&gt;AFTER&lt;/code&gt; the
event is &lt;em&gt;effective&lt;/em&gt;.  A trigger that runs &lt;em&gt;before&lt;/em&gt; the insert event won't find
the to-be-inserted row in the table.  Similarly, a trigger that runs
&lt;em&gt;after&lt;/em&gt; the delete event will not find the deleted row in the table.&lt;/p&gt;
&lt;p&gt;A SQL statement may insert, update, or delete multiple rows.  If a trigger
specifies &lt;code&gt;FOR EACH STATEMENT&lt;/code&gt;, then the callback procedure is called only
once per query.  If a trigger specifies &lt;code&gt;FOR EACH ROW&lt;/code&gt;, then the callback
procedure is called for each rows.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tsvector_update_trigger()&lt;/code&gt; is a PostgreSQL built-in function that reads
the strings from the specified columns and write the computed search vector to
the destination search vector column:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tsvector_update_trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tsvector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;column&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;...])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument is the destination column to save the computed search
vector.  The second argument is the language of the input strings.  The rest of
the arguments are the source columns from which the search vector is derived.&lt;/p&gt;
&lt;p&gt;For example, the code below collects the strings from the &lt;code&gt;headline&lt;/code&gt; and
&lt;code&gt;content&lt;/code&gt;, treat them as English, convert them into a search vector, and
save the result to the &lt;code&gt;search_vector&lt;/code&gt; column:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tsvector_update_trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pg_catalog.english&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Combining the knowledge above, the SQL statement below will create a trigger
that updates the search vector:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;article_update_trigger&lt;/span&gt;
&lt;span class="k"&gt;BEFORE&lt;/span&gt; &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;OF&lt;/span&gt; &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_vector&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;fts_article&lt;/span&gt;
&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;EACH&lt;/span&gt; &lt;span class="k"&gt;ROW&lt;/span&gt; &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt;
&lt;span class="n"&gt;tsvector_update_trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pg_catalog.english&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This trigger will run &lt;code&gt;tsvector_update_trigger()&lt;/code&gt; when a row is inserted
into &lt;code&gt;fts_article&lt;/code&gt; or when the &lt;code&gt;headline&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, or
&lt;code&gt;search_vector&lt;/code&gt; column of a row is updated.&lt;/p&gt;
&lt;div class="section" id="manage-triggers-with-django-migrations"&gt;
&lt;h3&gt;Manage Triggers with Django Migrations&lt;/h3&gt;
&lt;p&gt;To integrate the SQL statement into our Django app, let's create an empty
migration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py makemigrations fts -n create_trigger --empty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, open &lt;code&gt;fts/migrations/0002_create_trigger.py&lt;/code&gt; and add a
&lt;code&gt;RunSQL&lt;/code&gt; operation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0001_initial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunSQL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;            CREATE TRIGGER article_update_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            BEFORE INSERT OR UPDATE OF headline, content, search_vector&lt;/span&gt;
&lt;span class="s1"&gt;            ON fts_article&lt;/span&gt;
&lt;span class="s1"&gt;            FOR EACH ROW EXECUTE PROCEDURE&lt;/span&gt;
&lt;span class="s1"&gt;            tsvector_update_trigger(&lt;/span&gt;
&lt;span class="s1"&gt;              search_vector, &amp;#39;pg_catalog.english&amp;#39;, headline, content);&lt;/span&gt;

&lt;span class="s1"&gt;            UPDATE fts_article SET search_vector = NULL;&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="n"&gt;reverse_sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;            DROP TRIGGER IF EXISTS article_update_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            ON fts_article;&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The forward migration SQL statement (&lt;code&gt;sql&lt;/code&gt;) creates a trigger named
&lt;code&gt;article_update_trigger&lt;/code&gt; and updates all existing search vectors by
triggering the &lt;code&gt;article_update_trigger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The backward migration SQL statement simply drops the
&lt;code&gt;article_update_trigger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Run the command below to test the forward migration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py migrate fts 0002_create_trigger
Operations to perform:
  Target specific migration: 0002_create_trigger, from fts
Running migrations:
  Applying fts.0002_create_trigger... OK
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And run the command below to test the rollback migration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py migrate fts 0001_initial
Operations to perform:
  Target specific migration: 0001_initial, from fts
Running migrations:
  Rendering model states... DONE
  Unapplying fts.0002_create_trigger... OK
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, run the forward migration again so that you can run some test code
later:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py migrate fts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, run the following code in &lt;code&gt;./manage.py shell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fts.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Progressive tesne&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Present tense&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Johnson reads an article.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Article for piano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob plays a piano.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The trigger will update the search vector column whenever a row is inserted or
updated, thus you don't have to update the search vector manually anymore.
Comparing to the search results in the previous section, the search results
shall remain unchanged.  You may run the search queries in the &lt;a class="reference internal" href="#full-text-search-queries"&gt;Full-text Search
Queries&lt;/a&gt; section and verify it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rank-and-order"&gt;
&lt;h2&gt;Rank and Order&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; function mentioned above only selects the matching objects.
It would be helpful to sort the matching objects by &lt;strong&gt;relevance&lt;/strong&gt;.  For example,
objects with more matching terms should be displayed before objects with less
matching terms.&lt;/p&gt;
&lt;p&gt;In Django, you can annotate a query with &lt;code&gt;SearchRank()&lt;/code&gt; and then sort the
matching objects by the value in the annotated field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;

&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To compute the rank of each objects, the &lt;code&gt;SearchRank&lt;/code&gt; class takes three
arguments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first argument should be a search vector field.  It can be either a
&lt;em&gt;SearchVector&lt;/em&gt; instance or an &lt;em&gt;F() expression&lt;/em&gt;.  A &lt;em&gt;SearchVector&lt;/em&gt; instance
computes search vectors from other columns on-the-fly.  On the other hand, an
&lt;em&gt;F() expression&lt;/em&gt; refers an existing search vector field in a model.&lt;/li&gt;
&lt;li&gt;The second argument should be a search query.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After creating a &lt;code&gt;SearchRank&lt;/code&gt; instance, the function
&lt;code&gt;annotate(rank=rank)&lt;/code&gt; is called to create a temporary field named
&lt;code&gt;rank&lt;/code&gt; which contains the ranks computed by &lt;code&gt;SearchRank&lt;/code&gt;.  It can
be further sorted by the &lt;code&gt;order_by('-rank')&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;To test the code above, let's create some test data in
&lt;code&gt;./manage.py shell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fts.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello hello hello hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello hello hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code below shows how to sort matching objects by relevance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello hello hello hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0865452&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello hello hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0827456&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0759909&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0607927&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's all.  In the next section, we will add weights to different columns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-weights-to-search-vectors"&gt;
&lt;h2&gt;Add Weights to Search Vectors&lt;/h2&gt;
&lt;p&gt;So far, all columns are equal.  An occurrance in one column is equal to an
occurrance from another column.  However, in the real world, the importance of
columns are unequal.  An occurrance in one column may outweigh occurrances
from other columns.  In our demo app, &lt;em&gt;headline&lt;/em&gt; is much more important than
&lt;em&gt;content&lt;/em&gt;, thus a heavier weight should be given to &lt;em&gt;headline&lt;/em&gt;.&lt;/p&gt;
&lt;div class="section" id="add-weights-in-django"&gt;
&lt;h3&gt;Add Weights in Django&lt;/h3&gt;
&lt;p&gt;To update the search vector manually, rollback the migration which adds the
trigger:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py migrate fts 0001_initial
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the code below in &lt;code&gt;./manage.py shell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchVector&lt;/span&gt;

&lt;span class="n"&gt;sv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
     &lt;span class="n"&gt;SearchVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, list the updated search vectors with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;book&amp;#39;:7B &amp;#39;john&amp;#39;:3B &amp;#39;progress&amp;#39;:1A &amp;#39;read&amp;#39;:5B &amp;#39;tesn&amp;#39;:2A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;articl&amp;#39;:6B &amp;#39;johnson&amp;#39;:3B &amp;#39;present&amp;#39;:1A &amp;#39;read&amp;#39;:4B &amp;#39;tens&amp;#39;:2A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;articl&amp;#39;:1A &amp;#39;bob&amp;#39;:4B &amp;#39;piano&amp;#39;:3A,7B &amp;#39;play&amp;#39;:5B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The biggest difference is that the weights are appended to each locations.  For
example, &lt;code&gt;articl&lt;/code&gt; in the second row is &lt;code&gt;6B&lt;/code&gt; and &lt;code&gt;articl&lt;/code&gt; in
the third row is &lt;code&gt;1A&lt;/code&gt;.  Similarly, &lt;code&gt;piano&lt;/code&gt; in the third row includes
both &lt;code&gt;3A&lt;/code&gt; and &lt;code&gt;7B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With these weights, the third row will have higher rank in the following query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;

&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;\
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;QuerySet [(3, 0.607927), (2, 0.243171)]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Before adding weights, both rows have the same rank &lt;code&gt;0.0607927&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-weights-in-triggers"&gt;
&lt;h3&gt;Add Weights in Triggers&lt;/h3&gt;
&lt;p&gt;It is much more difficult to add weights in triggers because
&lt;code&gt;tsvector_update_trigger()&lt;/code&gt; does not support weights.  To build search
vectors with weights, you have to write a PostgreSQL function.  Writing
functions for triggers is not an easy task.  We will only cover some topics as
needed.  Please read the &lt;a class="reference external" href="https://www.postgresql.org/docs/current/static/plpgsql-trigger.html"&gt;PostgreSQL manual&lt;/a&gt; for further information.&lt;/p&gt;
&lt;p&gt;First of all, this is the SQL syntax to create a PostgreSQL trigger function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="n"&gt;plpgsql&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="c1"&gt;-- ... code ...&lt;/span&gt;
  &lt;span class="k"&gt;RETURN&lt;/span&gt; &lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This SQL statement creates a function named &lt;code&gt;function_name&lt;/code&gt;, without
arguments, and returns a trigger.  The &lt;code&gt;LANGUAGE&lt;/code&gt; clause specifies that
the code in the quotation &lt;code&gt;$$&lt;/code&gt; is &lt;a class="reference external" href="https://www.postgresql.org/docs/current/static/plpgsql.html"&gt;PL/pgSQL&lt;/a&gt;, which is a SQL extension
defined by PostgreSQL.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NEW&lt;/code&gt; and &lt;code&gt;OLD&lt;/code&gt; are special global variables if a trigger has the
&lt;code&gt;FOR EACH ROW&lt;/code&gt; clause.  &lt;code&gt;NEW&lt;/code&gt; refers the row which will be inserted
into the table by an insert query or the new row which will replace the old row
in an update query.  On the other hand, &lt;code&gt;OLD&lt;/code&gt; refers the old row which
will be replaced by an update query or the row which will be deleted from the
table by a delete query.&lt;/p&gt;
&lt;p&gt;If the procedure is triggered by an &lt;em&gt;insert&lt;/em&gt; query or an &lt;em&gt;update&lt;/em&gt; query, then
the procedure should return &lt;code&gt;NEW&lt;/code&gt;.  If the procedure is triggered by a
&lt;em&gt;delete&lt;/em&gt; query, then the procedure should return &lt;code&gt;OLD&lt;/code&gt;.  It is fine to
return &lt;code&gt;NULL&lt;/code&gt; but you will get different results.  In our demo app, we
don't want such behavior, thus we won't return &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To compute search vectors, three functions are required:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;to_tsvector([lang_config, ]string)&lt;/code&gt; -- This function converts a string
into a search vector.  An optional language configuration may be given.  The
search vector can be concatenated with &lt;code&gt;||&lt;/code&gt; operators.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setweight(tsvector, weight)&lt;/code&gt; -- This function adds weights to a search
vector.  The weight may be &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, or &lt;code&gt;D&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coalesce(value, alt)&lt;/code&gt; -- This function returns &lt;code&gt;alt&lt;/code&gt; if
&lt;code&gt;value&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;.  This function is important because
&lt;code&gt;to_tsvector()&lt;/code&gt; will return &lt;code&gt;NULL&lt;/code&gt; if the input string is
&lt;code&gt;NULL&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To save the computed search vector into a column, &lt;code&gt;SELECT ... INTO ...&lt;/code&gt;
statement may be used.  It computes the expression after &lt;code&gt;SELECT&lt;/code&gt; and save
the result to the column specified after &lt;code&gt;INTO&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Combining the knowledge above, &lt;code&gt;update_article_search_vector()&lt;/code&gt; can be
created with the SQL statement below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;update_article_search_vector&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="n"&gt;plpgsql&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;setweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;setweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;RETURN&lt;/span&gt; &lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the &lt;code&gt;article_update_trigger&lt;/code&gt; should call
&lt;code&gt;update_article_search_vector()&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;article_update_trigger&lt;/span&gt;
&lt;span class="k"&gt;BEFORE&lt;/span&gt; &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;OF&lt;/span&gt; &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_vector&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;fts_article&lt;/span&gt;
&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;EACH&lt;/span&gt; &lt;span class="k"&gt;ROW&lt;/span&gt; &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;update_article_search_vector&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To integrate these SQL statements into our demo app, create an empty migration
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py makemigrations fts -n add_weights --empty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then open &lt;code&gt;fts/migrations/0003_add_weights.py&lt;/code&gt; and add the code below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0002_create_trigger&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunSQL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;            DROP TRIGGER article_update_trigger ON fts_article;&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE OR REPLACE FUNCTION update_article_search_vector()&lt;/span&gt;
&lt;span class="s1"&gt;            RETURNS TRIGGER&lt;/span&gt;
&lt;span class="s1"&gt;            LANGUAGE plpgsql AS $$&lt;/span&gt;
&lt;span class="s1"&gt;            BEGIN&lt;/span&gt;
&lt;span class="s1"&gt;              SELECT&lt;/span&gt;
&lt;span class="s1"&gt;                setweight(to_tsvector(&lt;/span&gt;
&lt;span class="s1"&gt;                  coalesce(NEW.headline, &amp;#39;&amp;#39;)), &amp;#39;A&amp;#39;) ||&lt;/span&gt;
&lt;span class="s1"&gt;                setweight(to_tsvector(&lt;/span&gt;
&lt;span class="s1"&gt;                  coalesce(NEW.content, &amp;#39;&amp;#39;)), &amp;#39;B&amp;#39;)&lt;/span&gt;
&lt;span class="s1"&gt;              INTO NEW.search_vector;&lt;/span&gt;
&lt;span class="s1"&gt;              RETURN NEW;&lt;/span&gt;
&lt;span class="s1"&gt;            END;&lt;/span&gt;
&lt;span class="s1"&gt;            $$;&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE TRIGGER article_update_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            BEFORE INSERT OR UPDATE OF headline, content, search_vector&lt;/span&gt;
&lt;span class="s1"&gt;            ON fts_article&lt;/span&gt;
&lt;span class="s1"&gt;            FOR EACH ROW&lt;/span&gt;
&lt;span class="s1"&gt;            EXECUTE PROCEDURE update_article_search_vector();&lt;/span&gt;

&lt;span class="s1"&gt;            UPDATE fts_article SET search_vector = NULL;&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;reverse_sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;            DROP TRIGGER article_update_trigger ON fts_article;&lt;/span&gt;

&lt;span class="s1"&gt;            DROP FUNCTION update_article_search_vector();&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE TRIGGER article_update_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            BEFORE INSERT OR UPDATE OF headline, content, search_vector&lt;/span&gt;
&lt;span class="s1"&gt;            ON fts_article&lt;/span&gt;
&lt;span class="s1"&gt;            FOR EACH ROW EXECUTE PROCEDURE&lt;/span&gt;
&lt;span class="s1"&gt;            tsvector_update_trigger(&lt;/span&gt;
&lt;span class="s1"&gt;              search_vector, &amp;#39;pg_catalog.english&amp;#39;, headline, content);&lt;/span&gt;

&lt;span class="s1"&gt;            UPDATE fts_article SET search_vector = NULL;&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The forward migration drops the existing &lt;code&gt;article_update_trigger&lt;/code&gt;, creates
a new function named &lt;code&gt;update_article_search_vector()&lt;/code&gt;, create a new
&lt;code&gt;article_update_trigger&lt;/code&gt; which calls
&lt;code&gt;update_article_search_vector()&lt;/code&gt;, and then update all search vectors.&lt;/p&gt;
&lt;p&gt;Finally, you may migrate the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py migrate fts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And run the following code in &lt;code&gt;./manage.py shell&lt;/code&gt; to test whether the
trigger works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;

&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;\
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output must be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;QuerySet [(3, 0.607927), (2, 0.243171)]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="map-to-numeric-weights"&gt;
&lt;h3&gt;Map to Numeric Weights&lt;/h3&gt;
&lt;p&gt;Weights in search vectors are represented by alphabets &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;,
&lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt;.  This representation gives the flexibility to map them
into different numeric weights.  For example, some users may think &lt;em&gt;headlines&lt;/em&gt;
are more important than &lt;em&gt;contents&lt;/em&gt; but other users may think conversely.  An
option may be provided to users so that users can pick their preferences.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;weights&lt;/code&gt; argument may be passed to &lt;code&gt;SearchRank()&lt;/code&gt;.  The
&lt;code&gt;weights&lt;/code&gt; argument should be a list with 4 floating point numbers ranging
from 0.0 to 1.0.  The floating point numbers stand for the numeric weight for
&lt;code&gt;D&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;A&lt;/code&gt; respectively.  If the
&lt;code&gt;weights&lt;/code&gt; is not specified, then the default values are &lt;code&gt;0.1&lt;/code&gt;,
&lt;code&gt;0.2&lt;/code&gt;, &lt;code&gt;0.4&lt;/code&gt;, and &lt;code&gt;1.0&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;For example, if &lt;em&gt;headlines&lt;/em&gt; are more important than &lt;em&gt;contents&lt;/em&gt;, then you may
use the default weights:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.postgres.search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;

&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;\
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the output will show that row &lt;code&gt;3&lt;/code&gt; comes before row &lt;code&gt;2&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;QuerySet [(3, 0.607927), (2, 0.243171)]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Conversely, if &lt;em&gt;contents&lt;/em&gt; are more important than &lt;em&gt;headlines&lt;/em&gt;, then you may swap
the third and fourth weight:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SearchRank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# SWAPPED&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;\
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the output will show that row &lt;code&gt;2&lt;/code&gt; comes before row &lt;code&gt;3&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;QuerySet [(2, 0.607927), (3, 0.243171)]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="derive-search-vectors-from-related-objects"&gt;
&lt;h2&gt;Derive Search Vectors from Related Objects&lt;/h2&gt;
&lt;p&gt;Sometimes, a page is generated from an object of a model and several related
objects of another model.  For example, in our demo app, several &lt;em&gt;comments&lt;/em&gt; may
be associated with an &lt;em&gt;article&lt;/em&gt;.  How to include those comments in search
vectors?  This is different from the aforementioned examples because search
vectors must be derived from the rows from other tables.&lt;/p&gt;
&lt;p&gt;To address this challenge, two changes are necessary.  First, you should collect
the comments from &lt;code&gt;fts_comment&lt;/code&gt; with a &lt;strong&gt;sub-query&lt;/strong&gt;, which is denoted by
&lt;em&gt;the parentheses&lt;/em&gt; in the third &lt;code&gt;to_tsvector()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;update_article_search_vector&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="n"&gt;plpgsql&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;setweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;setweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;setweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;fts_comment&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;article_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;RETURN&lt;/span&gt; &lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;sub-query&lt;/strong&gt; collects all comments that associate with this article and
concatenate them with &lt;code&gt;string_agg()&lt;/code&gt; function.  If there are no matching
rows, then &lt;code&gt;string_agg()&lt;/code&gt; will return &lt;code&gt;NULL&lt;/code&gt;.  Thus,
&lt;code&gt;coalesce()&lt;/code&gt; function is called to provide a default.&lt;/p&gt;
&lt;p&gt;Second, the sub-query must see the changes to the &lt;code&gt;fts_comment&lt;/code&gt; table,
thus &lt;code&gt;update_article_search_vector()&lt;/code&gt; must be triggered by another trigger
which is called &lt;strong&gt;after&lt;/strong&gt; the changes are effective.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;insert_comment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="n"&gt;plpgsql&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;fts_article&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;search_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
  &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;RETURN&lt;/span&gt; &lt;span class="k"&gt;NEW&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TRIGGER&lt;/span&gt; &lt;span class="n"&gt;comment_insert_trigger&lt;/span&gt;
&lt;span class="k"&gt;AFTER&lt;/span&gt; &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;fts_comment&lt;/span&gt;  &lt;span class="c1"&gt;-- Use AFRER instead of BEFORE&lt;/span&gt;
&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;EACH&lt;/span&gt; &lt;span class="k"&gt;ROW&lt;/span&gt; &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;insert_comment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are other concerns.  For example, if an update query changes the foreign
key, then both the article referenced by the &lt;em&gt;old foreign key&lt;/em&gt; and the article
referenced by the &lt;em&gt;new foreign key&lt;/em&gt; must be updated.  For the sake of brevity,
we will not dicuss them in detail.  The complete code listing can be found in
the migration operation below.&lt;/p&gt;
&lt;div class="section" id="define-a-model-for-comments-and-create-triggers"&gt;
&lt;h3&gt;Define a Model for Comments and Create Triggers&lt;/h3&gt;
&lt;p&gt;First, open &lt;code&gt;fts/models.py&lt;/code&gt; and add a &lt;code&gt;Comment&lt;/code&gt; model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make a migration for the &lt;code&gt;Comment&lt;/code&gt; model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py makemigrations fts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create an empty migration for the trigger:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py makemigrations fts -n index_comment --empty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit &lt;code&gt;fts/migrations/0004_index_comment.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0004_comment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunSQL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;            CREATE OR REPLACE FUNCTION update_article_search_vector()&lt;/span&gt;
&lt;span class="s1"&gt;            RETURNS TRIGGER&lt;/span&gt;
&lt;span class="s1"&gt;            LANGUAGE plpgsql AS $$&lt;/span&gt;
&lt;span class="s1"&gt;            BEGIN&lt;/span&gt;
&lt;span class="s1"&gt;              SELECT&lt;/span&gt;
&lt;span class="s1"&gt;                setweight(to_tsvector(&lt;/span&gt;
&lt;span class="s1"&gt;                  coalesce(NEW.headline, &amp;#39;&amp;#39;)), &amp;#39;A&amp;#39;) ||&lt;/span&gt;
&lt;span class="s1"&gt;                setweight(to_tsvector(&lt;/span&gt;
&lt;span class="s1"&gt;                  coalesce(NEW.content, &amp;#39;&amp;#39;)), &amp;#39;B&amp;#39;) ||&lt;/span&gt;
&lt;span class="s1"&gt;                setweight(to_tsvector(&lt;/span&gt;
&lt;span class="s1"&gt;                  (SELECT coalesce(string_agg(content, &amp;#39; &amp;#39;), &amp;#39;&amp;#39;)&lt;/span&gt;
&lt;span class="s1"&gt;                   FROM fts_comment WHERE article_id = NEW.id)), &amp;#39;C&amp;#39;)&lt;/span&gt;
&lt;span class="s1"&gt;              INTO NEW.search_vector;&lt;/span&gt;
&lt;span class="s1"&gt;              RETURN NEW;&lt;/span&gt;
&lt;span class="s1"&gt;            END;&lt;/span&gt;
&lt;span class="s1"&gt;            $$;&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE OR REPLACE FUNCTION insert_comment()&lt;/span&gt;
&lt;span class="s1"&gt;            RETURNS TRIGGER&lt;/span&gt;
&lt;span class="s1"&gt;            LANGUAGE plpgsql AS $$&lt;/span&gt;
&lt;span class="s1"&gt;            BEGIN&lt;/span&gt;
&lt;span class="s1"&gt;              UPDATE fts_article SET search_vector = NULL&lt;/span&gt;
&lt;span class="s1"&gt;              WHERE id = NEW.article_id;&lt;/span&gt;
&lt;span class="s1"&gt;              RETURN NEW;&lt;/span&gt;
&lt;span class="s1"&gt;            END;&lt;/span&gt;
&lt;span class="s1"&gt;            $$;&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE OR REPLACE FUNCTION update_comment()&lt;/span&gt;
&lt;span class="s1"&gt;            RETURNS TRIGGER&lt;/span&gt;
&lt;span class="s1"&gt;            LANGUAGE plpgsql AS $$&lt;/span&gt;
&lt;span class="s1"&gt;            BEGIN&lt;/span&gt;
&lt;span class="s1"&gt;              UPDATE fts_article SET search_vector = NULL&lt;/span&gt;
&lt;span class="s1"&gt;              WHERE id = NEW.article_id;&lt;/span&gt;
&lt;span class="s1"&gt;              IF (OLD.article_id &amp;lt;&amp;gt; NEW.article_id) THEN&lt;/span&gt;
&lt;span class="s1"&gt;                UPDATE fts_article SET search_vector = NULL&lt;/span&gt;
&lt;span class="s1"&gt;                WHERE id = OLD.article_id;&lt;/span&gt;
&lt;span class="s1"&gt;              END IF;&lt;/span&gt;
&lt;span class="s1"&gt;              RETURN NEW;&lt;/span&gt;
&lt;span class="s1"&gt;            END;&lt;/span&gt;
&lt;span class="s1"&gt;            $$;&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE OR REPLACE FUNCTION delete_comment()&lt;/span&gt;
&lt;span class="s1"&gt;            RETURNS TRIGGER&lt;/span&gt;
&lt;span class="s1"&gt;            LANGUAGE plpgsql AS $$&lt;/span&gt;
&lt;span class="s1"&gt;            BEGIN&lt;/span&gt;
&lt;span class="s1"&gt;              UPDATE fts_article SET search_vector = NULL&lt;/span&gt;
&lt;span class="s1"&gt;              WHERE id = OLD.article_id;&lt;/span&gt;
&lt;span class="s1"&gt;              RETURN OLD;&lt;/span&gt;
&lt;span class="s1"&gt;            END;&lt;/span&gt;
&lt;span class="s1"&gt;            $$;&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE TRIGGER comment_insert_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            AFTER INSERT ON fts_comment&lt;/span&gt;
&lt;span class="s1"&gt;            FOR EACH ROW EXECUTE PROCEDURE insert_comment();&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE TRIGGER comment_update_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            AFTER UPDATE OF article_id, content ON fts_comment&lt;/span&gt;
&lt;span class="s1"&gt;            FOR EACH ROW EXECUTE PROCEDURE update_comment();&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE TRIGGER comment_delete_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            AFTER DELETE ON fts_comment&lt;/span&gt;
&lt;span class="s1"&gt;            FOR EACH ROW EXECUTE PROCEDURE delete_comment();&lt;/span&gt;

&lt;span class="s1"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;reverse_sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;            DROP TRIGGER IF EXISTS comment_insert_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            ON fts_comment;&lt;/span&gt;

&lt;span class="s1"&gt;            DROP TRIGGER IF EXISTS comment_update_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            ON fts_comment;&lt;/span&gt;

&lt;span class="s1"&gt;            DROP TRIGGER IF EXISTS comment_delete_trigger&lt;/span&gt;
&lt;span class="s1"&gt;            ON fts_comment;&lt;/span&gt;

&lt;span class="s1"&gt;            DROP FUNCTION IF EXISTS insert_comment();&lt;/span&gt;
&lt;span class="s1"&gt;            DROP FUNCTION IF EXISTS update_comment();&lt;/span&gt;
&lt;span class="s1"&gt;            DROP FUNCTION IF EXISTS delete_comment();&lt;/span&gt;

&lt;span class="s1"&gt;            CREATE OR REPLACE FUNCTION update_article_search_vector()&lt;/span&gt;
&lt;span class="s1"&gt;            RETURNS TRIGGER&lt;/span&gt;
&lt;span class="s1"&gt;            LANGUAGE plpgsql AS $$&lt;/span&gt;
&lt;span class="s1"&gt;            BEGIN&lt;/span&gt;
&lt;span class="s1"&gt;              SELECT&lt;/span&gt;
&lt;span class="s1"&gt;                setweight(to_tsvector(&lt;/span&gt;
&lt;span class="s1"&gt;                  coalesce(NEW.headline, &amp;#39;&amp;#39;)), &amp;#39;A&amp;#39;) ||&lt;/span&gt;
&lt;span class="s1"&gt;                setweight(to_tsvector(&lt;/span&gt;
&lt;span class="s1"&gt;                  coalesce(NEW.content, &amp;#39;&amp;#39;)), &amp;#39;B&amp;#39;)&lt;/span&gt;
&lt;span class="s1"&gt;              INTO NEW.search_vector;&lt;/span&gt;
&lt;span class="s1"&gt;              RETURN NEW;&lt;/span&gt;
&lt;span class="s1"&gt;            END;&lt;/span&gt;
&lt;span class="s1"&gt;            $$;&lt;/span&gt;

&lt;span class="s1"&gt;            UPDATE fts_article SET search_vector = NULL;&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the forward migration, the &lt;code&gt;update_article_search_vector()&lt;/code&gt; function is
changed to include comments.  Three functions and triggers are created as well.
The triggers listen to the &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt;
event and call &lt;code&gt;insert_comment()&lt;/code&gt;, &lt;code&gt;update_comment()&lt;/code&gt;, and
&lt;code&gt;delete_comment()&lt;/code&gt; respectively.  The differences between these functions
are the usages of global variables:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;code&gt;insert_comment()&lt;/code&gt; function uses &lt;code&gt;NEW&lt;/code&gt; and returns
&lt;code&gt;NEW&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;update_comment()&lt;/code&gt; functions uses both &lt;code&gt;NEW&lt;/code&gt; and &lt;code&gt;OLD&lt;/code&gt;
and returns &lt;code&gt;NEW&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;delete_comment&lt;/code&gt; function uses &lt;code&gt;OLD&lt;/code&gt; and returns &lt;code&gt;OLD&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To test the code above, run the code below in &lt;code&gt;./manage.py shell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fts.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Comment&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Progressive tense&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John is reading a book.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comment_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The book is Pride and Prejudice.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comment_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John loves The Tragedy of Hamlet as well.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pride&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;QuerySet [
    (1, &amp;quot;&amp;#39;book&amp;#39;:7B,9C &amp;#39;hamlet&amp;#39;:19C &amp;#39;john&amp;#39;:3B,14C &amp;#39;love&amp;#39;:15C
    &amp;#39;prejudic&amp;#39;:13C &amp;#39;pride&amp;#39;:11C &amp;#39;progress&amp;#39;:1A &amp;#39;read&amp;#39;:5B
    &amp;#39;tens&amp;#39;:2A &amp;#39;tragedi&amp;#39;:17C &amp;#39;well&amp;#39;:21C&amp;quot;)
]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The search vector includes some terms from the &lt;code&gt;content&lt;/code&gt; field of the
&lt;code&gt;Comment&lt;/code&gt; model.  For example, there are &lt;code&gt;'hamlet':19C&lt;/code&gt;,
&lt;code&gt;'prejudic':13C&lt;/code&gt;, &lt;code&gt;'pride':11C&lt;/code&gt;, and &lt;code&gt;'tragedi':17C&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you remove the comment &lt;code&gt;c2&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And query for &lt;code&gt;Pride&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pride&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;search_vector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you will see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;QuerySet [
    (1, &amp;quot;&amp;#39;book&amp;#39;:7B,9C &amp;#39;john&amp;#39;:3B &amp;#39;prejudic&amp;#39;:13C &amp;#39;pride&amp;#39;:11C
    &amp;#39;progress&amp;#39;:1A &amp;#39;read&amp;#39;:5B &amp;#39;tens&amp;#39;:2A&amp;quot;)
]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;In this post, I started from explaining the purpose of &lt;a class="reference internal" href="#searchvectorfield-and-ginindex"&gt;SearchVectorField and
GinIndex&lt;/a&gt;.  Next, I discussed how to update &lt;a class="reference internal" href="#update-search-vectors"&gt;SearchVectorField&lt;/a&gt; and make
queries with &lt;a class="reference internal" href="#full-text-search-queries"&gt;SearchQuery&lt;/a&gt;.  Then, I went through more advanced topics, such
as updating search vectors with &lt;a class="reference internal" href="#update-search-vectors-with-a-trigger"&gt;PostgreSQL triggers&lt;/a&gt;, &lt;a class="reference internal" href="#rank-and-order"&gt;sorting objects by
relevance&lt;/a&gt;, and &lt;a class="reference internal" href="#add-weights-to-search-vectors"&gt;adding weights&lt;/a&gt;.  Finally, I ended up with a technique to
derive search vectors from related objects.  I believe this article covered all
common use cases.  All of the code can be found in the GitHub repository
&lt;a class="reference external" href="https://github.com/loganchien/django-fts-demo"&gt;loganchien/django-fts-demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a long article.  I hope this article is helpful and enjoyable.  Feel
free to write me e-mails if you have any comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/topics/migrations/"&gt;Django 2.0 Documentation, Migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/ref/contrib/postgres/search/"&gt;Django 2.0 Documentation, PostgreSQL specific features, Full text search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.postgresql.org/docs/9.6/static/textsearch.html"&gt;PostgreSQL 9.6 Manual, Chapter 12. Full Text Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.postgresql.org/docs/9.6/static/plpgsql.html"&gt;PostgreSQL 9.6 Manual, Chapter 41. PL/pgSQL -- SQL Procedural Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.postgresql.org/docs/9.6/static/sql-createtrigger.html"&gt;PostgreSQL 9.6 Manual, Reference, SQL Commands, CREATE TRIGGER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.lotech.org/postgres-full-text-search-with-django.html"&gt;Postgres Full-Text Search With Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="sql"></category><category term="postgresql"></category><category term="python"></category></entry><entry><title>Introduction to qemu-debootstrap</title><link href="http://logan.tw/posts/2017/01/21/introduction-to-qemu-debootstrap/" rel="alternate"></link><published>2017-01-21T22:49:00+08:00</published><updated>2017-01-21T22:49:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2017-01-21:/posts/2017/01/21/introduction-to-qemu-debootstrap/</id><summary type="html">&lt;p&gt;User-mode &lt;a class="reference external" href="https://www.qemu.org/"&gt;QEMU&lt;/a&gt; translates the instructions and the system calls. To run a
&lt;strong&gt;static executable&lt;/strong&gt;, you may wrap the command line with &lt;code&gt;qemu-${arch}&lt;/code&gt;.
For example, you may wrap an ARM64 static executable with &lt;code&gt;qemu-aarch64&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ qemu-aarch64 /path/to/static-executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, running a &lt;strong&gt;dynamically linked executable&lt;/strong&gt; requires more efforts.  To
run a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;User-mode &lt;a class="reference external" href="https://www.qemu.org/"&gt;QEMU&lt;/a&gt; translates the instructions and the system calls. To run a
&lt;strong&gt;static executable&lt;/strong&gt;, you may wrap the command line with &lt;code&gt;qemu-${arch}&lt;/code&gt;.
For example, you may wrap an ARM64 static executable with &lt;code&gt;qemu-aarch64&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ qemu-aarch64 /path/to/static-executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, running a &lt;strong&gt;dynamically linked executable&lt;/strong&gt; requires more efforts.  To
run a dynamically linked executable, a complete user space environment
(including dynamic linker, shared libraries, etc) must be set up.&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;code&gt;qemu-debootstrap&lt;/code&gt; can help us set up an Ubuntu (or Debian)
user space environment.  In this post, the instructions to set up an ARM64
Ubuntu environment will be presented.&lt;/p&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Three packages are required for this post:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;debootstrap&lt;/strong&gt; is a Debian (or Ubuntu) bootstrap tool.  It will download
several deb packages and set up a minimal Debian (or Ubuntu) user space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qemu-user-static&lt;/strong&gt; is the deb package for user-mode QEMU static executables.
Don't confuse this package with &lt;em&gt;qemu-user&lt;/em&gt;.  The static version must be
installed because these QEMU executables will be copied into chroot
environments.  This package also includes &lt;code&gt;qemu-debootstrap&lt;/code&gt;, which is a
wrapper for cross-architecture debootstrap.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;schroot&lt;/strong&gt; is a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Chroot"&gt;chroot&lt;/a&gt; wrapper.  Besides changing the root directory,
schroot will run several hooks before entering and after leaving the chroot so
that many functionalities, including network, can work without problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run the command below to install these prerequisites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install debootstrap qemu-user-static schroot
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-environment"&gt;
&lt;h2&gt;Create an Environment&lt;/h2&gt;
&lt;p&gt;To create an Ubuntu 16.04 (Xenial Xerus) ARM64 user space in the
&lt;code&gt;arm64-ubuntu&lt;/code&gt; directory, run the following command &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo qemu-debootstrap --arch&lt;span class="o"&gt;=&lt;/span&gt;arm64 xenial arm64-ubuntu
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, create a schroot configuration at
&lt;code&gt;/etc/schroot/chroot.d/arm64-ubuntu&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[arm64-ubuntu]&lt;/span&gt;
&lt;span class="s2"&gt;description=Ubuntu 16.04 Xenial (arm64)&lt;/span&gt;
&lt;span class="s2"&gt;directory=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/arm64-ubuntu&lt;/span&gt;
&lt;span class="s2"&gt;root-users=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;whoami&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;users=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;whoami&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;type=directory&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/schroot/chroot.d/arm64-ubuntu
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, enter the schroot with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ schroot -c arm64-ubuntu
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we are in an environment that can run ARM 64-bit binaries.  For example, we
can check the architecture with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; uname -m
aarch64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BTW, to be a root user in the chroot, you may pass &lt;code&gt;-u root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ schroot -c arm64-ubuntu -u root
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, you may install packages with &lt;code&gt;apt-get&lt;/code&gt;.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; apt-get install vim
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;In this post, I have covered &lt;code&gt;qemu-user-static&lt;/code&gt;, &lt;code&gt;qemu-debootstrap&lt;/code&gt;
and &lt;code&gt;schroot&lt;/code&gt;.  These tools significantly boosted my productivity on
cross-architecture development.  I hope this article is helpful.  Thanks for
reading.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;By default, &lt;code&gt;qemu-debootstrap&lt;/code&gt; will download deb packages from
&lt;a class="reference external" href="http://ports.ubuntu.com/ubuntu-ports"&gt;http://ports.ubuntu.com/ubuntu-ports&lt;/a&gt;.  If you would like to change the apt
repository, specify the URL after the directory name.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="qemu"></category><category term="linux"></category><category term="aarch64"></category><category term="arm64"></category></entry><entry><title>Django ORM and Updating Counters</title><link href="http://logan.tw/posts/2016/12/03/django-orm-and-updating-counters/" rel="alternate"></link><published>2016-12-03T22:04:00+08:00</published><updated>2016-12-03T22:04:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-12-03:/posts/2016/12/03/django-orm-and-updating-counters/</id><summary type="html">&lt;p&gt;Counters are common in website development.  Most websites collect the number of
page views with counters.  E-commerce websites keep track of the quantity of a
commodity with counters.  However, it is hard to implement a correct counter
with &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/topics/db/models/"&gt;Django ORM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I would like to cover three ways …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Counters are common in website development.  Most websites collect the number of
page views with counters.  E-commerce websites keep track of the quantity of a
commodity with counters.  However, it is hard to implement a correct counter
with &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/topics/db/models/"&gt;Django ORM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I would like to cover three ways to update counters in Django.
The &lt;a class="reference internal" href="#naive-but-incorrect"&gt;first&lt;/a&gt; and the &lt;a class="reference internal" href="#using-f-expressions"&gt;second&lt;/a&gt; have race conditions.  Skip to the &lt;a class="reference internal" href="#using-select-for-update"&gt;third&lt;/a&gt;
implementation if you would like to know the correct solution immediately.&lt;/p&gt;
&lt;div class="section" id="case-study-a-ticket-issuing-app"&gt;
&lt;h2&gt;Case Study: A Ticket Issuing App&lt;/h2&gt;
&lt;p&gt;To demonstrate the problem, I would like to build an app to issue tickets with
serial numbers.  Each user must get one integer representing the number of
tickets that have been issued prior to the user.  Apparently, the numbers must
be distinct and all requests from users must be serialized in a certain order.&lt;/p&gt;
&lt;p&gt;The source code has been uploaded to &lt;a class="reference external" href="https://github.com/loganchien/django-counter-demo/"&gt;loganchien/django-counter-demo&lt;/a&gt;.  There
are 4 views in &lt;a class="reference external" href="https://github.com/loganchien/django-counter-demo/blob/master/counter/views.py"&gt;counter/views.py&lt;/a&gt;.  These views will be elaborated in the
upcoming sections.&lt;/p&gt;
&lt;p&gt;To run the app with 10 workers concurrently, launch the app with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gunicorn -w &lt;span class="m"&gt;10&lt;/span&gt; counter_demo.wsgi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test the correctness, &lt;a class="reference external" href="https://github.com/loganchien/django-counter-demo/blob/master/stress_test.py"&gt;stress_test.py&lt;/a&gt; will send 400 requests to get the
serial numbers.  The requests are divided into 4 threads, thus each thread is
responsible for 100 requests.  After collecting the numbers from each threads,
the test script will count the number of &lt;em&gt;distinct&lt;/em&gt; serial numbers.  The
expected answer is 400.  Finally, the test script will send another request to
get the latest number in the database.  The expected answer is 401.  The source
code of the test script is listed below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_requests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;response_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;response_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response_set&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-j&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--parallel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parallel&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parallel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response_sets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_set&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_sets&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_set&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;last extra request got:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="naive-but-incorrect"&gt;
&lt;h2&gt;Naive but Incorrect&lt;/h2&gt;
&lt;p&gt;At the first glance, it looks straightforward to implement a counter.  We can
simply load an object with &lt;code&gt;get_or_create()&lt;/code&gt;, add &lt;code&gt;num_counts&lt;/code&gt; by
one, and save the object with &lt;code&gt;save()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this &lt;strong&gt;doesn't work&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./stress_test.py http://localhost:8000/counter1
...
task &lt;span class="m"&gt;0&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;1&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;2&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;3&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
total &lt;span class="m"&gt;109&lt;/span&gt;
last extra request got: &lt;span class="m"&gt;110&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This total number is incorrect because there is a &lt;strong&gt;race condition&lt;/strong&gt; between
&lt;code&gt;get_or_create()&lt;/code&gt; and &lt;code&gt;save()&lt;/code&gt;.  Another worker may update
&lt;code&gt;num_counts&lt;/code&gt; in the database after &lt;code&gt;get_or_create()&lt;/code&gt; returns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-f-expressions"&gt;
&lt;h2&gt;Using F() expressions&lt;/h2&gt;
&lt;p&gt;In Django apps, programmers may refer &lt;strong&gt;the value in the database&lt;/strong&gt; with
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/ref/models/expressions/#f-expressions"&gt;F() expressions&lt;/a&gt;.  It will be translated into SQL statements and take effects
after calling the &lt;code&gt;save()&lt;/code&gt; method.  After updating the database, you
should call &lt;code&gt;refresh_from_db()&lt;/code&gt; to load the latest value from the
database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;num_counts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh_from_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It &lt;em&gt;seems&lt;/em&gt; working.  The total number and the last number &lt;em&gt;seem&lt;/em&gt; correct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./stress_test.py http://localhost:8000/counter2
...
task &lt;span class="m"&gt;0&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;1&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;2&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;3&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
total &lt;span class="m"&gt;400&lt;/span&gt;
last extra request got: &lt;span class="m"&gt;401&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this is not correct.  There is a &lt;strong&gt;race condition&lt;/strong&gt; between
&lt;code&gt;save()&lt;/code&gt; and &lt;code&gt;refresh_from_db()&lt;/code&gt;.  You can observe the race
condition by sleeping randomly between &lt;code&gt;save()&lt;/code&gt; and
&lt;code&gt;refresh_from_db()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;num_counts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Demonstrate race condition by sleeping randomly&lt;/span&gt;
    &lt;span class="c1"&gt;# between save() and refresh_from_db().&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh_from_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, here is the problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./stress_test.py http://localhost:8000/counter3
...
task &lt;span class="m"&gt;0&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;1&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;2&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;3&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
total &lt;span class="m"&gt;260&lt;/span&gt;
last extra request got: &lt;span class="m"&gt;401&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The value in the database is correct.  However, some users incorrectly get the
numbers that are created by other transactions.&lt;/p&gt;
&lt;p&gt;Some users get the incorrect numbers because &lt;code&gt;refresh_from_db()&lt;/code&gt;
retrieves the &lt;strong&gt;latest version&lt;/strong&gt; in the database.  Unfortunately, AFAIK, all
Django model updating functions, including &lt;code&gt;save()&lt;/code&gt; and &lt;code&gt;update()&lt;/code&gt;,
do not return the updated values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-select-for-update"&gt;
&lt;h2&gt;Using select_for_update()&lt;/h2&gt;
&lt;p&gt;The third implementation makes queries with &lt;code&gt;select_for_update()&lt;/code&gt;.  Unlike
&lt;code&gt;select()&lt;/code&gt; or &lt;code&gt;get_or_create()&lt;/code&gt;, &lt;code&gt;select_for_update()&lt;/code&gt; will
acquire the &lt;strong&gt;write lock&lt;/strong&gt; of the selected rows so that &lt;strong&gt;other transactions
won't be able to update the row until the transaction ends&lt;/strong&gt;. Furthermore, if
two &lt;code&gt;select_for_update()&lt;/code&gt; are competing for a row, the later one is
blocked until the lock is released.&lt;/p&gt;
&lt;p&gt;The code below starts a transaction with &lt;code&gt;transaction.atomic()&lt;/code&gt;, load the
object with &lt;code&gt;select_for_update()&lt;/code&gt;, compute &lt;code&gt;num_counts&lt;/code&gt; in Python,
and save the updated object to database with &lt;code&gt;save()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_for_update&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;num_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num_counts&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_counts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since other transactions won't be able to update the object in the middle of the
transaction, the local variable &lt;code&gt;num_counts&lt;/code&gt; is guaranteed to be the
number for this user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./stress_test.py http://localhost:8000/counter4
...
task &lt;span class="m"&gt;0&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;1&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;2&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
task &lt;span class="m"&gt;3&lt;/span&gt; received &lt;span class="m"&gt;100&lt;/span&gt; numbers
total &lt;span class="m"&gt;400&lt;/span&gt;
last extra request got: &lt;span class="m"&gt;401&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As expected, the answer is correct.&lt;/p&gt;
&lt;p&gt;However, only PostgreSQL, Oracle, and MySQL support &lt;code&gt;select_for_update()&lt;/code&gt;.
Some backend will ignore &lt;code&gt;select_for_update()&lt;/code&gt; silently.  Thus, it is
important to choose a right database backend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we covered three different ways to update counters:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference internal" href="#naive-but-incorrect"&gt;first implementation&lt;/a&gt; doesn't work at all.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference internal" href="#using-f-expressions"&gt;second implementation&lt;/a&gt; uses &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/ref/models/expressions/#f-expressions"&gt;F() expressions&lt;/a&gt;.  The value in the
database is correct, but this implementation won't be able to get the updated
value.  As a result, the second implementation can't solve the ticket issuing
problem.  However, if your application does not impose strong requirements on
the numbers returned to the users, this is still a good solution.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference internal" href="#using-select-for-update"&gt;third implementation&lt;/a&gt; uses &lt;code&gt;select_for_update()&lt;/code&gt; to acquire the
write lock of the selected row.  This correctly solves the ticket issuing
problem.  However, only PostgreSQL, Oracle, and MySQL support
&lt;code&gt;select_for_update()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Concurrent programming is always difficult.  Even though updating counters looks
simple, there are many pitfalls.  But that's the reason why programming is fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django 1.10 documentation, QuerySet API reference, &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/ref/models/querysets/#select-for-update"&gt;select_for_update()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django 1.10 documentation, Query Expressions, &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/ref/models/expressions/#f-expressions"&gt;F() expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django 1.10 documentation, Model instance reference, &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/ref/models/instances/#django.db.models.Model.refresh_from_db"&gt;refresh_from_db()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="python"></category></entry><entry><title>Connect to Freenode with Irssi through SSL and SASL</title><link href="http://logan.tw/posts/2016/03/19/connect-to-freenode-with-irssi-through-ssl-and-sasl/" rel="alternate"></link><published>2016-03-19T16:47:00+08:00</published><updated>2016-03-19T16:47:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-03-19:/posts/2016/03/19/connect-to-freenode-with-irssi-through-ssl-and-sasl/</id><summary type="html">&lt;p&gt;My dynamic IP address, which is provided by my ISP, seems to be blocked by
&lt;a class="reference external" href="https://freenode.net"&gt;Freenode&lt;/a&gt; (because it is easy for us to get another IP.)  According to the error
message, I should connect and login with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer"&gt;SASL&lt;/a&gt;.  It took me a while to figure
out a solution, thus I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My dynamic IP address, which is provided by my ISP, seems to be blocked by
&lt;a class="reference external" href="https://freenode.net"&gt;Freenode&lt;/a&gt; (because it is easy for us to get another IP.)  According to the error
message, I should connect and login with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer"&gt;SASL&lt;/a&gt;.  It took me a while to figure
out a solution, thus I believe that it worths writing my attempts in a blog
post.&lt;/p&gt;
&lt;p&gt;This post will cover two topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to enable SASL support in &lt;a class="reference external" href="https://irssi.org/"&gt;Irssi&lt;/a&gt; 0.8.17?&lt;/li&gt;
&lt;li&gt;How to exchange public keys manually?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="add-sasl-support-to-irssi"&gt;
&lt;h2&gt;Add SASL Support to Irssi&lt;/h2&gt;
&lt;p&gt;As of writing, &lt;a class="reference external" href="https://irssi.org/"&gt;Irssi&lt;/a&gt; 0.8.17 is the version which we can installed with
&lt;code&gt;apt&lt;/code&gt; on &lt;em&gt;Ubuntu 15.10&lt;/em&gt;.  But, unfortunately, it does not include SASL
support.  Although the latest &lt;a class="reference external" href="https://irssi.org/"&gt;Irssi&lt;/a&gt; 0.8.18 adds the SASL support, it will take
some time to propagate through different Linux distributions.  Thus, we have to
manually install SASL plug-in to our &lt;a class="reference external" href="https://irssi.org/"&gt;Irssi&lt;/a&gt; 0.8.17 installation.&lt;/p&gt;
&lt;p&gt;Yet another concern is that SASL plug-in requires &lt;code&gt;Crypt::PK::ECC&lt;/code&gt; module
from CPAN.  However, there is no prebuilt Debian packages for this Perl module.
We have to build it by ourselves.&lt;/p&gt;
&lt;p&gt;In summary, there are three steps to do:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Configure &lt;code&gt;CPAN&lt;/code&gt;, the Perl module repository and installation
manager.&lt;/li&gt;
&lt;li&gt;Build and install &lt;code&gt;Crypt::PK::ECC&lt;/code&gt; Perl module.&lt;/li&gt;
&lt;li&gt;Install SASL plug-in.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's start!&lt;/p&gt;
&lt;div class="section" id="configure-cpan"&gt;
&lt;h3&gt;Configure CPAN&lt;/h3&gt;
&lt;p&gt;If you are a Linux end-user, it is unlikely for you to install a Perl module
via &lt;code&gt;cpan&lt;/code&gt;.  As a result, &lt;code&gt;~/.cpan&lt;/code&gt; doesn't exist and you have to
configure &lt;code&gt;cpan&lt;/code&gt; first.&lt;/p&gt;
&lt;p&gt;To configure &lt;code&gt;cpan&lt;/code&gt;, simply run &lt;code&gt;cpan -v&lt;/code&gt;, and answer several
questions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cpan -v
Sorry, we have to rerun the configuration dialog for CPAN.pm due to
some missing parameters. Configuration will be written to
 &amp;lt;&amp;lt;/home/logan/.cpan/CPAN/MyConfig.pm&amp;gt;&amp;gt;

CPAN.pm requires configuration, but most of it can be done automatically.
If you answer &amp;#39;no&amp;#39; below, you will enter an interactive dialog for each
configuration option instead.

Would you like to configure as much as possible automatically? [yes]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, you will be asked whether to create the configuration file with default
options or not.  We can choose &lt;strong&gt;yes&lt;/strong&gt; and press enter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;install_help&amp;gt;

Warning: You do not have write permission for Perl library directories.

To install modules, you need to configure a local Perl library directory or
escalate your privileges.  CPAN can help you by bootstrapping the local::lib
module or by configuring itself to use &amp;#39;sudo&amp;#39; (if available).  You may also
resolve this problem manually if you need to customize your setup.

What approach do you want?  (Choose &amp;#39;local::lib&amp;#39;, &amp;#39;sudo&amp;#39; or &amp;#39;manual&amp;#39;)
 [local::lib] manual
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, you will be asked about the installation destination.  Choose
&lt;strong&gt;manual&lt;/strong&gt; so that we can resolve the problem by ourselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-a-debian-package-of-a-perl-module"&gt;
&lt;h3&gt;Build a Debian Package of a Perl Module&lt;/h3&gt;
&lt;p&gt;Although we can install Perl packages with &lt;code&gt;cpan&lt;/code&gt;, packing it as a Debian
package makes it easier to uninstall them in the future.  Fortunately, it is
easy to pack one with &lt;code&gt;dh-make-perl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, we have to install &lt;code&gt;dh-make-perl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install dh-make-perl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, we can create a Debian package with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dh-make-perl --build --cpan Crypt::PK::ECC
&lt;span class="o"&gt;==&lt;/span&gt; dh-make-perl &lt;span class="m"&gt;0&lt;/span&gt;.87 &lt;span class="o"&gt;==&lt;/span&gt;
&lt;span class="c1"&gt;# ... output skipped ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, we can install the Debian package with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo dpkg -i libcryptx-perl_*.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;OPTIONAL&lt;/em&gt;: You can remove &lt;code&gt;~/.cpan&lt;/code&gt; directory and &lt;code&gt;dh-make-perl&lt;/code&gt;
package now (if you wish.)  We don't need them anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-sasl-plug-in"&gt;
&lt;h3&gt;Install SASL Plug-in&lt;/h3&gt;
&lt;p&gt;Finally, we can install SASL plug-in for Irssi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a scripts directory&lt;/span&gt;
$ mkdir -p ~/.irssi/scripts/autorun

&lt;span class="c1"&gt;# Download the SASL plug-in for Irssi&lt;/span&gt;
$ wget -O ~/.irssi/scripts/cal_sasl.pl &lt;span class="se"&gt;\&lt;/span&gt;
    https://raw.githubusercontent.com/atheme/atheme/master/contrib/cap_sasl.pl

&lt;span class="c1"&gt;# Create a soft link so that it will be loaded automatically&lt;/span&gt;
$ ln -s ../cal_sasl.pl ~/.irssi/scripts/autorun
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-sasl-for-freenode"&gt;
&lt;h2&gt;Setup SASL for Freenode&lt;/h2&gt;
&lt;p&gt;If you can connect to &lt;a class="reference external" href="https://freenode.net"&gt;Freenode&lt;/a&gt;, you can enable SASL simply by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/sasl keygen
/sasl save
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, unfortunately, if you can't connect to Freenode without SASL, then you
have to set up the settings by yourself.&lt;/p&gt;
&lt;p&gt;First, generate a pair of public and private keys with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/sasl keygen [NETWORK-NAME]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: Please replace &lt;code&gt;[NETWORK-NAME]&lt;/code&gt; with the network name you would
like to use.  In my example, it is &lt;code&gt;freenode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A message will be printed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;15:29 -!- Irssi: /sasl set freenode &amp;lt;nick&amp;gt; sasl-ecdsa-freenode.key
          ECDSA-NIST256P-CHALLENGE
15:29 -!- Irssi: SASL: submit your pubkey to freenode:
15:29 -!- Irssi: /msg NickServ SET PUBKEY
          Anp3i5dEPsFsV9zI00b5YN/c8/JNEwwlo7TLdsMdaL7O
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From this message, we know that:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The private key is available at &lt;code&gt;$HOME/.irssi/sasl-ecdsa-freenode.key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The public key is &lt;code&gt;Anp3i5dEPsFsV9zI00b5YN/c8/JNEwwlo7TLdsMdaL7O&lt;/code&gt;.
You will need the public key in the upcoming step.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Second, ask &lt;a class="reference external" href="https://irssi.org/"&gt;Irssi&lt;/a&gt; to loaded the private key with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/sasl set [NETWORK-NAME] [NICK] [PRIVATE-KEY-PATH] ECDSA-NIST256P-CHALLENGE
/sasl save
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: Please replace &lt;code&gt;[NETWORK-NAME]&lt;/code&gt; with the network name,
&lt;code&gt;[NICK]&lt;/code&gt; with your nick name on the network, and
&lt;code&gt;[PRIVATE-KEY-PATH]&lt;/code&gt; with your private key file path printed above.&lt;/p&gt;
&lt;p&gt;Third, log in &lt;a class="reference external" href="https://freenode.net"&gt;Freenode&lt;/a&gt; via &lt;a class="reference external" href="https://webchat.freenode.net/"&gt;Freenode Web IRC&lt;/a&gt;.  Authenticate for the nick
name with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/msg NickServ identify [PASSWORD]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, set the public key with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/msg NickServ SET PUBKEY [KEY]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Logout from the &lt;a class="reference external" href="https://webchat.freenode.net/"&gt;Freenode Web IRC&lt;/a&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/quit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, you should be able to connect to &lt;a class="reference external" href="https://freenode.net"&gt;Freenode&lt;/a&gt; with &lt;a class="reference external" href="https://irssi.org/"&gt;Irssi&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ irssi
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="remarks"&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;Although this might be off-topic, I am connecting to &lt;a class="reference external" href="https://freenode.net"&gt;Freenode&lt;/a&gt; with
&lt;strong&gt;SSL encryption&lt;/strong&gt; as well.  If you do care about your privacy and/or data
integrity, it will be a good idea to enable SSL encryption.  This is my
&lt;a class="reference external" href="https://irssi.org/"&gt;Irssi&lt;/a&gt; server configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  address = &amp;quot;irc.freenode.net&amp;quot;;
  chatnet = &amp;quot;freenode&amp;quot;;
  port = &amp;quot;6697&amp;quot;;
  password = &amp;quot;[PASSWORD]&amp;quot;;
  use_ssl = &amp;quot;yes&amp;quot;;
  ssl_verify = &amp;quot;yes&amp;quot;;
},
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wdtz.org/freenode-sasl-upgrade-irssi-howto.html"&gt;Freenode SASL Upgrade: Irssi HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.debian.org/PerlFAQ"&gt;Debian Perl FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="irc"></category><category term="irssi"></category></entry><entry><title>Python Property Decorator</title><link href="http://logan.tw/posts/2016/03/12/python-property-decorator/" rel="alternate"></link><published>2016-03-12T20:09:00+08:00</published><updated>2016-03-12T20:09:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-03-12:/posts/2016/03/12/python-property-decorator/</id><summary type="html">&lt;p&gt;Recently, I was tracing the source code of &lt;a class="reference external" href="http://pypy.org"&gt;PyPy&lt;/a&gt;, and a special decorator named
&lt;code&gt;&amp;#64;property&lt;/code&gt; caught my attention.  It seems to be a mechanism for &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt;
programmers to create a getter, a setter, and a deleter for an instance variable.
For example, how could we intercept the access to &lt;code&gt;a …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I was tracing the source code of &lt;a class="reference external" href="http://pypy.org"&gt;PyPy&lt;/a&gt;, and a special decorator named
&lt;code&gt;&amp;#64;property&lt;/code&gt; caught my attention.  It seems to be a mechanism for &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt;
programmers to create a getter, a setter, and a deleter for an instance variable.
For example, how could we intercept the access to &lt;code&gt;a.f&lt;/code&gt; in the following
code snippet?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the instructions:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define a &lt;code&gt;Temperature&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;Decorate the &lt;strong&gt;getter&lt;/strong&gt; function &lt;code&gt;f()&lt;/code&gt; (the first one) with the
&lt;code&gt;&amp;#64;property&lt;/code&gt; decorator.&lt;/li&gt;
&lt;li&gt;If you would like to intercept the setter, decorate the &lt;strong&gt;setter&lt;/strong&gt;
function &lt;code&gt;f()&lt;/code&gt; (the second one) with the &lt;code&gt;&amp;#64;f.setter&lt;/code&gt; decorator.&lt;/li&gt;
&lt;li&gt;If you would like to intercept the deleter, decorate the &lt;strong&gt;deleter&lt;/strong&gt;
function &lt;code&gt;f()&lt;/code&gt; (the third one) with the &lt;code&gt;&amp;#64;f.deleter&lt;/code&gt; decorator.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is the code snippet for our &lt;code&gt;Temperature&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Gets:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;

    &lt;span class="nd"&gt;@f.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sets:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F / Prev:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

    &lt;span class="nd"&gt;@f.deleter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Dels:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can test the &lt;code&gt;Temperature&lt;/code&gt; class with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Gets: 5 C
41.0 F
Sets: 122 F / Prev: 5 C
Gets: 50.0 C
122.0 F
Dels: 50.0 C
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="enhancement"&gt;
&lt;h2&gt;Enhancement&lt;/h2&gt;
&lt;p&gt;Notice that three &lt;code&gt;property&lt;/code&gt; objects will be created by the decorators.
We can avoid two of them by initializing the &lt;code&gt;property&lt;/code&gt; object at once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Gets:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sets:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F / Prev:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_del_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Dels:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_get_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_set_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_del_f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This version is functionally-equivalent to the one shown above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="remarks"&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;The decorator syntax in the &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; programming language is a syntax sugar.
Thus, the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@decorator&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, a decorator function is a function that takes a function and
returns a decorated function.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;#64;property&lt;/code&gt; decorator, which we are talking about in this post, is in
fact a built-in class which takes 0-4 actual arguments.  Furthermore,
every instance of &lt;code&gt;property&lt;/code&gt; class contains 3 instance methods:
&lt;code&gt;getter&lt;/code&gt;, &lt;code&gt;setter&lt;/code&gt;, and &lt;code&gt;deleter&lt;/code&gt; which will return new
&lt;code&gt;property&lt;/code&gt; instances with the updated accessors.  You can find a
&lt;a class="reference external" href="https://docs.python.org/3/howto/descriptor.html#properties"&gt;pure Python implementation&lt;/a&gt; from the &lt;a class="reference external" href="https://docs.python.org/3/howto/descriptor.html"&gt;Descriptor HowTo Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/howto/descriptor.html"&gt;Descriptor HowTo Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="python"></category></entry><entry><title>Experience with Atom Editor</title><link href="http://logan.tw/posts/2016/03/05/experience-with-atom-editor/" rel="alternate"></link><published>2016-03-05T11:02:00+08:00</published><updated>2016-03-05T11:02:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-03-05:/posts/2016/03/05/experience-with-atom-editor/</id><summary type="html">&lt;p&gt;I have been a &lt;a class="reference external" href="http://vim.org"&gt;Vim&lt;/a&gt; user for a long time.  However, I found that Vim is not good
enough for me to write blog with Pelican.  I need a good &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt;
previewer, but I am not very satisfied with &lt;a class="reference external" href="https://github.com/Rykka/InstantRst"&gt;InstantRst&lt;/a&gt;.  I wish to have a
two-panel editor that I can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been a &lt;a class="reference external" href="http://vim.org"&gt;Vim&lt;/a&gt; user for a long time.  However, I found that Vim is not good
enough for me to write blog with Pelican.  I need a good &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt;
previewer, but I am not very satisfied with &lt;a class="reference external" href="https://github.com/Rykka/InstantRst"&gt;InstantRst&lt;/a&gt;.  I wish to have a
two-panel editor that I can edit the document and see the preview side-by-side.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://atom.io"&gt;Atom&lt;/a&gt;, an open-source editor developed by GitHub, comes into my mind.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://atom.io/download/deb -O atom.deb
$ sudo dpkg -i atom.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-packages"&gt;
&lt;h2&gt;Install Packages&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apm install advanced-open-file git-plus highlight-selected &lt;span class="se"&gt;\&lt;/span&gt;
              language-restructuredtext rst-preview-pandoc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Package descriptions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;advanced-open-file&lt;/code&gt; makes it easy to open or create files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git-plus&lt;/code&gt; allows us to commit changes to Git repositories.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight-selected&lt;/code&gt; will highlight the double-clicked words.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;language-restructuredtext&lt;/code&gt; enables the syntax highlight for
reStructuredText.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rst-preview-pandoc&lt;/code&gt; provides preview panels for reStructuredText.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="keyboard-shortcuts"&gt;
&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Open Files&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-T&lt;/code&gt; to open files with fuzzy finder.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-Alt-O&lt;/code&gt; to open the &lt;strong&gt;advanced open file&lt;/strong&gt; dialog.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-F3&lt;/code&gt; to highlight the occurrence of word under the cursor.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-F&lt;/code&gt; to search in the current buffer.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-Shift-F&lt;/code&gt; to search in the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-Alt-Q&lt;/code&gt; to re-flow or wrap the selected text.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-[&lt;/code&gt; to indent selected lines.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-]&lt;/code&gt; to outdent selected lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git Commands&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Shift-Ctrl-A&lt;/code&gt; (and &lt;code&gt;Right&lt;/code&gt;) to add current file
(staging.)&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Shift-Ctrl-X&lt;/code&gt; to commit staged changes.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Shift-Ctrl-H&lt;/code&gt; to show all commands supported by &lt;strong&gt;Git-Plus&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reStructuredText&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-Shift-E&lt;/code&gt; to open the preview panel for reStructuredText.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="atom"></category></entry><entry><title>Colon Built-in in Bash</title><link href="http://logan.tw/posts/2016/02/27/colon-built-in-in-bash/" rel="alternate"></link><published>2016-02-27T15:17:00+08:00</published><updated>2016-02-27T15:17:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-02-27:/posts/2016/02/27/colon-built-in-in-bash/</id><summary type="html">&lt;p&gt;I came across a weird line in a shell script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;:=word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is so weird that I don't even know how to search for further information.
Fortunately, I found a &lt;a class="reference external" href="http://stackoverflow.com/questions/3224878/"&gt;post&lt;/a&gt; after searching &lt;strong&gt;bash colon&lt;/strong&gt;.  It is a
built-in utility which simply exits with 0.  In the other words …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I came across a weird line in a shell script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;:=word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is so weird that I don't even know how to search for further information.
Fortunately, I found a &lt;a class="reference external" href="http://stackoverflow.com/questions/3224878/"&gt;post&lt;/a&gt; after searching &lt;strong&gt;bash colon&lt;/strong&gt;.  It is a
built-in utility which simply exits with 0.  In the other words, it is &lt;em&gt;almost&lt;/em&gt;
equivalent to the &lt;code&gt;true&lt;/code&gt; command.  For example, we can write a spin loop
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; :&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    date -R
    sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is &lt;em&gt;almost&lt;/em&gt; equivalent to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    date -R
    sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we know that the weird line is &lt;em&gt;almost&lt;/em&gt; equivalent to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;:=word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, what does this mean?  Isn't this a no-op?&lt;/p&gt;
&lt;p&gt;To answer the question, we have to take a look on the &lt;strong&gt;parameter expansion&lt;/strong&gt;.
In this line, there is a parameter expansion &lt;code&gt;${parameter:=word}&lt;/code&gt;.  It is
slightly different from the normal parameter expansion &lt;code&gt;${parameter}&lt;/code&gt;.
It comes with an extra modifier &lt;code&gt;:=&lt;/code&gt;.  The extra modifier means that
shell script interpreters should assign &lt;code&gt;word&lt;/code&gt; to &lt;code&gt;parameter&lt;/code&gt; if
&lt;code&gt;parameter&lt;/code&gt; was unset or null.  In summary, the line at the beginning of
this post is equivalent to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;parameter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;parameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;word&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="more-on-colon-built-in"&gt;
&lt;h2&gt;More on Colon Built-in&lt;/h2&gt;
&lt;p&gt;Previously, we mentioned that the colon built-in is &lt;em&gt;almost&lt;/em&gt; equivalent to the
&lt;code&gt;true&lt;/code&gt; command.  But, what are differences between them?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It will be slightly faster because shell script interpreters don't have to
spawn a new process for the built-in utility.&lt;/li&gt;
&lt;li&gt;It can't be a command for &lt;code&gt;exec&lt;/code&gt; built-in.  In other words,
&lt;code&gt;exec :&lt;/code&gt; will fail, but &lt;code&gt;exec true&lt;/code&gt; will succeed.&lt;/li&gt;
&lt;li&gt;There is a subtle difference when environment variables are passed to the
colon built-in utility.  However, this is not portable between different
shell script interpreters.  Check &lt;a class="reference external" href="http://stackoverflow.com/questions/3224878/"&gt;this post&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;IMO, it will be better to use colon built-in whenever possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-on-parameter-expansion"&gt;
&lt;h2&gt;More on Parameter Expansion&lt;/h2&gt;
&lt;p&gt;In addition to the &lt;code&gt;:=&lt;/code&gt; parameter expansion modifier we have mentioned
earlier, there are four modifiers that we can choose: &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;,
&lt;code&gt;?&lt;/code&gt;, and &lt;code&gt;+&lt;/code&gt;.  Their meanings are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;: Use the word as the default value if the parameter is not set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;: Use the word and assign the parameter if the parameter is not set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;: Print error and exit if the parameter is not set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;: Use the word if the parameter is set.  This is the opposite of
&lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make it clear, this is a table of the behaviors:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="32%" /&gt;
&lt;col width="36%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Modifier&lt;/th&gt;
&lt;th class="head"&gt;Parameter Set&lt;/th&gt;
&lt;th class="head"&gt;Parameter Unset&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;${parameter-word}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Substitute &lt;em&gt;parameter&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Substitute &lt;em&gt;word&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;${parameter=word}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Substitute &lt;em&gt;parameter&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Assign &lt;em&gt;word&lt;/em&gt; to
&lt;em&gt;parameter&lt;/em&gt; and substitute
&lt;em&gt;word&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;${parameter?msg}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Substitute &lt;em&gt;parameter&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Print error and exit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;${parameter+word}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Substitute &lt;em&gt;word&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Substitute &lt;em&gt;parameter&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Besides, the &lt;code&gt;:&lt;/code&gt; (colon) qualifier brings another dimension to these
qualifiers.  We can add the colon before the aforementioned modifiers.  The
result will be slightly different when the parameter is set to null (empty
string.)&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="39%" /&gt;
&lt;col width="46%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;w/o colon&lt;/td&gt;
&lt;td&gt;Treat as parameter set&lt;/td&gt;
&lt;td&gt;Treat as parameter set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;w/ colon&lt;/td&gt;
&lt;td&gt;Treat as parameter set&lt;/td&gt;
&lt;td&gt;Treat as parameter &lt;strong&gt;unset&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;unset&lt;/span&gt; x
&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x:\t&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;-word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;y:\t&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;-word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;z:\t&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;z&lt;/span&gt;&lt;span class="p"&gt;-word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;z&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shell script will print:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x:      &amp;#39;word&amp;#39;  &amp;#39;word&amp;#39;
y:      &amp;#39;&amp;#39;      &amp;#39;word&amp;#39;
z:      &amp;#39;123&amp;#39;   &amp;#39;123&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although we have gone through many parameter expansion modifiers, IMO,
&lt;code&gt;${parameter:-word}&lt;/code&gt; and &lt;code&gt;${parameter:=word}&lt;/code&gt; are usually what
you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stack Overflow, &lt;a class="reference external" href="http://stackoverflow.com/questions/3224878/"&gt;What is the purpose of the : (colon) GNU Bash builtin?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TLDP, &lt;a class="reference external" href="http://www.tldp.org/LDP/abs/html/index.html"&gt;Advanced Bash-Scripting Guide&lt;/a&gt;, &lt;a class="reference external" href="http://www.tldp.org/LDP/abs/html/parameter-substitution.html"&gt;10.2 Parameter Substitution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;POSIX, The Open Group Base Specifications Issue 7, Shell &amp;amp; Utilities,
&lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html"&gt;Shell Command Language&lt;/a&gt;, &lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02"&gt;2.6.2 Parameter Expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;POSIX, The Open Group Base Specifications Issue 7, Shell &amp;amp; Utilities,
&lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html"&gt;Shell Command Language&lt;/a&gt;, &lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#colon"&gt;14 Special Builtin Utilities: Colon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="bash"></category><category term="shell"></category></entry><entry><title>Open and Close Files in Bash</title><link href="http://logan.tw/posts/2016/02/20/open-and-close-files-in-bash/" rel="alternate"></link><published>2016-02-20T16:05:00+08:00</published><updated>2016-02-20T16:05:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-02-20:/posts/2016/02/20/open-and-close-files-in-bash/</id><summary type="html">&lt;p&gt;In a shell script, file descriptor 0 stands for &lt;em&gt;stdin&lt;/em&gt;, file descriptor 1
stands for &lt;em&gt;stdout&lt;/em&gt;, and file descriptor 2 stands for &lt;em&gt;stderr&lt;/em&gt;.  In addition,
programmers can &lt;strong&gt;open&lt;/strong&gt;, &lt;strong&gt;close&lt;/strong&gt;, or &lt;strong&gt;duplicate&lt;/strong&gt; file descriptors with the
&lt;code&gt;exec&lt;/code&gt; built-in command and the I/O redirection operator:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="39%" /&gt;
&lt;col width="61%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Syntax&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;exec $fd&amp;lt; &amp;quot;${filepath}&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;In a shell script, file descriptor 0 stands for &lt;em&gt;stdin&lt;/em&gt;, file descriptor 1
stands for &lt;em&gt;stdout&lt;/em&gt;, and file descriptor 2 stands for &lt;em&gt;stderr&lt;/em&gt;.  In addition,
programmers can &lt;strong&gt;open&lt;/strong&gt;, &lt;strong&gt;close&lt;/strong&gt;, or &lt;strong&gt;duplicate&lt;/strong&gt; file descriptors with the
&lt;code&gt;exec&lt;/code&gt; built-in command and the I/O redirection operator:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="39%" /&gt;
&lt;col width="61%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Syntax&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;exec $fd&amp;lt; &amp;quot;${filepath}&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open an &lt;em&gt;input&lt;/em&gt; file at the given file
descriptor &lt;code&gt;$fd&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;exec $fd&amp;lt;&amp;amp;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Close the &lt;em&gt;input&lt;/em&gt; file descriptor &lt;code&gt;$fd&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;exec $fd&amp;gt; &amp;quot;${filepath}&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open an &lt;em&gt;output&lt;/em&gt; file at the given file
descriptor &lt;code&gt;$fd&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;exec $fd&amp;gt;&amp;amp;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Close the &lt;em&gt;output&lt;/em&gt; file descriptor &lt;code&gt;$fd&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;exec $dst&amp;gt;&amp;amp;src&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duplicate the file descriptor from &lt;code&gt;$src&lt;/code&gt;
to &lt;code&gt;$dst&lt;/code&gt;.  Both &lt;code&gt;$dst&lt;/code&gt; and
&lt;code&gt;$src&lt;/code&gt; will refer to the file which was
referred by &lt;code&gt;$src&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="example-1-write-some-message-to-another-output-file"&gt;
&lt;h2&gt;Example 1: Write some message to another output file&lt;/h2&gt;
&lt;p&gt;First, open &lt;code&gt;output_file.txt&lt;/code&gt; at file descriptor 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&amp;gt; output_file.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, redirect &lt;em&gt;the stdout of the command&lt;/em&gt; with &lt;code&gt;1&amp;gt;&amp;amp;3&lt;/code&gt; to print some
messages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;some messages&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, close file descriptor 3 with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;-
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="example-2-redirect-stdout-stderr-temporarily"&gt;
&lt;h2&gt;Example 2: Redirect stdout/stderr temporarily&lt;/h2&gt;
&lt;p&gt;Under some circumstances, one would like to redirect the &lt;em&gt;stdout&lt;/em&gt; or &lt;em&gt;stderr&lt;/em&gt; of
the subsequent commands.  The file descriptor duplication command will be handy
in this case.&lt;/p&gt;
&lt;p&gt;First, backup &lt;em&gt;stdout&lt;/em&gt; and &lt;em&gt;stderr&lt;/em&gt; with file descriptor duplication command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Duplicate stdout to file descriptor 3&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# Duplicate stderr to file descriptor 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, open files for redirection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt; stdout.log
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; stderr.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, run the commands as usual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;some output to stdout&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;some output to stderr&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fourth, restore the file descriptors if the shell script still needs them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# Duplicate file descriptor 3 to stdout&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="c1"&gt;# Duplicate file descriptor 4 to stderr&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;-  &lt;span class="c1"&gt;# Close file descriptor 3 (free the resources)&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;-  &lt;span class="c1"&gt;# Close file descriptor 4 (free the resources)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this step, first two lines copy the stashed file descriptors back to stdout
and stderr.  Last two lines close the file descriptors.&lt;/p&gt;
&lt;p&gt;Note: Closing a file descriptor does not necessary close a file.  If two file
descriptors refer to the same file, then the file will not be closed until both
file descriptors are closed.  In the fourth step, it is important to close file
descriptor 3 and 4 to avoid resource leaks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-3-read-lines-from-a-file"&gt;
&lt;h2&gt;Example 3: Read lines from a file&lt;/h2&gt;
&lt;p&gt;First, open an input file with &lt;code&gt;exec&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&amp;lt; input_file.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, read the file with I/O redirection &lt;code&gt;0&amp;lt;&amp;amp;3&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&amp;lt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GOT: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, close the file with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&amp;lt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;-
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;TLDP, &lt;a class="reference external" href="http://www.tldp.org/LDP/abs/html/index.html"&gt;Advanced Bash-Scripting Guide&lt;/a&gt;, &lt;a class="reference external" href="http://www.tldp.org/LDP/abs/html/io-redirection.html"&gt;Chapter 20. I/O Redirection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Open Group Base Specifications Issue 7, &lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html"&gt;Shell Command Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="bash"></category><category term="shell"></category></entry><entry><title>JavaScript Object.defineProperty()</title><link href="http://logan.tw/posts/2016/01/30/javascript-objectdefineproperty/" rel="alternate"></link><published>2016-01-30T21:01:00+08:00</published><updated>2016-01-30T21:01:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-01-30:/posts/2016/01/30/javascript-objectdefineproperty/</id><summary type="html">&lt;p&gt;In Javascript, we can add a property to an object with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, sometimes we would like to have fine-grained control over properties.
With &lt;code&gt;Object.defineProperty()&lt;/code&gt;, we can decide:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="62%" /&gt;
&lt;col width="22%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Descriptor&lt;/th&gt;
&lt;th class="head"&gt;Purpose&lt;/th&gt;
&lt;th class="head"&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;Property value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;writable&lt;/td&gt;
&lt;td&gt;Whether the property can be assigned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;Getter of the …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;In Javascript, we can add a property to an object with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, sometimes we would like to have fine-grained control over properties.
With &lt;code&gt;Object.defineProperty()&lt;/code&gt;, we can decide:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="62%" /&gt;
&lt;col width="22%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Descriptor&lt;/th&gt;
&lt;th class="head"&gt;Purpose&lt;/th&gt;
&lt;th class="head"&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;Property value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;writable&lt;/td&gt;
&lt;td&gt;Whether the property can be assigned&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;Getter of the property&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;Setter of the property&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;enumerable&lt;/td&gt;
&lt;td&gt;Whether the property is visible to for-each loop&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;configurable&lt;/td&gt;
&lt;td&gt;Whether the property can be redefined&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Object.defineProperty(obj, name, desc)&lt;/code&gt; expects three arguments:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &lt;code&gt;obj&lt;/code&gt; argument is the object to which we would like to add a new
property.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;name&lt;/code&gt; argument is the name of the new property.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;desc&lt;/code&gt; argument is the descriptor object of the new property.
If &lt;code&gt;enumerable&lt;/code&gt;, &lt;code&gt;configurable&lt;/code&gt;, or &lt;code&gt;writable&lt;/code&gt; are not
defined in the descriptor object, then the default value &lt;code&gt;false&lt;/code&gt; will
be assumed.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="value-and-writable"&gt;
&lt;h2&gt;Value and Writable&lt;/h2&gt;
&lt;p&gt;The simplest usage is to define a property with a &lt;code&gt;value&lt;/code&gt;.  By default,
it will become a read-only property.  Every assignment to the property will be
silently ignored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Get the value.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints 32.&lt;/span&gt;

&lt;span class="c1"&gt;// Set the value.&lt;/span&gt;
&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Ignored silently.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Continue to print 32.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the &lt;strong&gt;strict mode&lt;/strong&gt;, assigning to a non-writable property will raise a
&lt;code&gt;TypeError&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// CHANGED&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Set the value.&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Raise a TypeError exception.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CAUGHT EXPECTED EXCEPTION.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To define a property that can be assigned, we have to set &lt;code&gt;writable&lt;/code&gt; to
&lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;  &lt;span class="c1"&gt;// CHANGED&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints 41&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From some perspective, the code snippet above is similar to the following simple
assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Similar&lt;/span&gt;

&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints 41&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The difference between two code snippets is the enumerability of the defined
property.  Read &lt;a class="reference internal" href="#enumerable"&gt;Enumerable&lt;/a&gt; section for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="get-and-set"&gt;
&lt;h2&gt;Get and Set&lt;/h2&gt;
&lt;p&gt;Imagine a senario: we would like to create an object to represent a
temperature in both celsius and fahrenheit.  Besides, we would like to maintain
the correspondence between them.  What can we do?  Getters and setters are the
answers.&lt;/p&gt;
&lt;p&gt;We can define a &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; function with
&lt;code&gt;Object.defineProperty()&lt;/code&gt;.  The &lt;code&gt;get&lt;/code&gt; function can read values from
other properties or compute the result on-the-fly.  Similarly, the &lt;code&gt;set&lt;/code&gt;
function can write values to other properties.   For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints: &amp;quot;32 F&amp;quot;&lt;/span&gt;

&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints &amp;quot;122 F&amp;quot;&lt;/span&gt;

&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints &amp;quot;77 F&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints &amp;quot;25 C&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similar to &lt;code&gt;writable: false&lt;/code&gt;, if the &lt;code&gt;set&lt;/code&gt; descriptor is not
specified, then the assignment operations to the property will be ignored
silently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Silently ignored.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints &amp;quot;32 F&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints &amp;quot;0 C&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the &lt;strong&gt;strict mode&lt;/strong&gt;, a &lt;code&gt;TypeError&lt;/code&gt; will be raised instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// CHANGED&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CAUGHT EXPECTED EXCEPTION.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;&lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; can not be mixed with &lt;code&gt;value&lt;/code&gt; and
&lt;code&gt;writable&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="enumerable"&gt;
&lt;h2&gt;Enumerable&lt;/h2&gt;
&lt;p&gt;By default, when &lt;code&gt;Object.defineProperty()&lt;/code&gt; defines a new property, the
newly defined property won't be enumerable, i.e. the newly defined property
won't be enumerated in the for-each loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Enumerate the keys.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This loop won&amp;#39;t print anything because the `fahrenheit` property is&lt;/span&gt;
    &lt;span class="c1"&gt;// NOT enumerable.&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Found: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we wish to enumerate the newly defined property, then we can set
&lt;code&gt;enumerable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;enumerable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// CHANGED&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Enumerate the keys.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Found: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints: &amp;quot;Found: fahrenheit&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configurable"&gt;
&lt;h2&gt;Configurable&lt;/h2&gt;
&lt;p&gt;By default, the property defined by &lt;code&gt;Object.defineProperty()&lt;/code&gt; can not be
redefined or reconfigured.  A &lt;code&gt;TypeError&lt;/code&gt; will be raised if you try to do
so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Redefine the property.&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CAUGHT EXPECTED EXCEPTION.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you really wish to redefine the property afterwards, then you should
set &lt;code&gt;configurable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;configurable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// CHANGED&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints: 32&lt;/span&gt;

&lt;span class="c1"&gt;// Redefine the property.&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fahrenheit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Prints: 50&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we have learned several usages of &lt;code&gt;Object.defineProperty()&lt;/code&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One can define a property with &lt;code&gt;value&lt;/code&gt; and control its immutability with
&lt;code&gt;writable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;One can define a property with getter and setter functions.  The getter and
setter functions are specified by &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; descriptors
respectively.&lt;/li&gt;
&lt;li&gt;To enumerate a property in a for-each loop, specify &lt;code&gt;enumerable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To allow the reconfiguration of a property, specify &lt;code&gt;configurable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you enjoy this post.  Feel free to let me know if you have any comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;MDN, JavaScript Reference, &lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"&gt;Object.defineProperty()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="javascript"></category></entry><entry><title>NPM Package Manager</title><link href="http://logan.tw/posts/2016/01/24/npm-package-manager/" rel="alternate"></link><published>2016-01-24T20:04:00+08:00</published><updated>2016-01-24T20:04:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-01-24:/posts/2016/01/24/npm-package-manager/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://npmjs.org/"&gt;NPM&lt;/a&gt; package manager plays an important role in &lt;a class="reference external" href="https://nodejs.org"&gt;Node.js&lt;/a&gt; ecosystem.  Every
serious Javascript developers should learn how to create a package with
&lt;code&gt;npm&lt;/code&gt;.  In this post, I am going to cover several important &lt;code&gt;npm&lt;/code&gt;
commands.&lt;/p&gt;
&lt;div class="section" id="initialize-a-npm-package"&gt;
&lt;h2&gt;Initialize a NPM Package&lt;/h2&gt;
&lt;p&gt;To start a project, we have to create &lt;code&gt;package.json …&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://npmjs.org/"&gt;NPM&lt;/a&gt; package manager plays an important role in &lt;a class="reference external" href="https://nodejs.org"&gt;Node.js&lt;/a&gt; ecosystem.  Every
serious Javascript developers should learn how to create a package with
&lt;code&gt;npm&lt;/code&gt;.  In this post, I am going to cover several important &lt;code&gt;npm&lt;/code&gt;
commands.&lt;/p&gt;
&lt;div class="section" id="initialize-a-npm-package"&gt;
&lt;h2&gt;Initialize a NPM Package&lt;/h2&gt;
&lt;p&gt;To start a project, we have to create &lt;code&gt;package.json&lt;/code&gt; to describe the
package and its dependencies.  We can do so by running &lt;code&gt;npm init&lt;/code&gt;.  Here
are the instructions:&lt;/p&gt;
&lt;p&gt;First, create a directory to hold the package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir hello_express
$ &lt;span class="nb"&gt;cd&lt;/span&gt; hello_express
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, run &lt;code&gt;npm init&lt;/code&gt; to create &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm init
name: &lt;span class="o"&gt;(&lt;/span&gt;hello_express&lt;span class="o"&gt;)&lt;/span&gt;
version: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.0&lt;span class="o"&gt;)&lt;/span&gt;
description: Express.js example project
entry point: &lt;span class="o"&gt;(&lt;/span&gt;app.js&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt; command:
git repository:
keywords:
author: John Smith &amp;lt;john.smith@example.com&amp;gt;
license: &lt;span class="o"&gt;(&lt;/span&gt;ISC&lt;span class="o"&gt;)&lt;/span&gt; MIT
About to write to /path/to/your/project/hello/package.json:
&lt;span class="c1"&gt;# ... output skipped ...&lt;/span&gt;
Is this ok? &lt;span class="o"&gt;(&lt;/span&gt;yes&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will ask several questions.  After filling the answers, it will
create &lt;code&gt;package.json&lt;/code&gt; with the package information.&lt;/p&gt;
&lt;p&gt;Now, we can continue to add dependencies with &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-dependencies"&gt;
&lt;h2&gt;Add Dependencies&lt;/h2&gt;
&lt;p&gt;Before adding dependencies to the package, we have to know the classification
of the dependencies.  NPM classifies the dependencies in three categories:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Production&lt;/strong&gt; -- Production dependencies should be installed in the
&lt;em&gt;production environment&lt;/em&gt;.  These are essential to a package.  A package
won't work without these dependencies.  For example, most web application
will list &lt;code&gt;express&lt;/code&gt; as a production dependency, which should be
installed on the web server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optional&lt;/strong&gt; -- Like production dependencies, optional dependencies will be
installed in the &lt;em&gt;production environment&lt;/em&gt;.  However, a package should be able
to work without optional dependencies or at least degrade gracefully.  For
example, &lt;code&gt;chokidar&lt;/code&gt;, a popular file monitoring package, is listing
&lt;code&gt;fsevent&lt;/code&gt; as an optional dependency, which provides better support on
Mac OS X.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development&lt;/strong&gt; -- Development dependencies are for developers only.  This
includes tools to compile assets, run unit tests, etc.  For example,
&lt;code&gt;nodemon&lt;/code&gt; is a file monitor daemon which will automatically reload
Express applications when source files are modified.  It is clear that
&lt;code&gt;nodemon&lt;/code&gt; is only meaningful to developers, thus &lt;code&gt;nodemon&lt;/code&gt; should
be listed as a development dependency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After knowing the classification, we can continue on the command line usages.&lt;/p&gt;
&lt;p&gt;First, use &lt;code&gt;--save&lt;/code&gt; option to add a dependency for production environment.
For example, we can install &lt;a class="reference external" href="http://expressjs.com"&gt;Express&lt;/a&gt; web framework with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save express
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, use &lt;code&gt;--save-optional&lt;/code&gt; option to add an &lt;em&gt;optional&lt;/em&gt; dependency for
production environment.  For example, we can install &lt;a class="reference external" href="https://github.com/expressjs/cookie-parser"&gt;cookie-parser&lt;/a&gt; as an
optional dependency.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-optional cookie-parser
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, use &lt;code&gt;--save-dev&lt;/code&gt; option to add a dependency for development
environment.  For example, we can install &lt;a class="reference external" href="http://nodemon.io"&gt;nodemon&lt;/a&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev nodemon
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="write-code"&gt;
&lt;h2&gt;Write Code&lt;/h2&gt;
&lt;p&gt;To complete the picture, let's write some code for our example package.  The
following code snippet is extracted from &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;cookieParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;cookieParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cookie-parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* Ignore exception thrown by require(). */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookieParser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookieParser&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cookieParser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, nice to meet you again!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;visited&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, new visitor!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Listening at %s:%s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, we are importing &lt;code&gt;express&lt;/code&gt; as a mandatory dependency.  On
the other hand, &lt;code&gt;cookie-parser&lt;/code&gt; is treated as an optional dependency.
&lt;code&gt;app.js&lt;/code&gt; will degrade gracefully without &lt;code&gt;cookie-parser&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we can run &lt;code&gt;nodemon&lt;/code&gt; to test our application:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nodemon app.js
&lt;span class="o"&gt;[&lt;/span&gt;nodemon&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.9.1
&lt;span class="o"&gt;[&lt;/span&gt;nodemon&lt;span class="o"&gt;]&lt;/span&gt; to restart at any time, enter &lt;span class="sb"&gt;`&lt;/span&gt;rs&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;nodemon&lt;span class="o"&gt;]&lt;/span&gt; watching: *.*
&lt;span class="o"&gt;[&lt;/span&gt;nodemon&lt;span class="o"&gt;]&lt;/span&gt; starting &lt;span class="sb"&gt;`&lt;/span&gt;node app.js&lt;span class="sb"&gt;`&lt;/span&gt;
Listening at :::3000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's open the browser and say hello to our example application!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-packages"&gt;
&lt;h2&gt;Install Packages&lt;/h2&gt;
&lt;p&gt;So far, we have only discussed the situation that we are creating a new NPM
package.  How do we install the dependencies when have the source code of an
existing package?  Imagine that we have cloned the Git repository of a package
and we would like to install the dependencies specified in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The answer is simple: run &lt;code&gt;npm install&lt;/code&gt; to get every dependencies.  These
includes production, optional, and development dependencies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don't want the development dependencies, then specify
&lt;code&gt;--only=prod&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --only&lt;span class="o"&gt;=&lt;/span&gt;prod
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don't want the optional dependencies, then specify
&lt;code&gt;--no-optional&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --no-optional
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want neither production nor optional dependencies, then specify
&lt;code&gt;--only=dev&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --only&lt;span class="o"&gt;=&lt;/span&gt;dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;We have gone through the essential steps to create &lt;code&gt;package.json&lt;/code&gt; and
specify the dependencies for a package.  In addition, we have explained the
classification of dependencies.  Hope you enjoy this post.  Let's create NPM
packages together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.npmjs.com/cli/install"&gt;npm-install Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="javascript"></category><category term="node"></category></entry><entry><title>Flask and Socket.IO</title><link href="http://logan.tw/posts/2016/01/16/flask-and-socketio/" rel="alternate"></link><published>2016-01-16T15:03:00+08:00</published><updated>2016-01-16T15:03:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-01-16:/posts/2016/01/16/flask-and-socketio/</id><summary type="html">&lt;p&gt;Under some scenarios, we would like to push a message from an HTTP server to
clients.  For example, in a group messaging application, whenever a user sends a
message to the server, the server has to push such message to everyone.  Since
2001, several techniques have been proposed.  Eventually, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/WebSocket"&gt;WebSocket …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Under some scenarios, we would like to push a message from an HTTP server to
clients.  For example, in a group messaging application, whenever a user sends a
message to the server, the server has to push such message to everyone.  Since
2001, several techniques have been proposed.  Eventually, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/WebSocket"&gt;WebSocket&lt;/a&gt; has been
developed and standardized in 2011.  WebSocket is a full-duplex protocol that
supports bidirectional communications between servers and clients.  It is
supported by all modern browsers.&lt;/p&gt;
&lt;p&gt;On top of WebSocket, &lt;a class="reference external" href="https://socket.io/"&gt;Socket.IO&lt;/a&gt; is a Javascript library that abstracts the
protocol details.  Socket.IO provides an event-driven interface and
serializes JSON data automatically.  Socket.IO even implements other pushing
technologies.  If a browser does not support WebSocket, Socket.IO will fall
back to long polling protocol.  These characteristics make Socket.IO quite
appealing to web developers.&lt;/p&gt;
&lt;p&gt;In this post, I would like to demonstrate how to build a chat room application
named &lt;strong&gt;LiveChat&lt;/strong&gt; with &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; (server side) and &lt;a class="reference external" href="https://socket.io/"&gt;Socket.IO&lt;/a&gt; (client side).&lt;/p&gt;
&lt;div class="section" id="prerequisite"&gt;
&lt;h2&gt;Prerequisite&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;LiveChat&lt;/em&gt; application requires 3 Python packages: &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, &lt;a class="reference external" href="https://flask-socketio.readthedocs.io"&gt;Flask-SocketIO&lt;/a&gt;,
and &lt;a class="reference external" href="http://eventlet.net"&gt;Eventlet&lt;/a&gt;.  Flask is a well-known Python web framework.  Flask-SocketIO
implements the Socket.IO protocol and provides Socket.IO APIs for Flask
applications.  Eventlet is an efficient event-based networking library that are
used by Flask-SocketIO.&lt;/p&gt;
&lt;p&gt;To install these packages, create a &lt;code&gt;requirements.txt&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Flask==0.10.1
Flask-SocketIO==1.2
eventlet==0.17.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, run &lt;code&gt;pip install&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip intall -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-and-receiving-messages"&gt;
&lt;h2&gt;Sending and Receiving Messages&lt;/h2&gt;
&lt;p&gt;Let's start with sending and receiving messages.  In the initial simplistic
design, the user will send a message to server and the server will relay the
message to all users.  Whenever a user receives a message, the Javascript
client renders the messsage in the HTML document.&lt;/p&gt;
&lt;p&gt;The protocol for the initial simplistic design consists of two &lt;strong&gt;events&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;send-msg&lt;/code&gt; -- A client sends a message to the server.  Its payload is a
string which stands for the message to be sent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show-msg&lt;/code&gt; -- The server broadcast a message to all clients.  Its
payload is a string which should be rendered.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, let's look at the code.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;templates/index.html&lt;/code&gt; contains the HTML for the user interface.
There is a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; for users to enter their messages.  In addition, there
are two &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, which include &lt;code&gt;socket.io.min.js&lt;/code&gt; and
&lt;code&gt;livechat.js&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;LiveChat&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.6/socket.io.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/livechat.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inputForm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Send&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, &lt;code&gt;static/livechat.js&lt;/code&gt; contains the client-side Javascript code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;domInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;domStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createMessageDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;domStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createMessageDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;domStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;send-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;domInput&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;domInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;domInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;domInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initSocketIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;//&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showMsg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onDOMContentLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;domInputForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inputForm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;domInputForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;domInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;domStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;initSocketIO&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onDOMContentLoaded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To sum up, &lt;code&gt;livechat.js&lt;/code&gt; will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Connect to the server with &lt;code&gt;io.connect()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Register a Socket.IO event listener with &lt;code&gt;socket.on()&lt;/code&gt;.  In the code
snippet, the function &lt;code&gt;showMsg()&lt;/code&gt; is registered as the event handler for
&lt;code&gt;show-msg&lt;/code&gt; event.&lt;/li&gt;
&lt;li&gt;If a &lt;code&gt;show-msg&lt;/code&gt; event arrives, &lt;code&gt;showMsg()&lt;/code&gt; will create a DOM
element and add it to the document with &lt;code&gt;domStream.insertBefore()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Register a DOM event listener with &lt;code&gt;domInputForm.addEventListener()&lt;/code&gt;
to capture the &lt;code&gt;submit&lt;/code&gt; event.&lt;/li&gt;
&lt;li&gt;If a user clicks the &lt;em&gt;Send&lt;/em&gt; button, the event handler &lt;code&gt;onSubmit()&lt;/code&gt;
will emit a &lt;code&gt;send-msg&lt;/code&gt; event with &lt;code&gt;socket.emit('send-msg', ...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Third, &lt;code&gt;livechat.py&lt;/code&gt; contains the server-side Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_socketio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SocketIO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emit&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;socketio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SocketIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@socketio.on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;send-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;socketio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To sum up, &lt;code&gt;livechat.py&lt;/code&gt; performs following tasks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;index()&lt;/code&gt; will handle the HTTP request to the path &lt;code&gt;/&lt;/code&gt;.
It will return &lt;code&gt;templates/index.html&lt;/code&gt; when there is an HTTP request from
a client.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_message()&lt;/code&gt; is decorated by &lt;code&gt;&amp;#64;socketio.on()&lt;/code&gt; decorator.
With this decorator, &lt;code&gt;handle_message()&lt;/code&gt; will be called when a
client emits the &lt;code&gt;send-msg&lt;/code&gt; event.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_message()&lt;/code&gt; will call &lt;code&gt;flask_socketio.emit()&lt;/code&gt; with
&lt;code&gt;broadcast=True&lt;/code&gt; to emit &lt;code&gt;show-msg&lt;/code&gt; events to all users.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, let's run our initial implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python livechat.py
* Restarting with stat
* Debugger is active!
* Debugger PIN: &lt;span class="m"&gt;000&lt;/span&gt;-000-000
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24559&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; wsgi starting up on http://127.0.0.1:5000/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open the browser and visit &lt;a class="reference external" href="http://127.0.0.1:5000/"&gt;http://127.0.0.1:5000/&lt;/a&gt;.  You can also open two tabs
and check whether they can send the messages to each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="message-history"&gt;
&lt;h2&gt;Message History&lt;/h2&gt;
&lt;p&gt;In the initial design, users will only receive the messages that are sent after
they have joinned.  In this section, we would like to extend our LiveChat
application so that the server can send the message history to newly joinned
users.&lt;/p&gt;
&lt;p&gt;Two events are added to the protocol:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;request-all-msgs&lt;/code&gt; -- A client requests for message history.  This event
will be emitted when the connection is established.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show-all-msgs&lt;/code&gt; -- In response to the &lt;code&gt;request-all-msgs&lt;/code&gt; event,
the server will send the message history to the client with the
&lt;code&gt;show-all-msgs&lt;/code&gt; event.  Its payload is an array of strings which stands
for the message history.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the client side, two extra event handlers are registered.  One is for the
&lt;code&gt;connect&lt;/code&gt; event and the other is for the &lt;code&gt;show-all-msgs&lt;/code&gt; event.
After the connection is established, the &lt;code&gt;connect&lt;/code&gt; event handler will be
called. It will send a &lt;code&gt;request-all-msgs&lt;/code&gt; event to the server to request
for message history.  After the server replies, the &lt;code&gt;show-all-msgs&lt;/code&gt; event
handler will be called and show the messages with &lt;code&gt;showAllMsgs()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ... Omitted ...&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;domStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createMessageDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;domStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showAllMsgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;domStreamNew&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;showMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ... Omitted ...&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initSocketIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;//&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showMsg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show-all-msgs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showAllMsgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// Added&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// Added&lt;/span&gt;
            &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request-all-msgs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ... Omitted ...&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On server side, a &lt;code&gt;_msgs&lt;/code&gt; global variable is added to keep all messages in
the history.  Besides, an event handler for &lt;code&gt;request-all-msgs&lt;/code&gt; is
registered.  When the server receives a &lt;code&gt;request-all-msgs&lt;/code&gt; event,
&lt;code&gt;handle_sync()&lt;/code&gt; will send a &lt;code&gt;show-all-msgs&lt;/code&gt; event along with the
&lt;code&gt;_msgs&lt;/code&gt; list to the origin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ... Omitted ...&lt;/span&gt;

&lt;span class="n"&gt;_msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;# Added&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@socketio.on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;send-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_msgs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Added&lt;/span&gt;
    &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@socketio.on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request-all-msgs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Added&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_sync&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show-all-msgs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_msgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;socketio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, a newly joined user will see the dialogue before the user's entrance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-database"&gt;
&lt;h2&gt;Using Database&lt;/h2&gt;
&lt;p&gt;In the previous section, the message history was kept in a global variable.
However, all messages will be lost if the server is restarted.  To keep the
messages, the messages should be saved to a database.  In this section, I would
like to rewrite the server-side code to utilize SQLite database.&lt;/p&gt;
&lt;p&gt;First, open &lt;code&gt;schema.sql&lt;/code&gt; and write following SQL statements, which will
create a &lt;code&gt;livechat&lt;/code&gt; table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;livechat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;livechat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;AUTOINCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, several modifications are required for &lt;code&gt;livechat.py&lt;/code&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;flask.g&lt;/code&gt; is imported to keep application variables for an
&lt;em&gt;appcontext&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_db()&lt;/code&gt; will try to get the database handle from &lt;code&gt;flask.g&lt;/code&gt;.
If it is not available, then it will open the database with
&lt;code&gt;_connect_db()&lt;/code&gt;.  The returned database handle will be assigned to
&lt;code&gt;flask.g&lt;/code&gt; as well.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close_db()&lt;/code&gt; is decorated with &lt;code&gt;&amp;#64;app.teardown_appcontext()&lt;/code&gt; so
that the database connection can be closed before shutting down the
application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init_db()&lt;/code&gt; is a utility function to initialize the database.  It reuses
&lt;code&gt;get_db()&lt;/code&gt; and &lt;code&gt;close_db()&lt;/code&gt; by wrapping the code with
&lt;code&gt;with app.app_context()&lt;/code&gt;.  It will open the database and execute
the SQL statements in &lt;code&gt;schema.sql&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_message()&lt;/code&gt; will save the message with an &lt;code&gt;INSERT INTO&lt;/code&gt;
statement.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_sync()&lt;/code&gt; will get all messages with a &lt;code&gt;SELECT&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the code listing for &lt;code&gt;livechat.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;  &lt;span class="c1"&gt;# Modified&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_socketio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SocketIO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emit&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;  &lt;span class="c1"&gt;# Added&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;socketio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SocketIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DATABASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;livechat.sqlite&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_connect_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATABASE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_connect_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="nd"&gt;@app.teardown_appcontext&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;schema.sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executescript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@socketio.on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;send-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Modified&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;INSERT INTO livechat(text) VALUES (?);&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show-msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@socketio.on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request-all-msgs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_sync&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Modified&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SELECT text FROM livechat ORDER BY id ASC;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;show-all-msgs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;socketio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, initialize the SQLite database with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;from livechat import init_db; init_db()&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With these changes, we can keep all messages in the database.  The messages will
no longer disappear after we restart the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we learned how to write a small chat room application with
Flask-SocketIO.  In the example, we registered event handlers with the
&lt;code&gt;.on()&lt;/code&gt; method and send events with the &lt;code&gt;.emit()&lt;/code&gt; method.  We also
learned to keep appcontext variables in &lt;code&gt;flask.g&lt;/code&gt; and decorate the
teardown callbacks with &lt;code&gt;&amp;#64;app.teardown_appcontext&lt;/code&gt;.  All of the code can
be found at my GitHub repositoy &lt;a class="reference external" href="https://github.com/loganchien/livechat."&gt;&amp;#64;loganchien/livechat&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Polling&lt;/em&gt; (keep sending requests from clients) is an old trick to retrieve the
updates from the server, but polling will unnecessarily waste the network
bandwidth.  Several push technologies (sometimes referred as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comet_(programming)"&gt;Comet&lt;/a&gt;) have been
developed.  For example, &lt;em&gt;long polling&lt;/em&gt; is a variant of traditional polling.
Under long polling model, clients will send the request and &lt;em&gt;wait&lt;/em&gt; for the
response from the server. The server will defer the response &lt;em&gt;until&lt;/em&gt; the message
is available.  However, most techniques developed in early days have some
drawbacks and usually rely on the implementation details of browsers.
Fortunately, most use cases can be replaced by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/WebSocket"&gt;WebSocket&lt;/a&gt; now.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="flask"></category><category term="socketio"></category></entry><entry><title>Vim Ctrl-P Plug-in</title><link href="http://logan.tw/posts/2016/01/09/vim-ctrl-p-plug-in/" rel="alternate"></link><published>2016-01-09T09:21:00+08:00</published><updated>2016-01-09T09:21:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-01-09:/posts/2016/01/09/vim-ctrl-p-plug-in/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/ctrlpvim/ctrlp.vim"&gt;Ctrl-P plug-in&lt;/a&gt; allows us to open files with fuzzy names or regular expression
matches.  It boosts my productivity at lot!  I am glad to know about this
plug-in and I would like to share my experience with you.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;If you are managing Vim plug-ins with &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt; &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;, you can …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/ctrlpvim/ctrlp.vim"&gt;Ctrl-P plug-in&lt;/a&gt; allows us to open files with fuzzy names or regular expression
matches.  It boosts my productivity at lot!  I am glad to know about this
plug-in and I would like to share my experience with you.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;If you are managing Vim plug-ins with &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt; &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;, you can install Ctrl-P by
adding the following line to &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &lt;span class="s1"&gt;&amp;#39;ctrlpvim/ctrlp.vim&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="k"&gt;vim&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;PluginInstall &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="k"&gt;qall&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;After installing Ctrl-P plug-in, you will be able to open files with following
steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl-P&lt;/code&gt;.  In a second, a file list will prompt up.  It will list
the files under the current working directory (recursively.)&lt;/li&gt;
&lt;li&gt;Type the file name.  Ctrl-P will list the matching files.  Select the file
with &lt;code&gt;Up&lt;/code&gt; or &lt;code&gt;Down&lt;/code&gt; button on the keyboard.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Enter&lt;/code&gt; to open the file in the current buffer.  Or, press
&lt;code&gt;Ctrl-T&lt;/code&gt; to open the file in a new tab.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To search files with regular expression, press &lt;code&gt;Ctrl-P&lt;/code&gt; again when the
file list are prompted, i.e. press &lt;code&gt;Ctrl-P&lt;/code&gt; twice if you are in the normal
mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="file-name-cache"&gt;
&lt;h2&gt;File Name Cache&lt;/h2&gt;
&lt;p&gt;By default, Ctrl-P will walk through directories and build a file name cache to
speed up the pattern matching.  As a side-effect, we won't be able to find the
newly created files with Ctrl-P.  To workaround the problem, we have to rebuild
the file name cache.&lt;/p&gt;
&lt;p&gt;To rebuild the cache, press &lt;code&gt;Ctrl-P&lt;/code&gt; and then &lt;code&gt;F5&lt;/code&gt;.  Ctrl-P will
scan the directories again.  You will be able to see the newly created files
in a moment.&lt;/p&gt;
&lt;p&gt;Alternatively, you can run &lt;code&gt;:CtrlPClearCache&lt;/code&gt; in Vim command mode to clear
the cache.  Ctrl-P will rebuild the cache if you press &lt;code&gt;Ctrl-P&lt;/code&gt; later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="open-files-in-new-tabs"&gt;
&lt;h2&gt;Open Files in New Tabs&lt;/h2&gt;
&lt;p&gt;I personally don't like the default behavior of &lt;code&gt;Enter&lt;/code&gt;.  I wish I could
open the file in a new tab no matter I pressed &lt;code&gt;Enter&lt;/code&gt; or &lt;code&gt;Ctrl-T&lt;/code&gt;.
Fortunately, we can change the default behavior by adding following lines to
&lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ctrlp_prompt_mappings &lt;span class="p"&gt;=&lt;/span&gt; {
  \ &lt;span class="s1"&gt;&amp;#39;AcceptSelection(&amp;quot;e&amp;quot;)&amp;#39;&lt;/span&gt;: []&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;AcceptSelection(&amp;quot;t&amp;quot;)&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;&amp;lt;cr&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;c-m&amp;gt;&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ }
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If you are not aware of &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt;, it is highly recommended to give it a
trial.  I wrote an &lt;a class="reference external" href="http://logan.tw/posts/2014/11/25/vim-vundle/"&gt;article&lt;/a&gt; several
years ago.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="vim"></category></entry><entry><title>Python New Style Class</title><link href="http://logan.tw/posts/2016/01/02/python-new-style-class/" rel="alternate"></link><published>2016-01-02T19:08:00+08:00</published><updated>2016-01-02T19:08:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2016-01-02:/posts/2016/01/02/python-new-style-class/</id><summary type="html">&lt;p&gt;Recently, I am curious about this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why do we have to extend or inherit from &lt;code&gt;object&lt;/code&gt; type?&lt;/p&gt;
&lt;p&gt;There are no differences with or without &lt;code&gt;(object)&lt;/code&gt; in Python 3.  But
there are &lt;em&gt;significant&lt;/em&gt; differences in Python 2.  If a class inherits (either
directly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I am curious about this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why do we have to extend or inherit from &lt;code&gt;object&lt;/code&gt; type?&lt;/p&gt;
&lt;p&gt;There are no differences with or without &lt;code&gt;(object)&lt;/code&gt; in Python 3.  But
there are &lt;em&gt;significant&lt;/em&gt; differences in Python 2.  If a class inherits (either
directly or indirectly) from &lt;code&gt;object&lt;/code&gt; type, then it will be a &lt;strong&gt;new-style
class&lt;/strong&gt;. Otherwise, it will be an &lt;strong&gt;old-style class&lt;/strong&gt;.  It is suggested to avoid
&lt;em&gt;old-style classes&lt;/em&gt; in the newly written code.  However, knowing the differences
between &lt;em&gt;old-style classes&lt;/em&gt; and &lt;em&gt;new-style classes&lt;/em&gt; is important to every Python
2 programmers.  We will cover several aspects in this post.&lt;/p&gt;
&lt;div class="section" id="slots"&gt;
&lt;h2&gt;Slots&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__slots__&lt;/code&gt; is a special class attribute which controls the instance
variables that can be get from or set to an instantiated object.  If
&lt;code&gt;__slots__&lt;/code&gt; is specified in a &lt;em&gt;new-style class&lt;/em&gt;, heap memory usages can be
reduced because &lt;code&gt;__slots__&lt;/code&gt; prevents the creation of the &lt;code&gt;__dict__&lt;/code&gt;
data structure.&lt;/p&gt;
&lt;p&gt;If a &lt;em&gt;new-style class&lt;/em&gt; has the &lt;code&gt;__slots__&lt;/code&gt; class attribute and some code
gets or sets an unspecified attribute from or to the instance, then
&lt;code&gt;AttributeError&lt;/code&gt; will be raised:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="vm"&gt;__slots__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Caught expected exception&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, &lt;code&gt;__slots__&lt;/code&gt; does not work with &lt;em&gt;old-style classes&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="vm"&gt;__slots__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="c1"&gt;# No AttributeError&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b.y = &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b.__dict__ = &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the snippet above, &lt;code&gt;b.__dict__&lt;/code&gt; is created regardless the
&lt;code&gt;__slots__&lt;/code&gt; class attribute.  The code succeed setting the &lt;code&gt;y&lt;/code&gt;
attribute to the instance of &lt;code&gt;B&lt;/code&gt;.  And, an extra item was added to
&lt;code&gt;b.__dict__&lt;/code&gt; after the assignment.  This indicates that we lose all of the
benefits of &lt;code&gt;__slots__&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="properties"&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;If a class attribute of a &lt;em&gt;new-style class&lt;/em&gt; refers to a &lt;code&gt;property&lt;/code&gt;
instance, then the associated getter, setter, or deleter will be invoked when
some code access the corresponding instance attribute.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;get_x:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;set_x:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;del_x&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;del_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Test getter&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: get_x: 0&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: 0&lt;/span&gt;

&lt;span class="c1"&gt;# Test setter&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: set_x: 0 5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: 5&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: get_x: 5&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: 5&lt;/span&gt;

&lt;span class="c1"&gt;# Test deleter&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: del_x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code snippet above, we can see that every accesses to the instance of
&lt;code&gt;a.x&lt;/code&gt; will be delegated to the associated methods.  Furthermore, if a
property does not have a setter and some code assign a value to such attribute,
then an &lt;code&gt;AttributeError&lt;/code&gt; exception will be raised:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: Traceback (most recent call last):&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:   File &amp;quot;test.py&amp;quot;, line 10, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:    a2.x = 5&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: AttributeError: can&amp;#39;t set attribute&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, property works differently if is referred by a class attribute of an
&lt;em&gt;old-style class&lt;/em&gt;.  In the code snippet below, an &lt;em&gt;old-style class&lt;/em&gt; &lt;code&gt;B&lt;/code&gt;
has a class attribute &lt;code&gt;x&lt;/code&gt; which is bound to a &lt;code&gt;property&lt;/code&gt; instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# B is NOT derived from `object` type&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;get_x:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;set_x:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;del_x&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;del_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Test getter&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: get_x: 0&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, the output looks similar.  However, the output will become different
when the code assign a value to &lt;code&gt;b.x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Test setter&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="c1"&gt;# Not calling set_x()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;  &lt;span class="c1"&gt;# b._value left unchanged&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: 0&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="c1"&gt;# Not calling get_x()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: 5&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: {&amp;#39;_value&amp;#39;: 0, &amp;#39;x&amp;#39;: 5}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code snippet above, the assignment statement (which assigned &lt;code&gt;5&lt;/code&gt; to
&lt;code&gt;b.x&lt;/code&gt;) was not delegated to &lt;code&gt;set_x()&lt;/code&gt;, thus &lt;code&gt;b._value&lt;/code&gt; was
left unchanged.  Besides, the assignment statement added a new attribute
&lt;code&gt;x&lt;/code&gt; to the instance attribute dictionary, thus &lt;code&gt;b.__dict__&lt;/code&gt; contains
two items: &lt;code&gt;_value&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;.  Furthermore, the attribute in the
instance attribute dictionary &lt;em&gt;hides&lt;/em&gt; the class attribute.  Consequently,
accessing &lt;code&gt;b.x&lt;/code&gt; will not be delegated to &lt;code&gt;get_x()&lt;/code&gt; method after the
assignment.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;old-style classes&lt;/em&gt;, &lt;code&gt;del&lt;/code&gt; statements will only remove the attribute
from the instance attribute dictionary &lt;code&gt;__dict__&lt;/code&gt;.  If the attribute is
not in &lt;code&gt;__dict__&lt;/code&gt;, then an &lt;code&gt;AttributeError&lt;/code&gt; will be raised.  The
deleter won't be called.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Test deleter&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="c1"&gt;# Remove x from b.__dict__&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: {&amp;#39;_value&amp;#39;: 0}&lt;/span&gt;

&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: Traceback (most recent call last):&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:   File &amp;quot;./test.py&amp;quot;, line 44, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:     del b.x&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: AttributeError: B instance has no attribute &amp;#39;x&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Likewise, assigning a value to a property without a setter function will not
result in &lt;code&gt;AttributeError&lt;/code&gt;.  It will simply add a new attribute to
instance attribute dictionary and hide the class attribute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# B2 is NOT derived from `object` type&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="c1"&gt;# No AttributeError&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: {&amp;#39;x&amp;#39;: 5}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In short, the setter and deleter function do not work with old-style classes and
the getter function will work only if the class attribute is not hidden by the
instance attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="method-resolution-order-mro"&gt;
&lt;h2&gt;Method Resolution Order (MRO)&lt;/h2&gt;
&lt;p&gt;In Python, a derived class may override a method inherited from the base class.
However, there are some differences when multiple inheritance is involved.  For
example, which &lt;code&gt;test()&lt;/code&gt; method will be invoked when class &lt;code&gt;D&lt;/code&gt;
inherits both class &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; but only class &lt;code&gt;C&lt;/code&gt; overrides
the &lt;code&gt;test()&lt;/code&gt; method?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A.test()&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C.test()&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: C.test()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If these classes are &lt;em&gt;new-style classes&lt;/em&gt;, then &lt;code&gt;C.test()&lt;/code&gt; will be invoked.
The &lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;method resolution order&lt;/a&gt; for &lt;em&gt;new-style classes&lt;/em&gt; was introduced in Python
2.3.  Conceptually, the &lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;method resolution order&lt;/a&gt; introduced in Python 2.3
tries to pick the most specific method.  We can inspect the order by printing
the &lt;code&gt;__mro__&lt;/code&gt; class attribute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__mro__&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: (&amp;lt;class &amp;#39;__main__.A&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;object&amp;#39;&amp;gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__mro__&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: (&amp;lt;class &amp;#39;__main__.B&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.A&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;object&amp;#39;&amp;gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__mro__&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: (&amp;lt;class &amp;#39;__main__.C&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.A&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;object&amp;#39;&amp;gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__mro__&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: (&amp;lt;class &amp;#39;__main__.D&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.B&amp;#39;&amp;gt;,&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: &amp;lt;class &amp;#39;__main__.C&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.A&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;object&amp;#39;&amp;gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As shown in the output, Python run-time will look for the &lt;code&gt;test()&lt;/code&gt; method
from class &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;:, and &lt;code&gt;A&lt;/code&gt; (in order) when we
call &lt;code&gt;d.test()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The resolution order is different if these classes are &lt;em&gt;old-style classes&lt;/em&gt;.  For
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# E is NOT derived from `object` type.&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;E.test()&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;G.test()&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;H&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: E.test()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code snippet above, the generic &lt;code&gt;E.test()&lt;/code&gt; from the base class
&lt;code&gt;E&lt;/code&gt; will be invoked instead of the more specific &lt;code&gt;G.test()&lt;/code&gt;.  If a
&lt;em&gt;old-style class&lt;/em&gt; does not override the method, then Python run-time will look
for the method from its base classes (from left to right).  In this example, it
will look for &lt;code&gt;test()&lt;/code&gt; method in class &lt;code&gt;F&lt;/code&gt; first and recursively
look for &lt;code&gt;test()&lt;/code&gt; method in class &lt;code&gt;E&lt;/code&gt;, which is the base class of
&lt;code&gt;F&lt;/code&gt;.  Since class &lt;code&gt;E&lt;/code&gt; defines a &lt;code&gt;test()&lt;/code&gt; method, the
resolution stops at class &lt;code&gt;E&lt;/code&gt; and class &lt;code&gt;G&lt;/code&gt; will not be queried.&lt;/p&gt;
&lt;p&gt;Besides, &lt;em&gt;old-style classes&lt;/em&gt; do not have &lt;code&gt;__mro__&lt;/code&gt; class attribute either:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__mro__&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: Traceback (most recent call last):&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:   File &amp;quot;test.py&amp;quot;, line 21, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:     print H.__mro__&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: AttributeError: class H has no attribute &amp;#39;__mro__&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="super"&gt;
&lt;h2&gt;Super&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;super()&lt;/code&gt; is a built-in function which helps us to invoke the overridden
method.  For example, when class &lt;code&gt;B&lt;/code&gt; inherits from class &lt;code&gt;A&lt;/code&gt;,
&lt;code&gt;B.test()&lt;/code&gt; overrides &lt;code&gt;A.test()&lt;/code&gt;, and the implementation of &lt;code&gt;B.test()&lt;/code&gt; would like to call &lt;code&gt;A.test()&lt;/code&gt;, then it can utilize the
&lt;code&gt;super()&lt;/code&gt; function.  The &lt;code&gt;super()&lt;/code&gt; function takes the current
class object and the &lt;code&gt;self&lt;/code&gt; reference as the argument and it will find the
overridden method to be dispatched to.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A.test()&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B.test()&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: A.test()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: B.test()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, &lt;code&gt;super()&lt;/code&gt; only works for &lt;em&gt;new-style classes&lt;/em&gt;.  It does NOT work
with &lt;em&gt;old-style classes&lt;/em&gt;.  A &lt;code&gt;TypeError&lt;/code&gt; exception will be raised, if an
old-style class object is passed as the first argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C.test()&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;D.test()&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: Traceback (most recent call last):&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:   File &amp;quot;./test.py&amp;quot;, line 13, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:     d.test()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:   File &amp;quot;./test.py&amp;quot;, line 9, in test&lt;/span&gt;
&lt;span class="c1"&gt;# Prints:     super(D, self).test()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: TypeError: super() argument 1 must be type, not classobj&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To call the parent methods in &lt;em&gt;old-style classess&lt;/em&gt;, we have to explicitly get
the methods from the class attribute, and pass the &lt;code&gt;self&lt;/code&gt; argument
explicitly.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;E.test()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;F.test()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;G.test()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;H&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;H.test()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: E.test()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: F.test()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: E.test()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: G.test()&lt;/span&gt;
&lt;span class="c1"&gt;# Prints: H.test()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this mechanism is sort of primitive.  If there is a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem"&gt;diamond shape&lt;/a&gt; in
the inheritance hierarcy, then some methods from the base classes will be
invoked more than once.  For example, the class &lt;code&gt;H&lt;/code&gt; above inherits both
&lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; and both of them will invoke &lt;code&gt;E.test()&lt;/code&gt;.  If this
is undesired, then some extra bookkeeping code must be written.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we have covered four differents between &lt;em&gt;new-style classes&lt;/em&gt; and
&lt;em&gt;old-style classes&lt;/em&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &lt;code&gt;__slots__&lt;/code&gt; mechanism doesn't work with old-style classes&lt;/li&gt;
&lt;li&gt;The setter and deleter of &lt;code&gt;property&lt;/code&gt; doesn't work with old-style
classes.&lt;/li&gt;
&lt;li&gt;The method resolution order is slightly different.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;super()&lt;/code&gt; function doesn't work with old-style classes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There might still be some other nuances that are not covered by this post.
However, IMO, the rule of thumb is to adopt &lt;em&gt;new-style classes&lt;/em&gt; as soon as
possible and only use &lt;em&gt;new-style classes&lt;/em&gt; in your code because Python 3 doesn't
support &lt;em&gt;old-style classes&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Guido van Rossum, &lt;a class="reference external" href="https://www.python.org/download/releases/2.2.3/descrintro/"&gt;Unifying types and classes in Python 2.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Wiki, &lt;a class="reference external" href="https://wiki.python.org/moin/NewClassVsClassicClass"&gt;New Class vs. Classic Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Wiki, &lt;a class="reference external" href="https://www.python.org/doc/newstyle/"&gt;New-style Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;The Python 2.3 Method Resolution Order&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="python"></category></entry><entry><title>A Quick Guide to Grunt</title><link href="http://logan.tw/posts/2015/12/26/a-quick-guide-to-grunt/" rel="alternate"></link><published>2015-12-26T17:34:00+08:00</published><updated>2015-12-26T17:34:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-12-26:/posts/2015/12/26/a-quick-guide-to-grunt/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; is a task runner for Javascript development.  &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; automates the
process to bundle, transpile, uglify, and compress the Javascript source code.
This post would like to give a quick guide to &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Our first step is to create a &lt;code&gt;package.json&lt;/code&gt;.  We will need a
&lt;code&gt;package.json&lt;/code&gt; to …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; is a task runner for Javascript development.  &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; automates the
process to bundle, transpile, uglify, and compress the Javascript source code.
This post would like to give a quick guide to &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Our first step is to create a &lt;code&gt;package.json&lt;/code&gt;.  We will need a
&lt;code&gt;package.json&lt;/code&gt; to save the version of &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; package.  Besides, we would
like to load package information from &lt;code&gt;package.json&lt;/code&gt; in the future. Thus,
if you don't have an existing &lt;code&gt;package.json&lt;/code&gt;, then create one with
&lt;code&gt;npm init&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir hello_grunt
$ &lt;span class="nb"&gt;cd&lt;/span&gt; hello_grunt
$ npm init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, install &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; and its command line tool with the following command.
We should keep them as development dependencies, thus &lt;code&gt;--save-dev&lt;/code&gt; is
specified:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev grunt grunt-cli
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, add &lt;code&gt;node_modules/.bin&lt;/code&gt; to &lt;code&gt;PATH&lt;/code&gt; environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/node_modules/.bin:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can test the &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; command with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt
A valid Gruntfile could not be found. Please see the getting started guide &lt;span class="k"&gt;for&lt;/span&gt;
more information on how to configure grunt: http://gruntjs.com/getting-started
Fatal error: Unable to find Gruntfile.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, we got an error because we haven't written a &lt;code&gt;Gruntfile.js&lt;/code&gt;
yet.  We will cover the basic usages in the next section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gruntfile-basics"&gt;
&lt;h2&gt;Gruntfile Basics&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Gruntfile.js&lt;/code&gt; is a Javascript module specifying the task to be run by
&lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;.  Let's start with our first example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;code&gt;Gruntfile.js&lt;/code&gt; registers a default task which does nothing.  There
are several important concepts in this example.  First, &lt;code&gt;Gruntfile.js&lt;/code&gt; is
essentially a Node.js module.  It exports a function accepting a &lt;code&gt;grunt&lt;/code&gt;
argument which will be bound to a &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; API object.  Second, it calls
&lt;code&gt;grunt.initConfig()&lt;/code&gt; and passes an object containing a &lt;code&gt;pkg&lt;/code&gt;
property.  &lt;code&gt;grunt.initConfig()&lt;/code&gt; initializes the configuration that will be
accessed by the tasks.  Third, it calls &lt;code&gt;grunt.registerTask()&lt;/code&gt; to register
a task named &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After running the &lt;code&gt;grunt&lt;/code&gt; command, we will see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt
Done, without errors.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; did nothing because there was nothing to do.  Let's write a
real &lt;em&gt;hello world&lt;/em&gt; task.  The following code snippet registers another task
named &lt;code&gt;hello&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this &lt;code&gt;Gruntfile.js&lt;/code&gt;, we can run the &lt;code&gt;hello&lt;/code&gt; task with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt hello
Running &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; task
hello world

Done, without errors.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run the &lt;code&gt;hello&lt;/code&gt; task &lt;em&gt;without&lt;/em&gt; explicitly specifying it in the command
line arguments, add &lt;code&gt;hello&lt;/code&gt; task to the dependencies of the
&lt;code&gt;default&lt;/code&gt; task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// Modified&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this modification, running &lt;code&gt;grunt&lt;/code&gt; command (without arguments)
should print the same output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt
Running &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; task
hello world

Done, without errors.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, we have learned to register a single task with &lt;code&gt;registerTask()&lt;/code&gt;.
However, under some circumstances, we would like to register multiple tasks with
the same function code but different parameters.  We can achieve this goal with
&lt;code&gt;grunt.registerMultiTask()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

        &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;dist_other&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;grunt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerMultiTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; from &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code snippet above, we replaced &lt;code&gt;registerTask()&lt;/code&gt; with
&lt;code&gt;registerMultiTask()&lt;/code&gt;.  In addition, an extra key-value pair &lt;code&gt;hello&lt;/code&gt;
is added to the configuration.  The &lt;code&gt;hello&lt;/code&gt; property holds another object
which keeps the key-value pairs for each targets.  When the task function is
invoked, &lt;code&gt;this.target&lt;/code&gt; will be bound to the key and &lt;code&gt;this.data&lt;/code&gt;
will be bound to the value.&lt;/p&gt;
&lt;p&gt;For example, in the first invocation, &lt;code&gt;this.target&lt;/code&gt; will be bound to
&lt;code&gt;dist&lt;/code&gt; and &lt;code&gt;this.data&lt;/code&gt; will be bound to &lt;code&gt;world&lt;/code&gt;.  In the
second invocation, &lt;code&gt;this.target&lt;/code&gt; will be bound to &lt;code&gt;dist_other&lt;/code&gt; and
&lt;code&gt;this.data&lt;/code&gt; will be bound to &lt;code&gt;grunt&lt;/code&gt;.  Here is the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt
Running &lt;span class="s2"&gt;&amp;quot;hello:dist&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;hello&lt;span class="o"&gt;)&lt;/span&gt; task
hello world from dist

Running &lt;span class="s2"&gt;&amp;quot;hello:dist_other&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;hello&lt;span class="o"&gt;)&lt;/span&gt; task
hello grunt from dist_other

Done, without errors.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can run a specific task by combining the task name and the target name with a
colon.  For example, running &lt;code&gt;grunt hello:dist&lt;/code&gt; will only invoke the
&lt;code&gt;hello&lt;/code&gt; task with the &lt;code&gt;dist&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt hello:dist
Running &lt;span class="s2"&gt;&amp;quot;hello:dist&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;hello&lt;span class="o"&gt;)&lt;/span&gt; task
hello world from dist

Done, without errors.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This convention applies to all places where &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; expects a task name.  For
example, we can specify &lt;code&gt;hello:dist&lt;/code&gt; as a dependency of the default task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello:dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have learned the basic usage of &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;.  It's time for some real-world
examples.  In the upcoming sections, we will cover three different &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; tasks:
&lt;a class="reference internal" href="#uglify"&gt;uglify&lt;/a&gt;, &lt;a class="reference internal" href="#clean"&gt;clean&lt;/a&gt;, and &lt;a class="reference internal" href="#babel-transpilation"&gt;babel transpilation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uglify"&gt;
&lt;h2&gt;Uglify&lt;/h2&gt;
&lt;p&gt;In the past, web developers had to distribute Javascript source code to web site
visitors.  It is undesirable because most people don't want their competitors
take their code easily.  Besides, web developers would like to reduce the file
size as well.  Since Javascript engines don't care about the comments and most
local variable names, we can reduce the file size by removing comments or
renaming local variables.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.npmjs.com/package/uglifyjs"&gt;UglifyJS&lt;/a&gt; is a Javascript minifier and compressor that can remove comments,
rename variables, rewrite Javascript expressions or statements, etc.
&lt;code&gt;grunt-contrib-uglify&lt;/code&gt; integrates &lt;a class="reference external" href="https://www.npmjs.com/package/uglifyjs"&gt;UglifyJS&lt;/a&gt; into &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;, thus our first
step is to install &lt;code&gt;grunt-contrib-uglify&lt;/code&gt; with following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev grunt-contrib-uglify
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To demonstrate the functionality of &lt;a class="reference external" href="https://www.npmjs.com/package/uglifyjs"&gt;UglifyJS&lt;/a&gt;, create an input file
&lt;code&gt;src/hello_grunt.js&lt;/code&gt; containing following Javascript code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, change &lt;code&gt;Gruntfile.js&lt;/code&gt; to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

        &lt;span class="nx"&gt;uglify&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dist/&amp;lt;%= pkg.name %&amp;gt;.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;src/&amp;lt;%= pkg.name %&amp;gt;.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-contrib-uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared to the hello world example, there are two differences.&lt;/p&gt;
&lt;p&gt;First, an extra &lt;code&gt;uglify&lt;/code&gt; configuration is added and a &lt;code&gt;dist&lt;/code&gt; target
is declared. The &lt;code&gt;uglify:dist&lt;/code&gt; target reads the input from
&lt;code&gt;src/hello_grunt.js&lt;/code&gt; and writes the output to
&lt;code&gt;dist/hello_grunt.min.js&lt;/code&gt;.  (Note: &lt;code&gt;&amp;lt;%= pkg.name %&amp;gt;&lt;/code&gt; will be replaced
by the package name specified in &lt;code&gt;package.json&lt;/code&gt;, i.e. &lt;code&gt;hello_grunt&lt;/code&gt;
in this example.)&lt;/p&gt;
&lt;p&gt;Second, &lt;code&gt;grunt.loadNpmTasks()&lt;/code&gt; loads &lt;code&gt;grunt-contrib-uglify&lt;/code&gt; from the
installed NPM package and registers the &lt;code&gt;uglify&lt;/code&gt; tasks.&lt;/p&gt;
&lt;p&gt;After running the &lt;code&gt;grunt&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt
Running &lt;span class="s2"&gt;&amp;quot;uglify:dist&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;uglify&lt;span class="o"&gt;)&lt;/span&gt; task
&amp;gt;&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt; file created.

Done, without errors.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An uglified Javascript file can be found at &lt;code&gt;dist/hello_grunt.min.js&lt;/code&gt;.  It
contains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As shown by the code snippet, unnecessary whitespace characters or semicolons
are removed and local variables are renamed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clean"&gt;
&lt;h2&gt;Clean&lt;/h2&gt;
&lt;p&gt;During the build process, several temporary files or output files are generated.
&lt;code&gt;grunt-contrib-clean&lt;/code&gt; package allows us to clean up working directories
with a single command &lt;code&gt;grunt clean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To install &lt;code&gt;grunt-contrib-clean&lt;/code&gt; package, run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev grunt-contrib-clean
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, load &lt;code&gt;grunt-contrib-clean&lt;/code&gt; with &lt;code&gt;grunt.loadNpmTasks()&lt;/code&gt; and
add a &lt;code&gt;clean&lt;/code&gt; property to the configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

        &lt;span class="nx"&gt;uglify&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dist/&amp;lt;%= pkg.name %&amp;gt;.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;src/&amp;lt;%= pkg.name %&amp;gt;.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-contrib-clean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-contrib-uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Multiple targets and configurations may be specified in the &lt;code&gt;clean&lt;/code&gt;
property.  The data for each target keep an array of paths to be deleted.  In
this example, the &lt;code&gt;clean:dist&lt;/code&gt; target wants to remove the &lt;code&gt;dist&lt;/code&gt;
directory (specified in the array).&lt;/p&gt;
&lt;p&gt;To show how &lt;code&gt;grunt-contrib-clean&lt;/code&gt; work, let's run the default task first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt
Running &lt;span class="s2"&gt;&amp;quot;uglify:dist&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;uglify&lt;span class="o"&gt;)&lt;/span&gt; task
&amp;gt;&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt; file created.

Done, without errors.

$ find dist
dist
dist/hello_grunt.min.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, run &lt;code&gt;grunt clean&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt clean
Running &lt;span class="s2"&gt;&amp;quot;clean:dist&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;clean&lt;span class="o"&gt;)&lt;/span&gt; task
&amp;gt;&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt; path cleaned.

Done, without errors.

$ find dist
find: ‘dist’: No such file or directory
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As expected, the &lt;code&gt;dist&lt;/code&gt; directory was removed after running
&lt;code&gt;grunt clean&lt;/code&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="babel-transpilation"&gt;
&lt;h2&gt;Babel Transpilation&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://babeljs.io"&gt;Babel&lt;/a&gt; is a transpiler (source-to-source compiler) which converts the latest or
experimental Javascript features into widely-adopted Javascript.  &lt;a class="reference external" href="https://babeljs.io"&gt;Babel&lt;/a&gt; has
many functionalities, but the most notable one is its capability to convert
ES2015 (ES6) source code into ES5 source code.  The upcoming example
demonstrates the interaction between &lt;a class="reference external" href="https://babeljs.io"&gt;Babel&lt;/a&gt;, &lt;a class="reference external" href="https://www.npmjs.com/package/uglifyjs"&gt;UglifyJS&lt;/a&gt;, and &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, to transpile ES2015 source code, we have to install &lt;code&gt;grunt-babel&lt;/code&gt;
and &lt;code&gt;babel-preset-es2015&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev grunt-babel babel-preset-es2015
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, add a &lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals"&gt;template literal&lt;/a&gt; to &lt;code&gt;src/hello_grunt.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`hello &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Modified&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, register a &lt;code&gt;babel&lt;/code&gt; task and add &lt;code&gt;babel&lt;/code&gt; to the dependencies
of the &lt;code&gt;default&lt;/code&gt; task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

        &lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;presets&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;es2015&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;

            &lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dist/&amp;lt;%= pkg.name %&amp;gt;.es5.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// Notice&lt;/span&gt;
                &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;src/&amp;lt;%= pkg.name %&amp;gt;.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="nx"&gt;uglify&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dist/&amp;lt;%= pkg.name %&amp;gt;.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dist/&amp;lt;%= pkg.name %&amp;gt;.es5.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// Modified&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-babel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-contrib-clean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-contrib-uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;babel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// Modified&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Four places in the code snippet above must be noticed.  First, there is an
&lt;code&gt;options&lt;/code&gt; property in the configuration for &lt;code&gt;babel&lt;/code&gt;. The
&lt;code&gt;options&lt;/code&gt; property asks &lt;a class="reference external" href="https://babeljs.io"&gt;Babel&lt;/a&gt; to apply all ES2015-related
transformations.  Second, the output file for the &lt;code&gt;babel:dist&lt;/code&gt; target is
&lt;code&gt;dist/hello_grunt.es5.js&lt;/code&gt;.  Third, the output file for &lt;code&gt;babel:dist&lt;/code&gt;
will be the input file for &lt;code&gt;uglify:dist&lt;/code&gt;.  Fourth, &lt;code&gt;babel&lt;/code&gt; is added
to the front of the dependencies array of the &lt;code&gt;default&lt;/code&gt; task.  Since
&lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; runs the tasks in the user-specified order, placing &lt;code&gt;babel&lt;/code&gt; before
&lt;code&gt;uglify&lt;/code&gt; is necessary.&lt;/p&gt;
&lt;p&gt;Finally, run the &lt;code&gt;grunt&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grunt
Running &lt;span class="s2"&gt;&amp;quot;babel:dist&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;babel&lt;span class="o"&gt;)&lt;/span&gt; task

Running &lt;span class="s2"&gt;&amp;quot;uglify:dist&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;uglify&lt;span class="o"&gt;)&lt;/span&gt; task
&amp;gt;&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt; file created.

Done, without errors.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://babeljs.io"&gt;Babel&lt;/a&gt; will generate the following output file &lt;code&gt;dist/hello_grunt.es5.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;a class="reference external" href="https://www.npmjs.com/package/uglifyjs"&gt;UglifyJS&lt;/a&gt; will convert it into &lt;code&gt;dist/hello_grunt.min.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These output files complete our example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we covered several aspects of &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;.  We started from the
&lt;a class="reference internal" href="#gruntfile-basics"&gt;basic usages&lt;/a&gt; and then walked through three common tasks such
as &lt;a class="reference internal" href="#uglify"&gt;uglify&lt;/a&gt;, &lt;a class="reference internal" href="#clean"&gt;clean&lt;/a&gt;, and &lt;a class="reference internal" href="#babel-transpilation"&gt;babel transpilation&lt;/a&gt;.  I hope you enjoy this
post.  Let's start to automate the Javascript build process with &lt;a class="reference external" href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt;!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;NPM packages and versions referred in this post:&lt;/p&gt;
&lt;p class="last"&gt;&lt;code&gt;babel-preset-es2015&amp;#64;6.3.13&lt;/code&gt;
&lt;code&gt;grunt&amp;#64;0.4.5&lt;/code&gt;
&lt;code&gt;grunt-babel&amp;#64;6.0.0&lt;/code&gt;
&lt;code&gt;grunt-cli&amp;#64;0.1.13&lt;/code&gt;
&lt;code&gt;grunt-contrib-clean&amp;#64;0.7.0&lt;/code&gt;
&lt;code&gt;grunt-contrib-uglify&amp;#64;0.11.0&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="javascript"></category></entry><entry><title>JavaScript Prototype and Object Oriented</title><link href="http://logan.tw/posts/2015/12/19/javascript-prototype-and-object-oriented/" rel="alternate"></link><published>2015-12-19T23:21:00+08:00</published><updated>2015-12-19T23:21:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-12-19:/posts/2015/12/19/javascript-prototype-and-object-oriented/</id><summary type="html">&lt;p&gt;Javascript is a prototype-based object-oriented programming language.  Unlike
the conventional class-based object-oriented programming languages (e.g. C++ or
Java), which ask programmers to write a class and then instantiate several
similar objects from the class, Javascript adopts a different approach.  In the
world of Javascript, we have to craft a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Javascript is a prototype-based object-oriented programming language.  Unlike
the conventional class-based object-oriented programming languages (e.g. C++ or
Java), which ask programmers to write a class and then instantiate several
similar objects from the class, Javascript adopts a different approach.  In the
world of Javascript, we have to craft a &lt;strong&gt;prototypal&lt;/strong&gt; object first and then
create similar objects from the prototypal object.  In this article, we would
like to give a gentle introduction to object-oriented programming in Javascript.&lt;/p&gt;
&lt;div class="section" id="objects-and-methods"&gt;
&lt;h2&gt;Objects and Methods&lt;/h2&gt;
&lt;p&gt;Let's start to create our first object in Javascript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;robert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code snippet above, we created a Javascript object holding Robert's first
name and last name.  Objects in Javascript are essentially dictionaries.  We can
access the properties with the &lt;code&gt;dot&lt;/code&gt; operator.  For example, the following
code snippet prints Robert's first name and the last name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Robert&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Smith&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can write a function to get the full name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Robert Smith&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It works but it is suboptimal.  Compared with &lt;code&gt;getFullName(robert)&lt;/code&gt;, it
will be better to define a method for the object which was referred by the
reference &lt;code&gt;robert&lt;/code&gt; and invoke &lt;code&gt;robert.getFullName()&lt;/code&gt; instead.  To
achieve this, let's move &lt;code&gt;getFullName()&lt;/code&gt; into the object literal and
replace &lt;code&gt;employee&lt;/code&gt; argument with the implicit &lt;code&gt;this&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;robert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Robert Smith&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implicit &lt;code&gt;this&lt;/code&gt; argument will be bound to the object before the
&lt;code&gt;dot&lt;/code&gt; operator at the callsite.  In this case, it will be bound to the
object which &lt;code&gt;robert&lt;/code&gt; refers to.&lt;/p&gt;
&lt;p&gt;Notice that this mechanism will only work if the &lt;code&gt;dot&lt;/code&gt; operator and the
function invocation are combined together.  If we write these operators
separately, then we will get a different result.  For example, in the following
code snippet, &lt;code&gt;this&lt;/code&gt; will be bounded to the &lt;strong&gt;global host object&lt;/strong&gt; of the
Javascript run-time environment (&lt;code&gt;window&lt;/code&gt; object in browsers and
&lt;code&gt;global&lt;/code&gt; object in Node.js) instead of the object which is referred by the
reference &lt;code&gt;robert&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: undefined undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, we have learned to craft an object with several properties and methods.
However, in the real world, many objects may share the same method.  For
example, &lt;code&gt;getFullName()&lt;/code&gt; is not specific to &lt;code&gt;robert&lt;/code&gt;.  Are there
any mechanisms to re-use this method?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prototypal-inheritance"&gt;
&lt;h2&gt;Prototypal Inheritance&lt;/h2&gt;
&lt;p&gt;Javascript supports prototypal inheritance.  With prototypal inheritance, a
programmer can inherit properties and attributes from another &lt;em&gt;prototypal&lt;/em&gt;
object (a.k.a. prototype).  To inherit from an object &lt;code&gt;proto&lt;/code&gt;, we can
invoke &lt;code&gt;Object.create(proto)&lt;/code&gt; which will return a new object resembles to
the object &lt;code&gt;proto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, the following code snippet creates a new object called &lt;code&gt;mike&lt;/code&gt;
which inherits from the object &lt;code&gt;robert&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mike&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Williams&amp;#39;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Mike Williams&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that we can override the properties from the prototypal object in the
derived object.  In the example, we overrode &lt;code&gt;firstName&lt;/code&gt; and
&lt;code&gt;lastName&lt;/code&gt;.  Methods from the prototypal object (&lt;code&gt;getFullName()&lt;/code&gt; in
this example) can get the overridden properties through the &lt;code&gt;this&lt;/code&gt;
keyword.&lt;/p&gt;
&lt;p&gt;Overriding properties will not change the prototypal object.  For example, the
&lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; properties in &lt;code&gt;robert&lt;/code&gt; object
remains unchanged.  The result of calling &lt;code&gt;robert.getFullName()&lt;/code&gt; remains
unchanged as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Robert&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Smith&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Robert Smith&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, changes to the prototypal object will be visible to derived objects if
such property is not overridden by the derived object.  For example, if we
change the &lt;code&gt;getFullName&lt;/code&gt; property in the &lt;code&gt;robert&lt;/code&gt; object, then the
result of calling &lt;code&gt;mike.getFullName()&lt;/code&gt; will be changed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Smith, Robert&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Williams, Mike&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can get the prototypal object of an object with
&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: { firstName: &amp;#39;Robert&amp;#39;,&lt;/span&gt;
&lt;span class="c1"&gt;// Prints:   lastName: &amp;#39;Smith&amp;#39;,&lt;/span&gt;
&lt;span class="c1"&gt;// Prints:   getFullName: [Function] }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, we have discussed how to inherit properties and methods from another
object.  However, &lt;code&gt;Object.create()&lt;/code&gt; is a function introduced in ECMAScript
5, which was released in 2011.  How did people use prototypal inheritance before
&lt;code&gt;Object.create()&lt;/code&gt; was introduced?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constructor"&gt;
&lt;h2&gt;Constructor&lt;/h2&gt;
&lt;p&gt;Before the introduction of &lt;code&gt;Object.create()&lt;/code&gt;, the prototypal inheritance
has to be done indirectly through the &lt;code&gt;new&lt;/code&gt; operator and the constructor
function.&lt;/p&gt;
&lt;div class="section" id="new-operator-and-constructor"&gt;
&lt;h3&gt;New Operator and Constructor&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; operator will create a new object whose &lt;em&gt;prototype&lt;/em&gt; is the
object referred by the &lt;code&gt;prototype&lt;/code&gt; property of the constructor function
and pass the newly created object through the implicit &lt;code&gt;this&lt;/code&gt; argument.
Constructor functions are functions which &lt;strong&gt;assume&lt;/strong&gt; that the implicit
&lt;code&gt;this&lt;/code&gt; argument will bind to a newly created object.  These constructors
will initialize the object by setting more properties.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;robert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mike&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Williams&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Robert Smith&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Mike Williams&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following code show that the prototype object of &lt;code&gt;robert&lt;/code&gt; and
&lt;code&gt;mike&lt;/code&gt; is the object referred by &lt;code&gt;Employee.prototype&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To get more insights, let's add a &lt;code&gt;console.log()&lt;/code&gt; in the &lt;code&gt;Employee&lt;/code&gt;
constructor function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lovelace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result shows that the object referred by the implicit &lt;code&gt;this&lt;/code&gt; argument
is using &lt;code&gt;Employee.prototype&lt;/code&gt; as the prototype object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constructor-pitfalls"&gt;
&lt;h3&gt;Constructor Pitfalls&lt;/h3&gt;
&lt;p&gt;We have learned about the &lt;code&gt;new&lt;/code&gt; operator and the construction functions.
However, please be aware that constructor functions are only functions following
a specific convention.  This abstraction will be broken if we don't call these
functions through the &lt;code&gt;new&lt;/code&gt; operator.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Taylor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this code snippet, the implicit &lt;code&gt;this&lt;/code&gt; argument will be bound to the
global host object mentioned earlier, thus the prototype of the object won't be
&lt;code&gt;Employee.prototype&lt;/code&gt;.  Besides, the value of &lt;code&gt;bob&lt;/code&gt; will be
&lt;code&gt;undefiend&lt;/code&gt; becaue the &lt;code&gt;Employee&lt;/code&gt; function does not return any
value.&lt;/p&gt;
&lt;p&gt;Return values of the constructor functions might cause some confusions as well.
If a constructor does not return any value, then the &lt;code&gt;new&lt;/code&gt; expression will
become the newly created object referred by the implicit &lt;code&gt;this&lt;/code&gt; argument
as expected. However, if a constructor returns some value, then the &lt;code&gt;new&lt;/code&gt;
expression will become the returned value.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bad&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Surprise&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: { firstName: &amp;#39;Robert&amp;#39;,&lt;/span&gt;
&lt;span class="c1"&gt;// Prints:   lastName: &amp;#39;Smith&amp;#39; }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bad&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Surprise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This mechanism is designed to give the writer of constructor functions an
opportunity to change the prototypal inheritance hierarchy.  However, I
personally don't use this &lt;em&gt;feature&lt;/em&gt; in my code becuase it is too confusing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="idiom-for-constructor-functions"&gt;
&lt;h3&gt;Idiom for Constructor Functions&lt;/h3&gt;
&lt;p&gt;Now, let's get back to our first code snippet for &lt;code&gt;Employee&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the our first version, we assigned an object to &lt;code&gt;Employee.prototype&lt;/code&gt;.
This is not necessary to create a new object if we are not planning to inherit
from other prototypal objects.  Javascript run-time will create an object and
assign it to the &lt;code&gt;prototype&lt;/code&gt; property of the function object when the
function is &lt;strong&gt;defined&lt;/strong&gt;.  We can add properties to that object directly.  Thus,
the idiomatic implementation for &lt;code&gt;Employee&lt;/code&gt; should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;robert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Robert Smith&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="craft-a-polyfill"&gt;
&lt;h2&gt;Craft a Polyfill&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; operator and the constructor function sound complex.  How could
I implement an &lt;code&gt;Object.create()&lt;/code&gt; in ECMAScript 3?  Here is a simple trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code snippet defines a fucntion &lt;code&gt;f&lt;/code&gt; locally, assign &lt;code&gt;proto&lt;/code&gt; to
&lt;code&gt;prototype&lt;/code&gt; property, and return the object constructed by the &lt;code&gt;new&lt;/code&gt;
operator.&lt;/p&gt;
&lt;p&gt;For example, we can copy the code snippet in the &lt;a class="reference internal" href="#prototypal-inheritance"&gt;Prototypal Inheritance&lt;/a&gt;
section and replace &lt;code&gt;Object.create()&lt;/code&gt; with our version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;robert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;robert&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mike&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Williams&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mike&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Prints: Mike Williams&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It works, but this implementation can be more efficient.  We don't have to
create a new function object &lt;code&gt;f&lt;/code&gt; whenever we invoke &lt;code&gt;create()&lt;/code&gt;.
We can create one instance and reuse it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, we can wrap our polyfill with a check, so that we can use the
built-in implementation if the Javascript run-time supports
&lt;code&gt;Object.create()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, our naive implementation is not fully compliant to the one specified
in ECMAScript 5.  Some features specified in ECMAScript 5 cannot be implemented
with ECMAScript 3 unless some run-time specific hacks are applied.  But, this
polyfill helps us to relate &lt;code&gt;Object.create()&lt;/code&gt; function with the
constructor function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we started from the object literals, properties, and methods. And
then, we introduced the prototypal inheritance with &lt;code&gt;Object.create()&lt;/code&gt;,
which creates an object inheriting from another object.  After having a solid
idea on &lt;code&gt;Object.create()&lt;/code&gt;, we went further to learn the &lt;code&gt;new&lt;/code&gt;
operator and constructor functions in ECMAScript 3.  It was how people write
object-oriented program in ECMAScript in the past.  Finally, we connected two
different methodologies by crafting an &lt;code&gt;Object.create()&lt;/code&gt; polyfill.  Hope
you enjoy this post.  See you next time.&lt;/p&gt;
&lt;/div&gt;
</content><category term="javascript"></category></entry><entry><title>Read Lines from stdin in Node.js</title><link href="http://logan.tw/posts/2015/12/12/read-lines-from-stdin-in-nodejs/" rel="alternate"></link><published>2015-12-12T22:13:00+08:00</published><updated>2015-12-12T22:13:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-12-12:/posts/2015/12/12/read-lines-from-stdin-in-nodejs/</id><summary type="html">&lt;p&gt;It is easy to write a hello world program in Node.js:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, due to the asynchronous nature of Javascript, reading inputs and
writing outputs are less straight-forward.  We have to pass the callback
functions or register event listeners.&lt;/p&gt;
&lt;div class="section" id="first-attempt"&gt;
&lt;h2&gt;First Attempt&lt;/h2&gt;
&lt;p&gt;For example, to read some …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;It is easy to write a hello world program in Node.js:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, due to the asynchronous nature of Javascript, reading inputs and
writing outputs are less straight-forward.  We have to pass the callback
functions or register event listeners.&lt;/p&gt;
&lt;div class="section" id="first-attempt"&gt;
&lt;h2&gt;First Attempt&lt;/h2&gt;
&lt;p&gt;For example, to read some data from &lt;strong&gt;standard input&lt;/strong&gt;, we have to write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, &lt;code&gt;process&lt;/code&gt; is the global hosting object of Javascript
environment in Node.js, and &lt;code&gt;process.stdin&lt;/code&gt; is an instance of
&lt;code&gt;ReadStream&lt;/code&gt;.  The &lt;code&gt;.on()&lt;/code&gt; function call registers a callback for
&lt;code&gt;data&lt;/code&gt; event.  The callback function will be invoked when data are
available.&lt;/p&gt;
&lt;p&gt;If we run this example with &lt;code&gt;node test.js&lt;/code&gt; and type the input manually,
then it will &lt;em&gt;seem&lt;/em&gt; to work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ node test.js
aa
&lt;span class="m"&gt;3&lt;/span&gt;
bbbb
&lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it does not always work.  It is just a coincident to receive a &lt;code&gt;data&lt;/code&gt;
event when we hit the Enter key.  For example, if we pipe the standard input,
then we will see a completely different output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aa\nbbbb\n&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; node test.js
&lt;span class="m"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="corrent-answer"&gt;
&lt;h2&gt;Corrent Answer&lt;/h2&gt;
&lt;p&gt;So, how do we read lines from standard input?  The answer is to wrap
&lt;code&gt;process.stdin&lt;/code&gt; with a &lt;strong&gt;readline&lt;/strong&gt; interface.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;readline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;readline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;terminal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We import &lt;code&gt;readline&lt;/code&gt; module and invoke &lt;code&gt;readline.createInterface()&lt;/code&gt;
to create a wrapper interface.  Besides, we are listening to &lt;code&gt;line&lt;/code&gt; event
instead of &lt;code&gt;data&lt;/code&gt; event now.  There is one pitfall: you might wish to
specify &lt;code&gt;terminal: false&lt;/code&gt;, otherwise some extra output will be printed to
standard output.&lt;/p&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aa\nbbbb\n&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; node test.js
&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you remove &lt;code&gt;terminal: false&lt;/code&gt; from the options, then you will see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aa\nbbbb\n&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; node test.js
aa
&lt;span class="m"&gt;2&lt;/span&gt;
bbbb
&lt;span class="m"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this post, we introduced the basic usage of &lt;a class="reference external" href="https://nodejs.org/api/stream.html"&gt;Stream&lt;/a&gt; and &lt;a class="reference external" href="https://nodejs.org/api/readline.html"&gt;Readline&lt;/a&gt; module in
Node.js.  Check the links in the &lt;a class="reference internal" href="#reference"&gt;Reference&lt;/a&gt; section for further information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nodejs.org/api/process.html"&gt;Node API: Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nodejs.org/api/stream.html"&gt;Node API: Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nodejs.org/api/readline.html"&gt;Node API: Readline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="node"></category><category term="javascript"></category></entry><entry><title>Browserify</title><link href="http://logan.tw/posts/2015/12/05/browserify/" rel="alternate"></link><published>2015-12-05T19:30:00+08:00</published><updated>2015-12-05T19:30:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-12-05:/posts/2015/12/05/browserify/</id><summary type="html">&lt;p&gt;It is common to organize the code in several modules when we are developing
Javascript applications.  In &lt;a class="reference external" href="https://nodejs.org"&gt;Node.js&lt;/a&gt; ecosystem, we can import a module with
the &lt;code&gt;require()&lt;/code&gt; function and export symbols by adding them to the
&lt;code&gt;module.exports&lt;/code&gt; object.  On the other hand, ES2015 adds &lt;code&gt;import&lt;/code&gt;
statements and &lt;code&gt;export …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is common to organize the code in several modules when we are developing
Javascript applications.  In &lt;a class="reference external" href="https://nodejs.org"&gt;Node.js&lt;/a&gt; ecosystem, we can import a module with
the &lt;code&gt;require()&lt;/code&gt; function and export symbols by adding them to the
&lt;code&gt;module.exports&lt;/code&gt; object.  On the other hand, ES2015 adds &lt;code&gt;import&lt;/code&gt;
statements and &lt;code&gt;export&lt;/code&gt; keywords.  But unfortunately, both of these
techniques are not supported by any browsers.  To deploy our Javascript
applications through browsers, we have to bundle our Javascript source code with
&lt;a class="reference external" href="http://browserify.org/"&gt;Browserify&lt;/a&gt; in advance.&lt;/p&gt;
&lt;div class="section" id="bundling-modules-into-one-file"&gt;
&lt;h2&gt;Bundling Modules into One File&lt;/h2&gt;
&lt;p&gt;We can install Browserify with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install -g browserify
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, we can bundle Javascript source files with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ browserify -o &lt;span class="o"&gt;[&lt;/span&gt;output.js&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;mainapp.js&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;In this example, we separated our code into three modules: &lt;code&gt;utils.js&lt;/code&gt;,
&lt;code&gt;posts.js&lt;/code&gt;, and &lt;cite&gt;app.js&lt;/cite&gt;, and we would like to bundle them into one
&lt;code&gt;output.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is the content of &lt;code&gt;utils.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the content of &lt;code&gt;posts.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numVisited&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numVisited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numVisited&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numVisited&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numVisited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compareByTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the content of &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;compareByTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./utils&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;findMin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;findMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;leastPopular&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mostPopular&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Least Popular:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leastPopular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Most Popular:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mostPopular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maxTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;First in Alphabetical Order:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;minTitle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Last in Alphabetical Order:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;maxTitle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can bundle Javascript source files with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ browserify -o output.js app.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, we can run &lt;code&gt;output.js&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ node output.js
Least Popular: c
Most Popular: d
First in Alphabetical Order: a
Last in Alphabetical Order: e
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also create &lt;code&gt;index.html&lt;/code&gt; to include &lt;code&gt;output.js&lt;/code&gt; and test
the bundled output in the browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="source-map"&gt;
&lt;h2&gt;Source Map&lt;/h2&gt;
&lt;p&gt;Bundling several Javascript modules into one makes it more difficult to debug. A
developer has to spend time finding the corresponding module.  &lt;strong&gt;Source Map&lt;/strong&gt;
was created to map the processed Javascript file back to their source Javascript
files.  To generate source map with &lt;code&gt;browserify&lt;/code&gt;, specify &lt;code&gt;-d&lt;/code&gt;
option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ browserify -d -o output.js app.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, open the debugger in your favorite browser (remember to enable source
map support in your browser.)&lt;/p&gt;
&lt;p&gt;For example, if you add &lt;code&gt;undefined&lt;/code&gt; to the end of &lt;code&gt;array&lt;/code&gt;, then you
will see the differece:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// CHANGED&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ecmascript-2015"&gt;
&lt;h2&gt;ECMAScript 2015&lt;/h2&gt;
&lt;p&gt;To bundle ECMAScript 2015 source files, we have to transform them with
&lt;code&gt;babelify&lt;/code&gt; (the Babel transpiler integration).&lt;/p&gt;
&lt;p&gt;First, we have to install &lt;code&gt;babelify&lt;/code&gt; and &lt;code&gt;babel-preset-es2015&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install -g browserify babelify babel-preset-es2015
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, pass extra &lt;code&gt;-t&lt;/code&gt; option when we are bundling source files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ browserify -o output.js -t &lt;span class="o"&gt;[&lt;/span&gt; babelify --presets &lt;span class="o"&gt;[&lt;/span&gt; es2015 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; app.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, here is the content of &lt;code&gt;utils.js&lt;/code&gt; (using ES2015):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;lessThan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the content of &lt;code&gt;posts.js&lt;/code&gt; (using ES2015):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numVisited&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numVisited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numVisited&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numVisited&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numVisited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the content of &lt;code&gt;app.js&lt;/code&gt; (using ES2015):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./utils&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;leastPopular&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mostPopular&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByNumVisited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Least Popular:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leastPopular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Most Popular:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mostPopular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maxTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compareByTitle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;First in Alphabetical Order:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;minTitle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Last in Alp`habetical Order:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;maxTitle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bundle source files with &lt;code&gt;browserify&lt;/code&gt; command and &lt;code&gt;babelify&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ browserify -o output.js -t &lt;span class="o"&gt;[&lt;/span&gt; babelify --presets &lt;span class="o"&gt;[&lt;/span&gt; es2015 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; app.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, run the output script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ node output.js
Least Popular: c
Most Popular: d
First in Alphabetical Order: a
Last in Alphabetical Order: e
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;In this post, we introduced &lt;code&gt;Browserify&lt;/code&gt; which is able to bundle multiple
Javascript source files into one output file.  We also mentioned the concept of
source map and ES2015 transformation.  Hope you enjoy this article.&lt;/p&gt;
&lt;/div&gt;
</content><category term="babel"></category><category term="es2015"></category><category term="es6"></category><category term="javascript"></category></entry><entry><title>Run ES2015 with Babel 6</title><link href="http://logan.tw/posts/2015/11/29/run-es2015-with-babel-6/" rel="alternate"></link><published>2015-11-29T18:45:00+08:00</published><updated>2015-11-29T18:45:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-11-29:/posts/2015/11/29/run-es2015-with-babel-6/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.ecma-international.org/ecma-262/6.0/"&gt;ECMAScript 2015&lt;/a&gt; (also known as ES2015 or informally ES6) is the latest
standard for JavaScript.  It has been released for a while.  However, &lt;a class="reference external" href="https://developers.google.com/v8/"&gt;V8&lt;/a&gt;, the
JavaScript engine for &lt;a class="reference external" href="https://nodejs.org"&gt;Node.js&lt;/a&gt;, has only limited &lt;a class="reference external" href="http://www.ecma-international.org/ecma-262/6.0/"&gt;ES2015&lt;/a&gt; support.  As of
writing, according to &lt;a class="reference external" href="https://kangax.github.io/compat-table/es6/"&gt;ECMAScript 6 compatibility table&lt;/a&gt;, the feature coverage
of each Javascript …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.ecma-international.org/ecma-262/6.0/"&gt;ECMAScript 2015&lt;/a&gt; (also known as ES2015 or informally ES6) is the latest
standard for JavaScript.  It has been released for a while.  However, &lt;a class="reference external" href="https://developers.google.com/v8/"&gt;V8&lt;/a&gt;, the
JavaScript engine for &lt;a class="reference external" href="https://nodejs.org"&gt;Node.js&lt;/a&gt;, has only limited &lt;a class="reference external" href="http://www.ecma-international.org/ecma-262/6.0/"&gt;ES2015&lt;/a&gt; support.  As of
writing, according to &lt;a class="reference external" href="https://kangax.github.io/compat-table/es6/"&gt;ECMAScript 6 compatibility table&lt;/a&gt;, the feature coverage
of each Javascript engines are:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="74%" /&gt;
&lt;col width="26%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Browser&lt;/th&gt;
&lt;th class="head"&gt;Coverage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Edge 13 (ChakraCore)&lt;/td&gt;
&lt;td&gt;84%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;WebKit (JavaScriptCore)&lt;/td&gt;
&lt;td&gt;79%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Firefox 44 &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;74%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Chrome 49 (V8 Engine)&lt;/td&gt;
&lt;td&gt;69%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Node 4.0&lt;/td&gt;
&lt;td&gt;53%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Node 5.0&lt;/td&gt;
&lt;td&gt;59%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Babel&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;71%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Fortunately, we can translate ES2015 to ES5 (previous version) with &lt;a class="reference external" href="https://babeljs.io/"&gt;Babel&lt;/a&gt;.
There are lots of tutorials on the web.  However, after the release of
Babel 6, most of them are outdated.  In this post, I am going to write down
3 methods to run ES2015 with Babel.&lt;/p&gt;
&lt;div class="section" id="do-you-need-babel"&gt;
&lt;h2&gt;Do You Need Babel?&lt;/h2&gt;
&lt;p&gt;Some ES2015 features have been implemented in Node.js already:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Block scoping (&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Collections (&lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;WeakMap&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, and &lt;code&gt;WeakSet&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Typed arrays&lt;/li&gt;
&lt;li&gt;Generators (&lt;code&gt;function*&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Binary and octal literals (e.g. &lt;code&gt;0b0100&lt;/code&gt; and &lt;code&gt;033&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Object literal extensions&lt;/li&gt;
&lt;li&gt;Promise&lt;/li&gt;
&lt;li&gt;Template strings&lt;/li&gt;
&lt;li&gt;... etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the full list in &lt;a class="reference external" href="https://nodejs.org/en/docs/es6/"&gt;ECMAScript 2015 (ES6) in Node.js&lt;/a&gt;.  They are
working out-of-box and having native support from V8 developers.  If you only
need these features, you can simply upgrade to latest Node.js.&lt;/p&gt;
&lt;p&gt;If you wish to use other ES2015 features (e.g. &lt;strong&gt;module&lt;/strong&gt; system) or you
can't upgrade to latest Node.js, then you can convert your ES2015 source
code with &lt;a class="reference external" href="https://babeljs.io/"&gt;Babel&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="supported-features"&gt;
&lt;h2&gt;Supported Features&lt;/h2&gt;
&lt;p&gt;Babel 6 covers following ES2015 features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Block scoping (&lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Destructuring&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for-of&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;Binary and octal literals&lt;/li&gt;
&lt;li&gt;Modules (compile to CommonJS)&lt;/li&gt;
&lt;li&gt;Template strings&lt;/li&gt;
&lt;li&gt;... etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check &lt;a class="reference external" href="https://babeljs.io/docs/learn-es2015/"&gt;Learn ES2015&lt;/a&gt; or &lt;a class="reference external" href="https://babeljs.io/docs/plugins/preset-es2015/"&gt;ES2015 Preset&lt;/a&gt; for more details.  However,
you should aware that some features are still missing from Babel 6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-use-babel"&gt;
&lt;h2&gt;How to Use Babel?&lt;/h2&gt;
&lt;p&gt;There are 3 methods to run ES2015 with &lt;a class="reference external" href="https://babeljs.io/"&gt;Babel&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Convert ES2015 source code to ES5 with &lt;code&gt;babel&lt;/code&gt; command, and run the
output files with &lt;code&gt;node&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Run ES2015 source code with &lt;code&gt;babel-node&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;babel-register&lt;/code&gt; as a &lt;strong&gt;require hook&lt;/strong&gt; to invoke Babel transpiler.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the next section, we will discuss the first and the second method, which
utilize the &lt;code&gt;babel-cli&lt;/code&gt; package.  After that, we will cover the third
method at the end of this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-babel-command-line-tools"&gt;
&lt;h2&gt;Using Babel Command Line Tools&lt;/h2&gt;
&lt;p&gt;Before we can start, we have to install &lt;code&gt;babel-cli&lt;/code&gt; and
&lt;code&gt;babel-preset-es2015&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install babel-cli babel-preset-es2015
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;babel-cli&lt;/code&gt; package contains two important commands:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;babel&lt;/code&gt; -- A transpiler which transforms the input source code.  If
&lt;code&gt;es2015&lt;/code&gt; preset is specified, then Babel transpiler will convert
ES2015 source code into ES5.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;babel-node&lt;/code&gt; -- An interpreter which will run the transpilation
on-the-fly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And &lt;code&gt;babel-preset-es2015&lt;/code&gt; package consists of several Babel
transformation plug-ins for ES2015.&lt;/p&gt;
&lt;p&gt;For example, given an ES2015 source file &lt;code&gt;main.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Hello, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// template literal&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can convert it with &lt;code&gt;babel&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ babel --presets es2015 -o output.js main.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the generated output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// template literal&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great!  The template literal is translated.&lt;/p&gt;
&lt;p&gt;Finally, we can run the output script with &lt;code&gt;node&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ node output.js
Hello, world!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can deploy the output files to the production environment which does not have
Babel.  The output files can be interpreted by oridinary &lt;code&gt;node&lt;/code&gt; command
without problems.&lt;/p&gt;
&lt;div class="section" id="run-es2015-with-babel-node"&gt;
&lt;h3&gt;Run ES2015 with babel-node&lt;/h3&gt;
&lt;p&gt;If you prefer not to create intermediate files, i.e. &lt;code&gt;output.js&lt;/code&gt; in our
example, you can run ES2015 source code with &lt;code&gt;babel-node&lt;/code&gt; directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ babel-node --presets es2015 main.js
Hello, world!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="babel-configuration-file"&gt;
&lt;h3&gt;Babel Configuration File&lt;/h3&gt;
&lt;p&gt;It seems to be bothersome to pass the &lt;code&gt;--presets&lt;/code&gt; argument around.  We
can create a file named &lt;code&gt;.babelrc&lt;/code&gt; with following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;presets&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;es2015&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can omit the &lt;code&gt;--presets&lt;/code&gt; option and simply use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ babel -o output.js main.js
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ babel-node main.js
Hello, world!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="babel-require-hook"&gt;
&lt;h2&gt;Babel Require Hook&lt;/h2&gt;
&lt;p&gt;The third method is to hook Babel transpiler with the require hook from
&lt;code&gt;babel-register&lt;/code&gt; package.  We don't need &lt;code&gt;babel-cli&lt;/code&gt; package when
we are using &lt;code&gt;babel-register&lt;/code&gt;.  The &lt;strong&gt;require hook&lt;/strong&gt; will utilize Babel
API directly.  Here are the instructions to setup the require hook.&lt;/p&gt;
&lt;p&gt;First, install &lt;code&gt;babel-register&lt;/code&gt; and &lt;code&gt;babel-preset-es2015&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install babel-register babel-preset-es2015
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, create an invoke stub to setup &lt;code&gt;babel-register&lt;/code&gt; and import our
module.  Let's call it &lt;code&gt;run.js&lt;/code&gt; in our example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;babel-register&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;
  &lt;span class="nx"&gt;presets&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;es2015&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can run our program with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ node run.js
Hello, world!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah!  It works.  However, please be aware that the invoke stub itself is not
transpiled, thus we have to write the invoke stub in ES5.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;ES2015 is the latest Javascript standard and Babel is a transpiler which can
convert ES2015 to the widely supported ES5.  In this post, we have covered
three different methods to run ES2015.  Hope you enjoy this article and happy
hacking with ES2015.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla"&gt;ECMAScript 6 support in Mozilla&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="babel"></category><category term="es2015"></category><category term="es6"></category><category term="javascript"></category></entry><entry><title>Bash Signal Handler and Traps</title><link href="http://logan.tw/posts/2015/11/16/bash-signal-handler-and-traps/" rel="alternate"></link><published>2015-11-16T01:25:00+08:00</published><updated>2015-11-16T01:25:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-11-16:/posts/2015/11/16/bash-signal-handler-and-traps/</id><summary type="html">&lt;p&gt;I would like to launch &lt;strong&gt;ssh-agent&lt;/strong&gt; and add my private key at the beginning of
my shell script and stop it before leaving the shell script.  How do I
guarantee that &lt;strong&gt;ssh-agent&lt;/strong&gt; will be shutted down properly?  What will happen
if the user press &lt;code&gt;Ctrl-C&lt;/code&gt; or even kill the shell …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I would like to launch &lt;strong&gt;ssh-agent&lt;/strong&gt; and add my private key at the beginning of
my shell script and stop it before leaving the shell script.  How do I
guarantee that &lt;strong&gt;ssh-agent&lt;/strong&gt; will be shutted down properly?  What will happen
if the user press &lt;code&gt;Ctrl-C&lt;/code&gt; or even kill the shell script?&lt;/p&gt;
&lt;p&gt;The answer to this question is the &lt;code&gt;trap&lt;/code&gt; built-in utility from the
&lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html"&gt;shell command language&lt;/a&gt;.  It allows the programmer to specify:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Signal handlers&lt;/li&gt;
&lt;li&gt;Deferred tasks -- Defer the tasks that should be executed before leaving
the shell script (no matter it is interrupted or exitted normally.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this post, I would like to give a brief introduction to &lt;code&gt;trap&lt;/code&gt;
built-in.&lt;/p&gt;
&lt;div class="section" id="motivating-example"&gt;
&lt;h2&gt;Motivating Example&lt;/h2&gt;
&lt;p&gt;The syntax for &lt;code&gt;trap&lt;/code&gt; built-in is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;action&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;condition&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;action&lt;/strong&gt; will be executed (via &lt;code&gt;eval&lt;/code&gt;) when the specified
&lt;em&gt;condition&lt;/em&gt; occurred.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;condition&lt;/strong&gt; can be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;EXIT&lt;/code&gt; -- The &lt;em&gt;action&lt;/em&gt; will be executed whenever the shell script stops
(no matter it is interrupted or leaving normally.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INT&lt;/code&gt; -- The &lt;em&gt;action&lt;/em&gt; will be executed whenever the user pressed
&lt;code&gt;Ctrl-C&lt;/code&gt; or the process received &lt;code&gt;SIGINT&lt;/code&gt; signal.&lt;/li&gt;
&lt;li&gt;Other signal names defined in &lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, &lt;code&gt;int.sh&lt;/code&gt; contains following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;User abort\&amp;quot;; exit 1&amp;quot;&lt;/span&gt; INT
sleep &lt;span class="m"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the script and press &lt;code&gt;Ctrl-C&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ chmod +x int.sh
$ ./int.sh
&lt;span class="c1"&gt;# ... press ctrl-c ...&lt;/span&gt;
^CUser abort
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compare with another case: run the script and wait for 10 seconds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./int.sh
&lt;span class="c1"&gt;# ... wait for 10 seconds (no output) ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's look at another example.  The following is the code listing of
&lt;code&gt;defer.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;EXIT\&amp;quot;&amp;quot;&lt;/span&gt; EXIT    &lt;span class="c1"&gt;# &amp;lt;-- Changed to EXIT&lt;/span&gt;
sleep &lt;span class="m"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can notice that &lt;code&gt;echo &amp;quot;EXIT&amp;quot;&lt;/code&gt; will always be executed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./defer.sh
&lt;span class="c1"&gt;# ... press ctrl-c ...&lt;/span&gt;
^CEXIT

$ ./defer.sh
&lt;span class="c1"&gt;# ... wait for 10 seconds ...&lt;/span&gt;
EXIT
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To wrap up:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;To perform a task when an interrupt occurs, register a trap with
&lt;code&gt;INT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To perform a cleanup task, register a trap with &lt;code&gt;EXIT&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh-agent"&gt;
&lt;h2&gt;SSH Agent&lt;/h2&gt;
&lt;p&gt;OK.  Now, let's work on a real world example: start and stop a SSH agent.
To start a SSH agent and export the environment variables, we have to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class="k"&gt;)&lt;/span&gt;
Agent pid &lt;span class="m"&gt;10176&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the other hand, to stop a SSH agent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ssh-agent -k&lt;span class="k"&gt;)&lt;/span&gt;
Agent pid &lt;span class="m"&gt;10176&lt;/span&gt; killed
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can combine them together in the shell script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

kill_ssh_agent &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ssh-agent -k&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Register a trap to stop the ssh agent.&lt;/span&gt;
&lt;span class="nb"&gt;trap&lt;/span&gt; kill_ssh_agent EXIT

&lt;span class="c1"&gt;# Start the ssh agent.&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Load private key to ssh agent.&lt;/span&gt;
ssh-add ~/.ssh/id_rsa

&lt;span class="c1"&gt;# ... other commands to run ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try to run the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./run.sh
Agent pid &lt;span class="m"&gt;10248&lt;/span&gt;
Enter passphrase &lt;span class="k"&gt;for&lt;/span&gt; /home/username/.ssh/id_rsa:
Identity added: /home/username/.ssh/id_rsa &lt;span class="o"&gt;(&lt;/span&gt;/home/username/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;
Agent pid &lt;span class="m"&gt;10248&lt;/span&gt; killed
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great!  Everything works as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To sum up, we introduced the basic usage of &lt;code&gt;trap&lt;/code&gt; built-in in this post.
We mentioned two different trap conditions: &lt;code&gt;INT&lt;/code&gt; and &lt;code&gt;EXIT&lt;/code&gt;.  The
former will trigger the action when the shell script is interrupted, and the
later will trigger the action before leaving the shell script.  At last, we
gave a real world example on &lt;code&gt;ssh-agent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hope you enjoy this post.  See you then.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/"&gt;The Open Group Base Specifications Issue 7&lt;/a&gt; (IEEE Std 1003.1, 2013 Edition),
Volume 3 Shell &amp;amp; Utilities, &lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html"&gt;Shell Command Language&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Shell Command Language, &lt;a class="reference external" href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#trap"&gt;Special Built-in Utilities: trap&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="bash"></category><category term="shell"></category></entry><entry><title>Autossh and Systemd Service</title><link href="http://logan.tw/posts/2015/11/15/autossh-and-systemd-service/" rel="alternate"></link><published>2015-11-15T22:35:00+08:00</published><updated>2015-11-15T22:35:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-11-15:/posts/2015/11/15/autossh-and-systemd-service/</id><summary type="html">&lt;p&gt;Several months ago, I wrote a &lt;a class="reference external" href="http://logan.tw/posts/2014/12/15/autossh-and-ubuntu-upstart-daemon/"&gt;post&lt;/a&gt; to describe how to setup an &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; daemon
with &lt;a class="reference external" href="http://upstart.ubuntu.com/"&gt;upstart&lt;/a&gt;.  Since Ubuntu 15.04 has switched to &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;, I would like to do
the same with &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;.  I will give a brief introduction to &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; in this
post.&lt;/p&gt;
&lt;div class="section" id="systemd-unit-file"&gt;
&lt;h2&gt;Systemd Unit File&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;Systemd&lt;/a&gt; services …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Several months ago, I wrote a &lt;a class="reference external" href="http://logan.tw/posts/2014/12/15/autossh-and-ubuntu-upstart-daemon/"&gt;post&lt;/a&gt; to describe how to setup an &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; daemon
with &lt;a class="reference external" href="http://upstart.ubuntu.com/"&gt;upstart&lt;/a&gt;.  Since Ubuntu 15.04 has switched to &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;, I would like to do
the same with &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;.  I will give a brief introduction to &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; in this
post.&lt;/p&gt;
&lt;div class="section" id="systemd-unit-file"&gt;
&lt;h2&gt;Systemd Unit File&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;Systemd&lt;/a&gt; services are configured by &lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;unit files&lt;/a&gt;.  By convention, these files
use &lt;code&gt;.service&lt;/code&gt; as their file name extension.&lt;/p&gt;
&lt;p&gt;On Ubuntu, there are two directories for &lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;unit files&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;/lib/systemd&lt;/code&gt; -- This is the directory for unit files provided by the
installed packages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/systemd&lt;/code&gt; -- This is the directory for the administrators to
create, override, modify or mask the unit files in &lt;code&gt;/lib/systemd&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although the autossh package does not come with any unit file, we can create
one in &lt;code&gt;/lib/systemd&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /lib/systemd/system/autossh.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the content of the unit file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;autossh&lt;/span&gt;
&lt;span class="na"&gt;Wants&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network-online.target&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network-online.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;simple&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;autossh&lt;/span&gt;
&lt;span class="na"&gt;EnvironmentFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/etc/default/autossh&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/autossh $SSH_OPTIONS&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;
&lt;span class="na"&gt;RestartSec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;60&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some explanations to the options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Description=&lt;/strong&gt; contains some words that can describe the service.  This
will show up in the logs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Wants=&lt;/strong&gt; specifies the dependencies of the services.  If this service is
activated, &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; will also activate the listed services.&lt;/p&gt;
&lt;p&gt;In our case, we would like to make sure that the network interface is ready,
thus we specified &lt;code&gt;network-online.target&lt;/code&gt; &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;After=&lt;/strong&gt; specifies the order to launch the service.  With the &lt;code&gt;After&lt;/code&gt;
option, &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; will only launch the service after the activation of listed
services.  Notice that this option is orthogonal to &lt;code&gt;Wants&lt;/code&gt; (or
&lt;code&gt;Requires&lt;/code&gt;.)  If &lt;code&gt;After&lt;/code&gt; is not specified, &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; may launch
the dependencies simultaneously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Type=&lt;/strong&gt; specifies the type of the service.  There are several options:
simple, fork, oneshot, and etc.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A &lt;strong&gt;simple&lt;/strong&gt; service will contain one long running process.  The process
will not stop unless we kill the service.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;fork&lt;/strong&gt; service means that the &lt;code&gt;ExecStart&lt;/code&gt; command will fork a
subprocess and return immediately.  In the other words, the command will
manage the process by themselves.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;oneshot&lt;/strong&gt; service will launch a new process whenever an event triggers
this service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;User=&lt;/strong&gt; specifies the user as whom the service process is run.  By default,
the process is run as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;EnvironmentFile=&lt;/strong&gt; specifies the path to an environment file, which
contains the environment variables for the service process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;ExecStart=&lt;/strong&gt; specifies the command to launch the service.  We have to
specify the full path to the executable to be executed.&lt;/p&gt;
&lt;p&gt;Notice that there are two &lt;code&gt;ExecStart&lt;/code&gt; in our unit file.  They are not
typos.  In order to allow this unit file to be included by another unit
file, we have to clear &lt;code&gt;ExecStart&lt;/code&gt; before specifying a new command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;WantedBy=&lt;/strong&gt; specifies the &lt;em&gt;init stage&lt;/em&gt; to launch the service (if the service
is enabled.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, we can create a soft link in &lt;code&gt;/etc/systemd/system&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ln -s /lib/systemd/system/autossh.service &lt;span class="se"&gt;\&lt;/span&gt;
      /etc/systemd/system/autossh.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="environment-file"&gt;
&lt;h2&gt;Environment File&lt;/h2&gt;
&lt;p&gt;Did you notice that there is a variable &lt;code&gt;$SSH_OPTIONS&lt;/code&gt; in the
&lt;code&gt;ExecStart&lt;/code&gt; option above?  It will be substituted by the &lt;strong&gt;environment
variable&lt;/strong&gt; from the file specified by &lt;code&gt;EnvironmentFile&lt;/code&gt;.  Environment
files are the files which contain the configurations which should be passed to
the service.&lt;/p&gt;
&lt;p&gt;Let's create an environment file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /etc/default/autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The environment file resembles to a Bash script.  Here's the example for our
&lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;AUTOSSH_POLL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="nv"&gt;AUTOSSH_FIRST_POLL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="nv"&gt;AUTOSSH_GATETIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;AUTOSSH_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;22000&lt;/span&gt;
&lt;span class="nv"&gt;SSH_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-N -R 2222:localhost:22 example.com -i /home/autossh/.ssh/id_rsa&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can find more options by reading &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; man pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="start-the-service"&gt;
&lt;h2&gt;Start the Service&lt;/h2&gt;
&lt;p&gt;Before we can start our service, we have to ask &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; to reload all unit
files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl daemon-reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can start &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl start autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, we can check the status with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl status autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this command, you should be able to see the following output (if the unit
file is correct):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* autossh.service - autossh
   Loaded: loaded (/lib/systemd/system/autossh.service; enabled;
vendor preset: enabled)
   Active: active (running) since Sun 2015-11-15 22:51:25 CST; 1min 1s ago
 Main PID: 14382 (autossh)
   CGroup: /system.slice/autossh.service
           |-14382 /usr/lib/autossh/autossh -N -R 8022:localhost:22 ....
           `-14385 /usr/bin/ssh -L ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are some problems, check &lt;code&gt;/var/log/syslog&lt;/code&gt; for more details.&lt;/p&gt;
&lt;p&gt;BTW, to stop the service, we can use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl stop autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="launch-service-at-boot-time"&gt;
&lt;h2&gt;Launch Service at Boot Time&lt;/h2&gt;
&lt;p&gt;OK.  If everything goes well, then we may ask &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; to launch our service
during the boot time.  To do so, we have to &lt;strong&gt;enable&lt;/strong&gt; the service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, I have covered some basic concept of &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; unit files and
basic commands to control &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reload unit files with &lt;code&gt;sudo systemctl daemon-reload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start/stop service with: &lt;code&gt;sudo systemctl [start/stop] [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check service status with: &lt;code&gt;sudo systemctl status [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Register/unregister the service for the boot time with:
&lt;code&gt;sudo systemctl [enable/disable] [name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope you enjoy this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Systemd"&gt;Wikipedia: systemd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Systemd"&gt;Arch Linux wiki: systemd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.ubuntu.com/SystemdForUpstartUsers"&gt;Ubuntu wiki: systemd for upstart users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/chap-Managing_Services_with_systemd.html"&gt;RedHat RHEL7: System Administrator's Guide: Chapter 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/"&gt;Systemd Manuals&lt;/a&gt;: &lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;systemd.unit&lt;/a&gt; and &lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/systemd.service.html"&gt;systemd.service&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/"&gt;Running Services After the Network is up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It is non-trivial to write an unit file for the service that requires
network connections, read &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/"&gt;Running Services After the Network is up&lt;/a&gt; for
more details.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="systemd"></category><category term="autossh"></category><category term="ssh"></category></entry><entry><title>Fix Nautilus Video Thumbnails</title><link href="http://logan.tw/posts/2015/11/08/fix-nautilus-video-thumbnails/" rel="alternate"></link><published>2015-11-08T15:19:00+08:00</published><updated>2015-11-08T15:19:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-11-08:/posts/2015/11/08/fix-nautilus-video-thumbnails/</id><summary type="html">&lt;p&gt;I have a clean &lt;a class="reference external" href="http://ubuntu.com"&gt;Ubuntu&lt;/a&gt; 15.10 installation these days.  However, I noticed
that video thumbnails (or previews) do not show up in Gnome &lt;a class="reference external" href="https://wiki.gnome.org/Apps/Nautilus"&gt;Nautilus&lt;/a&gt;:&lt;/p&gt;
&lt;img alt="Nautilus without video preview thumbnails" src="http://logan.tw/static/images/nautilus-no-video-thumbnail.png" /&gt;
&lt;p&gt;I prefer thumbnails to icons.  Besides, I remember that &lt;a class="reference external" href="https://wiki.gnome.org/Apps/Nautilus"&gt;Nautilus&lt;/a&gt; will generate
a thumbnail for each video in &lt;a class="reference external" href="http://ubuntu.com"&gt;Ubuntu&lt;/a&gt; 14.04.  Thus, I took some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a clean &lt;a class="reference external" href="http://ubuntu.com"&gt;Ubuntu&lt;/a&gt; 15.10 installation these days.  However, I noticed
that video thumbnails (or previews) do not show up in Gnome &lt;a class="reference external" href="https://wiki.gnome.org/Apps/Nautilus"&gt;Nautilus&lt;/a&gt;:&lt;/p&gt;
&lt;img alt="Nautilus without video preview thumbnails" src="http://logan.tw/static/images/nautilus-no-video-thumbnail.png" /&gt;
&lt;p&gt;I prefer thumbnails to icons.  Besides, I remember that &lt;a class="reference external" href="https://wiki.gnome.org/Apps/Nautilus"&gt;Nautilus&lt;/a&gt; will generate
a thumbnail for each video in &lt;a class="reference external" href="http://ubuntu.com"&gt;Ubuntu&lt;/a&gt; 14.04.  Thus, I took some time to
look for the reason.&lt;/p&gt;
&lt;p&gt;After trials and errors, I found &lt;code&gt;gstreamer1.0-libav&lt;/code&gt; is the package in
question.  It is not installed by default.  We can install it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install gstreamer1.0-libav
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, we should clean the thumbnail cache; otherwise &lt;a class="reference external" href="https://wiki.gnome.org/Apps/Nautilus"&gt;Nautilus&lt;/a&gt; won't
regenerate thumbnails for videos.  To clean the thumbnail cache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -r ~/.cache/thumbnails/fail
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, refresh &lt;a class="reference external" href="https://wiki.gnome.org/Apps/Nautilus"&gt;Nautilus&lt;/a&gt; with &lt;code&gt;Ctrl-R&lt;/code&gt;.  We should be able to see the
thumbnails now:&lt;/p&gt;
&lt;img alt="Nautilus with video preview thumbnails" src="http://logan.tw/static/images/nautilus-video-thumbnail.png" /&gt;
&lt;p&gt;If you still can't see thumbnails, it is possible that your videos are encoded
by less popular codecs.  Installing &lt;code&gt;gstreamer1.0-plugins-ugly&lt;/code&gt; or
&lt;code&gt;gstreamer1.0-plugins-bad&lt;/code&gt; might help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install gstreamer1.0-plugins-ugly
$ sudo apt-get install gstreamer1.0-plugins-bad
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, please notice that &lt;code&gt;gstreamer1.0-plugins-ugly&lt;/code&gt; might be covered
by more restrict licenses or patents.  And &lt;code&gt;gstreamer1.0-plugins-bad&lt;/code&gt;
might have worse quality, e.g. lack of code review, documentations, tests, and
etc.  Read &lt;a class="reference external" href="http://gstreamer.freedesktop.org/documentation/splitup.html"&gt;GStreamer plug-ins splitup&lt;/a&gt; for more details.&lt;/p&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://gstreamer.freedesktop.org/"&gt;GStreamer&lt;/a&gt; - open source media framework&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://gstreamer.freedesktop.org/documentation/splitup.html"&gt;GStreamer plug-ins splitup&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="ubuntu"></category><category term="gnome"></category></entry><entry><title>Debug Multithreaded Program with GDB</title><link href="http://logan.tw/posts/2015/11/01/debug-multithreaded-program-with-gdb/" rel="alternate"></link><published>2015-11-01T20:37:00+08:00</published><updated>2015-11-01T20:37:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-11-01:/posts/2015/11/01/debug-multithreaded-program-with-gdb/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.gnu.org/software/gdb"&gt;GDB&lt;/a&gt; is a powerful debugger.  Without a doubt, we can debug multi-threaded
programs with &lt;a class="reference external" href="http://www.gnu.org/software/gdb"&gt;gdb&lt;/a&gt;.  In particular, we can switch between threads, inspect
the stack, and dump the registers.  In this post, I would like to start with
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dining_philosophers_problem"&gt;Dining Philosophers Problem&lt;/a&gt;, which was first coined by
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra"&gt;Edsger Dijkstra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.gnu.org/software/gdb"&gt;GDB&lt;/a&gt; is a powerful debugger.  Without a doubt, we can debug multi-threaded
programs with &lt;a class="reference external" href="http://www.gnu.org/software/gdb"&gt;gdb&lt;/a&gt;.  In particular, we can switch between threads, inspect
the stack, and dump the registers.  In this post, I would like to start with
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dining_philosophers_problem"&gt;Dining Philosophers Problem&lt;/a&gt;, which was first coined by
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra"&gt;Edsger Dijkstra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the problem statement for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dining_philosophers_problem"&gt;Dining Philosophers Problem&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Several philosophers are sitting in a round table.  There is exactly one
fork between each pair of neighboring philosophers.  Only if a philosopher
grabs both forks at his left and right, can he start eating.  Can we
guarantee that all of the philosophers can finish their dishes eventually?&lt;/blockquote&gt;
&lt;p&gt;This is the first attempt to solve the problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;NUM_PHILOSOPHERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt; &lt;span class="n"&gt;forks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NUM_PHILOSOPHERS&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;NUM_PHILOSOPHERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Grab the forks.&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;lock_guard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;first_fork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;this_thread&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;sleep_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;lock_guard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;second_fork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Philosopher %u is eating.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;this_thread&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;sleep_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;philosophers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUM_PHILOSOPHERS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NUM_PHILOSOPHERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;philosophers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NUM_PHILOSOPHERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;philosophers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see, there are two &lt;code&gt;std::lock_guard&lt;/code&gt; in &lt;code&gt;eat()&lt;/code&gt;, which
guarantees that the dining philosopher has grabbed two forks.  Besides, the
forks will be returned to the table after the philosopher finishes his dish.&lt;/p&gt;
&lt;p&gt;Let's compile this code snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ g++ -std&lt;span class="o"&gt;=&lt;/span&gt;c++11 -pthread philosopher.cpp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, with high probability, the program will hang forever:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./a.out
^C
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's debug it with &lt;a class="reference external" href="http://www.gnu.org/software/gdb"&gt;gdb&lt;/a&gt;.  First, we have to re-compile the program with
&lt;code&gt;-g&lt;/code&gt; option.  Second, we have to load the program with &lt;a class="reference external" href="http://www.gnu.org/software/gdb"&gt;gdb&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Recompile the program with debug option.&lt;/span&gt;
$ g++ -std&lt;span class="o"&gt;=&lt;/span&gt;c++11 -pthread -g philosopher.cpp

&lt;span class="c1"&gt;# Launch the debugger.&lt;/span&gt;
$ gdb --args ./a.out
GNU gdb &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu &lt;span class="m"&gt;7&lt;/span&gt;.7.1-0ubuntu5~14.04.2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;.7.1
... skipped ...
Reading symbols from ./a.out...done.
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's start our program with &lt;code&gt;run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) run
Starting program: /home/logan/a.out
... skipped ...
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib/x86_64-linux-gnu/libthread_db.so.1&amp;quot;.
[New Thread 0x7ffff6fd6700 (LWP 17406)]
[New Thread 0x7ffff67d5700 (LWP 17407)]
[New Thread 0x7ffff5fd4700 (LWP 17408)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, the program get stuck again.  Let's interrupt the program with
&lt;code&gt;Ctrl-C&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;^C
Program received signal SIGINT, Interrupt.
0x00007ffff76ab66b in pthread_join (threadid=140737337190144,
    thread_return=0x0) at pthread_join.c:92
92  pthread_join.c: No such file or directory.
(gdb)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We get back to the &lt;a class="reference external" href="http://www.gnu.org/software/gdb"&gt;gdb&lt;/a&gt; command line again.  Let's see the backtrace of
current thread:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) bt
#0  0x00007ffff76ab66b in pthread_join (threadid=140737337190144,
    thread_return=0x0) at pthread_join.c:92
#1  0x00007ffff7b87837 in std::thread::join() ()
   from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00000000004010c4 in main () at philosopher.cpp:31
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) up 2
#2  0x00000000004010c4 in main () at philosopher.cpp:31
31      philosophers[i].join();
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) l
26    for (unsigned i = 0; i &amp;lt; NUM_PHILOSOPHERS; ++i) {
27      philosophers[i] = std::thread(eat, i);
28    }
(gdb) p i
$1 = 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It seems that the main thread is waiting for the philosophers to finish their
dishes, which is the expected behavior.  Let's have a look on the other
threads:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) info threads
  Id   Target Id         Frame
  4    Thread 0x7ffff5fd4700 (LWP 17408) &amp;quot;a.out&amp;quot; __lll_lock_wait ()
    at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
  3    Thread 0x7ffff67d5700 (LWP 17407) &amp;quot;a.out&amp;quot; __lll_lock_wait ()
    at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
  2    Thread 0x7ffff6fd6700 (LWP 17406) &amp;quot;a.out&amp;quot; __lll_lock_wait ()
    at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
* 1    Thread 0x7ffff7fcf780 (LWP 17402) &amp;quot;a.out&amp;quot; 0x00007ffff76ab66b in
       pthread_join (threadid=140737337190144, thread_return=0x0) at
       pthread_join.c:92
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can list all threads with &lt;code&gt;info threads&lt;/code&gt;.  Each thread will be
associated with an &lt;strong&gt;Id&lt;/strong&gt;.  The thread marked with the asterisk is the thread
we are inspecting currently.  From the output of &lt;code&gt;info threads&lt;/code&gt;, it is
obvious that all of the philosophers are waiting to grab another lock, i.e.
they are trying to grab a fork which was grabbed by the other.  It seems to be
a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Deadlock"&gt;deadlock&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's have a look on the &lt;em&gt;philosopher&lt;/em&gt; threads.  We can switch to those threads
with &lt;code&gt;thread [Id]&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) thread 2
[Switching to thread 2 (Thread 0x7ffff6fd6700 (LWP 17406))]
#0  __lll_lock_wait ()
    at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After switching the threads, we can check their backtrace with &lt;code&gt;bt&lt;/code&gt; and
dump their registers with &lt;code&gt;info registers&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) bt
#0  __lll_lock_wait ()
    at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135
... skipped ...
#5  0x00000000004015b2 in std::lock_guard&amp;lt;std::mutex&amp;gt;::lock_guard (
    this=0x7ffff6fd5e00, __m=...) at /usr/include/c++/4.8/mutex:414
#6  0x0000000000400f87 in eat (idx=0) at philosopher.cpp:17
... skipped ...
---Type &amp;lt;return&amp;gt; to continue, or q &amp;lt;return&amp;gt; to quit---q
 at pthread_create.c:Quit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It seems that there are deadlocks in our &lt;code&gt;eat()&lt;/code&gt; function.
Let's have a closer look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) up 6
#6  0x0000000000400f87 in eat (idx=0) at philosopher.cpp:17
17    std::lock_guard&amp;lt;std::mutex&amp;gt; second_fork(forks[second]);
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) l
12    unsigned second = (idx + 1) % NUM_PHILOSOPHERS;
13
14    // Grab the forks.
15    std::lock_guard&amp;lt;std::mutex&amp;gt; first_fork(forks[first]);
16    std::this_thread::sleep_for(std::chrono::seconds(1));
17    std::lock_guard&amp;lt;std::mutex&amp;gt; second_fork(forks[second]);
18
19    printf(&amp;quot;Philosopher %u is eating.\n&amp;quot;, idx);
20    std::this_thread::sleep_for(std::chrono::seconds(1));
21  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK.  Now we know that &lt;strong&gt;thread 2&lt;/strong&gt; is waiting on line 17, which is trying to
grab the second fork.&lt;/p&gt;
&lt;p&gt;After inspecting the other threads, it will be clear that every philosophers
grabbed their &lt;em&gt;first&lt;/em&gt; fork but they couldn't grab their &lt;em&gt;second&lt;/em&gt; fork.  It is a
classical &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Deadlock"&gt;deadlock&lt;/a&gt; caused by &lt;strong&gt;circular waiting&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We can break the tie by changing following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;NUM_PHILOSOPHERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NUM_PHILOSOPHERS&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the other words, the last philosopher will grab the fork in a different
order.  There will be no circular waiting after implementing this strategy.
The program can run without problems now!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./a.out
Philosopher &lt;span class="m"&gt;1&lt;/span&gt; is eating.
Philosopher &lt;span class="m"&gt;0&lt;/span&gt; is eating.
Philosopher &lt;span class="m"&gt;2&lt;/span&gt; is eating.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To sum up, there are two important &lt;a class="reference external" href="http://www.gnu.org/software/gdb"&gt;gdb&lt;/a&gt; commands that can be used to debug
multithreaded programs:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;code&gt;info threads&lt;/code&gt; -- This command will list all threads and print the
thread Ids.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread [id]&lt;/code&gt; -- This command will switch the context to another
thread, so that thread-specific commands such as &lt;code&gt;bt&lt;/code&gt; and
&lt;code&gt;info registers&lt;/code&gt; can work without problems.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's all.  Hope you enjoy this post.  See you.&lt;/p&gt;
&lt;/div&gt;
</content><category term="gdb"></category><category term="linux"></category></entry><entry><title>Discourse Installation Notes</title><link href="http://logan.tw/posts/2015/09/13/discourse-installation-notes/" rel="alternate"></link><published>2015-09-13T22:28:00+08:00</published><updated>2015-09-13T22:28:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-09-13:/posts/2015/09/13/discourse-installation-notes/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; is a new generation discussion forum.  I found that &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;
is very suitable for personal note taking.  One notable feature of &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;
is that the users can focus on conversations.  Besides, it supports Markdown as
the message markup language.  This is the reason why I like it very
much …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; is a new generation discussion forum.  I found that &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;
is very suitable for personal note taking.  One notable feature of &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;
is that the users can focus on conversations.  Besides, it supports Markdown as
the message markup language.  This is the reason why I like it very
much.&lt;/p&gt;
&lt;p&gt;In the rest of the post, I would like to write down how did I install
&lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; on a &lt;a class="reference external" href="https://digitalocean.com"&gt;Digital Ocean&lt;/a&gt; droplet.&lt;/p&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;To install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;, there are five essential steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setup-the-mail-server"&gt;Setup the Mail Server&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-a-droplet"&gt;Create a Droplet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setup-the-swap-file"&gt;Setup the Swap File&lt;/a&gt;: If the VPS plan does not have sufficient RAM (less
than 1G), it is required to setup a swap file.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installation"&gt;Installation&lt;/a&gt;: Install &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt;, install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; and launch the
containers.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#configure-discourse"&gt;Configure Discourse&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-the-mail-server"&gt;
&lt;h2&gt;Setup the Mail Server&lt;/h2&gt;
&lt;p&gt;It is required to have a mail server for &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;.  If you already have
one, then just use it.  If you don't have a mail server, then you can register
one for free at &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt;, which allows you to send 10k e-mails per month.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Visit &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt; and click the &lt;strong&gt;TRY FOR FREE&lt;/strong&gt; button on the top right
corner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Sign up&lt;/strong&gt; for &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Fill in the &lt;em&gt;e-mail&lt;/em&gt; and the &lt;em&gt;password&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Solve the CAPTCHA.&lt;/li&gt;
&lt;li&gt;Agree to the &lt;em&gt;terms of use&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Sign Up&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Verify your account&lt;/strong&gt; by clicking the links in the confirmation e-mail.&lt;/p&gt;
&lt;p&gt;Note: If you didn't receive the confirmation e-mail, you can request a new
e-mail by clicking &amp;quot;&lt;strong&gt;ACCOUNT&lt;/strong&gt; -&amp;gt; &lt;strong&gt;SENDING DOMAINS&lt;/strong&gt;&amp;quot; and click the link
in the top bar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Before we can send e-mails with &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt;, we have to claim that we
are the owner of a domain name.  This will require us to configure the DNS
records.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click &amp;quot;&lt;strong&gt;ACCOUNT&lt;/strong&gt; -&amp;gt; &lt;strong&gt;SENDING DOMAINS&lt;/strong&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;NEW DOMAIN&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Fill in the domain name and click &lt;strong&gt;ADD DOMAIN&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Update DNS records for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sender_Policy_Framework"&gt;SPF&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail"&gt;DKIM&lt;/a&gt;.  Click the &lt;strong&gt;Configure&lt;/strong&gt; link
for more details.  In summary, you have to add two different TXT
records.&lt;/li&gt;
&lt;li&gt;After updating the DNS TXT records, click the &lt;strong&gt;Test&lt;/strong&gt; links for
verification.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a new API key.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click &amp;quot;&lt;strong&gt;ACCOUNT&lt;/strong&gt; -&amp;gt; &lt;strong&gt;API &amp;amp; SMTP&lt;/strong&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;&lt;strong&gt;NEW API KEY&lt;/strong&gt;&amp;quot; button.&lt;/li&gt;
&lt;li&gt;Fill in the &lt;em&gt;API Key Name&lt;/em&gt;, e.g. &amp;quot;discourse&amp;quot;.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Send via SMTP&lt;/strong&gt; in the &lt;em&gt;API Permissions&lt;/em&gt; section.&lt;/li&gt;
&lt;li&gt;Fill in the SparkPost password again.&lt;/li&gt;
&lt;li&gt;Copy the API key.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-droplet"&gt;
&lt;h2&gt;Create a Droplet&lt;/h2&gt;
&lt;p&gt;After logging into &lt;a class="reference external" href="https://digitalocean.com"&gt;Digital Ocean&lt;/a&gt;, click on the &lt;strong&gt;Create Droplet&lt;/strong&gt; button on
the top right corner.  In the new page, you have to fill in the following
fields:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Droplet Hostname&lt;/strong&gt; -- Choose a good name for your installation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select Size&lt;/strong&gt; -- All plans are fine.  I tried the cheapest $5/mo plan, and
it works perfectly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select Region&lt;/strong&gt; -- Choose a region for the data center.  I chose
&lt;em&gt;New York&lt;/em&gt; data center.  Pick one which is close to your visitors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select Image&lt;/strong&gt; -- The default image, &lt;em&gt;Ubuntu 14.04 x64&lt;/em&gt;, is suggested.
It is recommended by the &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; development team.&lt;/li&gt;
&lt;li&gt;Add your SSH public key to the &lt;strong&gt;Add SSH Keys&lt;/strong&gt; section.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we can click on the &lt;strong&gt;Create Droplet&lt;/strong&gt; button and wait for a while.
After the droplet is created, then try to log in with &lt;code&gt;ssh&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Note: You can check the SSH server fingerprint by clicking the
&lt;strong&gt;Console Access&lt;/strong&gt; button in the &lt;a class="reference external" href="https://digitalocean.com"&gt;Digital Ocean&lt;/a&gt; admin console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-the-swap-file"&gt;
&lt;h2&gt;Setup the Swap File&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; requires 1GB RAM to run without problems.  If you are running with
500MB RAM, then you must enable the swap file.  Otherwise, you will not be able
to build the &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; container.&lt;/p&gt;
&lt;p&gt;Here are the instructions to setup the &lt;strong&gt;swap file&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a new swap file.&lt;/span&gt;
$ sudo fallocate -l 4G /swapfile

&lt;span class="c1"&gt;# Change the file permission.&lt;/span&gt;
$ sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile

&lt;span class="c1"&gt;# Format the swap file.&lt;/span&gt;
$ sudo mkswap /swapfile

&lt;span class="c1"&gt;# Enable the swap file.&lt;/span&gt;
$ sudo swapon /swapfile

&lt;span class="c1"&gt;# Check that the swap file has been enabled.&lt;/span&gt;
$ sudo swapon -s
Filenam    Type  Size     Used  Priority
/swapfile  file  &lt;span class="m"&gt;4194300&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;     -1

&lt;span class="c1"&gt;# Add the swap file to fstab&lt;/span&gt;
$ sudo bash -c &lt;span class="s2"&gt;&amp;quot;echo &amp;#39;/swapfile none swap sw 0 0&amp;#39; &amp;gt;&amp;gt; /etc/fstab&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Reboot the machine now.&lt;/span&gt;
$ sudo reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can further tweak the configuration by reading:
&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04"&gt;How to Add Swap on Ubuntu 14.04&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;In this section, we would like to install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;.  There are three
steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#harden-droplet"&gt;Harden Droplet&lt;/a&gt; - Make your Droplet much more secure.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#install-docker"&gt;Install Docker&lt;/a&gt; - Install &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt; for &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#install-discourse"&gt;Install Discourse&lt;/a&gt; - Install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; and modify the settings.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="harden-droplet"&gt;
&lt;h3&gt;Harden Droplet&lt;/h3&gt;
&lt;p&gt;Before installing &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;, it will be better to harden the Droplet.  We
should:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Enable automatic upgrade&lt;/li&gt;
&lt;li&gt;Disable the root account&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, we can enable automatic upgrade with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo dpkg-reconfigure -plow unattended-upgrades
&lt;span class="c1"&gt;# Choose &amp;lt;yes&amp;gt; to enable automatic upgrade.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, we would like to disable the root accoount.  However, before doing so,
we have to create a new user account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a new user.&lt;/span&gt;
$ sudo adduser &lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;
Enter new UNIX password:
Retype new UNIX password:

&lt;span class="c1"&gt;# Grant sudo access to that user.&lt;/span&gt;
$ sudo visudo
&lt;span class="c1"&gt;# ... Add &amp;quot;[username] ALL=(ALL:ALL) ALL&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Copy SSH keys.&lt;/span&gt;
$ sudo mkdir -p /home/&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;/.ssh
$ sudo cp /root/.ssh/authorized_keys /home/&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;/.ssh
$ sudo chown -R &lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt; /home/&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;/.ssh

&lt;span class="c1"&gt;# Logout.&lt;/span&gt;
$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Log in with the &lt;em&gt;new account&lt;/em&gt; and disable the root account with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Lock the root password.&lt;/span&gt;
$ sudo passwd -l root

&lt;span class="c1"&gt;# Disable the ssh root login.&lt;/span&gt;
$ sudo vi /etc/ssh/sshd_config
&lt;span class="c1"&gt;# ... Change &amp;quot;PermitRootLogin&amp;quot; to &amp;quot;no&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Restart ssh server.&lt;/span&gt;
$ sudo service ssh restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-docker"&gt;
&lt;h3&gt;Install Docker&lt;/h3&gt;
&lt;p&gt;It is preferred to install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; through the prebuilt &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt; image.
Thus, we have to install &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt; beforehand.&lt;/p&gt;
&lt;p&gt;To install &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt;, run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget -qO- https://get.docker.com/ &lt;span class="p"&gt;|&lt;/span&gt; sudo sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-discourse"&gt;
&lt;h3&gt;Install Discourse&lt;/h3&gt;
&lt;p&gt;Now, we can install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Switch to root user.&lt;/span&gt;
$ sudo -s

&lt;span class="c1"&gt;# Create a directory for Discourse.&lt;/span&gt;
&amp;gt; mkdir /var/discourse

&lt;span class="c1"&gt;# Clone the Discourse docker image.&lt;/span&gt;
&amp;gt; git clone https://github.com/discourse/discourse_docker.git &lt;span class="se"&gt;\&lt;/span&gt;
            /var/discourse

&lt;span class="c1"&gt;# Change the directory to /var/discourse.&lt;/span&gt;
&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /var/discourse

&lt;span class="c1"&gt;# Copy the sample configuration.&lt;/span&gt;
&amp;gt; cp samples/standalone.yml containers/app.yml

&lt;span class="c1"&gt;# Edit the configuration.&lt;/span&gt;
&amp;gt; vi containers/app.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is &lt;em&gt;mandatory&lt;/em&gt; to change the following fields:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_DEVELOPER_EMAILS&lt;/strong&gt; - This is the e-mail that will be treat as the
administrator of the &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_HOSTNAME&lt;/strong&gt; - This is the domain name for your &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;
installation.&lt;/li&gt;
&lt;li&gt;Mail Server Configurations - These are the settings for the mail server.
Here we are using the &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt; as the example.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_SMTP_ADDRESSES&lt;/strong&gt;, e.g. &lt;code&gt;smtp.sparkpostmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_SMTP_PORT&lt;/strong&gt;, e.g. &lt;code&gt;587&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_SMTP_USER_NAME&lt;/strong&gt;, e.g. &lt;code&gt;SMTP_Injection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_SMTP_PASSWORD&lt;/strong&gt; - The API key that you have created (40-digit
hexadecimals.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then, we can bootstrap the installation with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./launcher bootstrap app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will take some time.  Get a cup of coffee and wait for a while.  :-)&lt;/p&gt;
&lt;p&gt;After the bootstrap succeed, we can launch the &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./launcher start app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt;  You should be able to checkout the installation through
your favorite browser!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you have SSL certificates, then don't register or input anything
now.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-ssl-certificate"&gt;
&lt;h3&gt;Install SSL Certificate&lt;/h3&gt;
&lt;p&gt;If you have an SSL certificate, then it's time to install the SSL certificate
now!&lt;/p&gt;
&lt;p&gt;To install SSL certificate:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mkdir -p /var/discourse/shared/standalone/ssl
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Copy the private key to &lt;code&gt;/var/discourse/shared/standalone/ssl/ssl.key&lt;/code&gt;
and the certificate to &lt;code&gt;/var/discourse/shared/standalone/ssl/ssl.crt&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit the configuration:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Append &lt;code&gt;&amp;quot;templates/web.ssl.template.yml&amp;quot;&lt;/code&gt; to &lt;strong&gt;templates&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;&amp;quot;443:443&amp;quot;&lt;/code&gt; to the &lt;strong&gt;expose&lt;/strong&gt; section.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we should rebuild the container with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Rebuild the container.&lt;/span&gt;
./launcher rebuild app
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-discourse"&gt;
&lt;h2&gt;Configure Discourse&lt;/h2&gt;
&lt;p&gt;As the last step of installation, we have to create an administrator account
so that we can fill in several important settings and moderate the forum.&lt;/p&gt;
&lt;div class="section" id="create-an-admin-account"&gt;
&lt;h3&gt;Create an Admin Account&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the browser and visit your &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Click the &lt;strong&gt;Sign Up&lt;/strong&gt; button on the top right corner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fill in the E-mail, Username, Name, and Password.&lt;/p&gt;
&lt;p&gt;Note: To be an adminstrator, the e-mail must be identical to
&lt;em&gt;DISCOURSE_DEVELOPER_EMAILS&lt;/em&gt; specified in &lt;code&gt;app.yml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Click the link in the verification e-mail.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="update-settings"&gt;
&lt;h3&gt;Update Settings&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Visit &lt;code&gt;http[s]://[domain-name]/admin&lt;/code&gt; and click &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Fill in the fields.&lt;/li&gt;
&lt;li&gt;If you have installed SSL certificate, check the
&amp;quot;&lt;strong&gt;Security&lt;/strong&gt; -&amp;gt; &lt;strong&gt;use https&lt;/strong&gt;&amp;quot; field.&lt;/li&gt;
&lt;li&gt;If you want this &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation work as a private installation,
then you can check the following check boxes:&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;strong&gt;Login&lt;/strong&gt; -&amp;gt; &lt;strong&gt;invite only&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Login&lt;/strong&gt; -&amp;gt; &lt;strong&gt;login required&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Login&lt;/strong&gt; -&amp;gt; &lt;strong&gt;must approve users&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="install-discourse-tagging-plug-in"&gt;
&lt;h3&gt;Install Discourse Tagging Plug-in&lt;/h3&gt;
&lt;p&gt;If you wish to install &lt;a class="reference external" href="https://github.com/discourse/discourse-tagging"&gt;Discourse Tagging Plug-in&lt;/a&gt;, here are the instructions:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Open &lt;code&gt;app.yml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Append following line to &lt;strong&gt;hooks&lt;/strong&gt; -&amp;gt; &lt;strong&gt;after_code&lt;/strong&gt; -&amp;gt; &lt;strong&gt;exec&lt;/strong&gt; -&amp;gt; &lt;strong&gt;cmd&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://github.com/discourse/discourse-tagging.git
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Rebuild the container with &lt;code&gt;./launcher rebuild app&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the admin console in the browser, and enable the plug-in at
&lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;tagging enabled&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;These are my notes to get a &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation.  We have covered:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Register a &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt; account and create an API key.&lt;/li&gt;
&lt;li&gt;Create a droplet and enable the swap file.&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; and fill in the necessary settings.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope you enjoy this.  You can find more information in the
&lt;a class="reference external" href="https://github.com/discourse/discourse"&gt;Discourse GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Discourse, &lt;a class="reference external" href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-cloud.md"&gt;Set up Discourse in the cloud in under 30 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sam Saffron, &lt;a class="reference external" href="https://meta.discourse.org/t/allowing-ssl-for-your-discourse-docker-setup/13847"&gt;Allowing SSL for your Discourse Docker setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Justin Ellingwood, &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04"&gt;How to Add Swap on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="discourse"></category></entry><entry><title>Global Git Ignore File</title><link href="http://logan.tw/posts/2015/06/27/global-git-ignore-file/" rel="alternate"></link><published>2015-06-27T21:19:00+08:00</published><updated>2015-06-27T21:19:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-06-27:/posts/2015/06/27/global-git-ignore-file/</id><summary type="html">&lt;p&gt;There are some files that shouldn't be tracked by &lt;a class="reference external" href="http://git-scm.org"&gt;Git&lt;/a&gt; at all.  For example,
the temporary files created by the text editors, the Python bytecode, and etc.&lt;/p&gt;
&lt;p&gt;How could we ignore those files?  In the &lt;a class="reference external" href="http://logan.tw/posts/2015/02/28/git-ignore-file/"&gt;previous post&lt;/a&gt;, I have mentioned
that we can create a &lt;code&gt;.gitignore&lt;/code&gt; file and list the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are some files that shouldn't be tracked by &lt;a class="reference external" href="http://git-scm.org"&gt;Git&lt;/a&gt; at all.  For example,
the temporary files created by the text editors, the Python bytecode, and etc.&lt;/p&gt;
&lt;p&gt;How could we ignore those files?  In the &lt;a class="reference external" href="http://logan.tw/posts/2015/02/28/git-ignore-file/"&gt;previous post&lt;/a&gt;, I have mentioned
that we can create a &lt;code&gt;.gitignore&lt;/code&gt; file and list the name patterns to be
ignored.  However, the &lt;code&gt;.gitignore&lt;/code&gt; file is managed by &lt;a class="reference external" href="http://git-scm.org"&gt;Git&lt;/a&gt; and should
be version controlled.  It will be cumbersome to create &lt;code&gt;.gitignore&lt;/code&gt;
files for all repositories.&lt;/p&gt;
&lt;p&gt;Is it possible to create a &lt;strong&gt;global&lt;/strong&gt; &lt;code&gt;.gitignore&lt;/code&gt; file for all &lt;a class="reference external" href="http://git-scm.org"&gt;Git&lt;/a&gt;
repositories?  Yes, of course we can.  We can create a &lt;code&gt;ignore&lt;/code&gt; file in
&lt;code&gt;$HOME/.config/git/ignore&lt;/code&gt; and the listed name patterns will be ignored
globally.&lt;/p&gt;
&lt;p&gt;For example, if we wish to ignore the &lt;code&gt;*.swp&lt;/code&gt; files created by &lt;a class="reference external" href="http://vim.org"&gt;Vim&lt;/a&gt;,
we can use the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p ~/.config/git

$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*.swp&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.config/git/ignore
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these commands, &lt;a class="reference external" href="http://git-scm.org"&gt;Git&lt;/a&gt; should start ignoring the swap files.&lt;/p&gt;
&lt;div class="section" id="change-the-global-ignore-file-path"&gt;
&lt;h2&gt;Change the Global Ignore File Path&lt;/h2&gt;
&lt;p&gt;Under some circumstances, we may wish to change the file path to the ignore
file.  We do so by setting &lt;code&gt;core.excludesfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, to change the ignore file path to &lt;code&gt;~/.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global core.excludesfile ~/.gitignore
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git-scm.com/docs/gitignore"&gt;Git - gitignore Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="git"></category><category term="linux"></category></entry><entry><title>Comparison and Sorting in Python3</title><link href="http://logan.tw/posts/2015/06/14/comparison-and-sorting-in-python3/" rel="alternate"></link><published>2015-06-14T23:45:00+08:00</published><updated>2015-06-14T23:45:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-06-14:/posts/2015/06/14/comparison-and-sorting-in-python3/</id><summary type="html">&lt;p&gt;Although I have written &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; for several years, I am still not very familiar
with its idioms.  In particular, I don't quite understand how to compare and
sort the objects in Python.  That's the reason why I am writing this article.&lt;/p&gt;
&lt;p&gt;The rest of this article consists of following sections …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Although I have written &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; for several years, I am still not very familiar
with its idioms.  In particular, I don't quite understand how to compare and
sort the objects in Python.  That's the reason why I am writing this article.&lt;/p&gt;
&lt;p&gt;The rest of this article consists of following sections:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1"&gt;Comparison Operators&lt;/a&gt; -- lists the comparison operators.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#built-in-types"&gt;Built-in Types&lt;/a&gt; -- lists the &lt;strong&gt;semantics of the comparison operators&lt;/strong&gt;
corresponding to the operand types:&lt;ol class="loweralpha"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#numbers-bool-int-and-float"&gt;Numbers: Bool, Int, and Float&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#complex-numbers"&gt;Complex Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#string"&gt;String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#sequential-types-tuple-list-bytearray-and-bytes"&gt;Sequential Types: Tuple, List, ByteArray, and Bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#sets-and-frozensets"&gt;Sets and FrozenSets&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#user-defined-classes"&gt;User-defined Classes&lt;/a&gt; -- discusses how to define our own comparison
operators for the &lt;strong&gt;user-defined classes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#sort-the-list"&gt;Sort the List&lt;/a&gt; -- will talk about how to customize the ordering while
sorting the elements in a list.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="comparison-operators"&gt;&lt;/span&gt;&lt;h2&gt;Comparison Operators&lt;/h2&gt;
&lt;p&gt;There are &lt;a class="reference external" href="https://docs.python.org/3.6/library/stdtypes.html#comparisons"&gt;several comparison operators&lt;/a&gt; in Python.  All of them are listed in
the following table:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="27%" /&gt;
&lt;col width="44%" /&gt;
&lt;col width="29%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Operator&lt;/th&gt;
&lt;th class="head"&gt;Semantics&lt;/th&gt;
&lt;th class="head"&gt;Override Method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Strictly less than&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__lt__&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than or equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__le__&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Strictly greater than&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__gt__&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than or equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__ge__&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__eq__&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Not equal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__ne__&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Object identity&lt;/td&gt;
&lt;td&gt;Not overridable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;is not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Negated object identity&lt;/td&gt;
&lt;td&gt;Not overridable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The six items from the beginning are the comparison operators that determine
&lt;strong&gt;the order of the values&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The last two items at the end are the &lt;strong&gt;identity operators&lt;/strong&gt; which can tell
whether the objects on both sides are the same, i.e. both the expressions are
evaluated to same object.&lt;/p&gt;
&lt;p&gt;For what it's worth, it is a bad idea to compare &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt;
values with &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;is not&lt;/code&gt; operator.  You will confront some
non-intuitive results.  We will find out more examples in the following
section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="built-in-types"&gt;
&lt;h2&gt;Built-in Types&lt;/h2&gt;
&lt;p&gt;There are several built-in types in Python 3.  Most of them have reasonable
comparison ordering.  However, notice that &lt;code&gt;complex&lt;/code&gt; numbers,
&lt;code&gt;dict&lt;/code&gt;, and &lt;code&gt;range&lt;/code&gt; are not ordered.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="46%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Category&lt;/th&gt;
&lt;th class="head"&gt;Types&lt;/th&gt;
&lt;th class="head"&gt;Ordering&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Numberic&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;,
&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Real number ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unicode lexicographical&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Sequential&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;,
&lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Element-wise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Set&lt;/td&gt;
&lt;td&gt;&lt;code&gt;set&lt;/code&gt;, &lt;code&gt;frozenset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subset&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Unordered&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&lt;/code&gt;,
&lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;,
&lt;code&gt;NoneType&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A
(Equality comparable)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="numbers-bool-int-and-float"&gt;
&lt;h3&gt;Numbers: Bool, Int, and Float&lt;/h3&gt;
&lt;p&gt;The number types in &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; have reasonable comparison rules:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For the &lt;code&gt;bool&lt;/code&gt; values, &lt;code&gt;False&lt;/code&gt; is equal to &lt;code&gt;0&lt;/code&gt;, and
&lt;code&gt;True&lt;/code&gt; is equal to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;int&lt;/code&gt; values are mapped to corresponding real numbers.&lt;/li&gt;
&lt;li&gt;Most &lt;code&gt;float&lt;/code&gt; values are mapped to corresponding real numbers.
Here are some special rules:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float('nan')&lt;/code&gt; is a special floating point number which is standing
for &lt;em&gt;not a number&lt;/em&gt;.  NAN is not equal to all of the numbers.  Besides,
&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt; will return &lt;code&gt;False&lt;/code&gt;
as well.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float('inf')&lt;/code&gt; will be treated as &lt;em&gt;infinite&lt;/em&gt;.  It will be greater
than other numbers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float('-inf')&lt;/code&gt; will be treated as negative &lt;em&gt;infinite&lt;/em&gt;.  It will be
less than other numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These examples demonstrate the simple cases with implicit type conversions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the examples for &lt;code&gt;float('nan')&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the examples for &lt;code&gt;float('inf')&lt;/code&gt; and &lt;code&gt;float('-inf')&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ninf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-inf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ninf&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ninf&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ninf&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ninf&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the examples which compare &lt;code&gt;float('inf')&lt;/code&gt; with the maximum
floating point number on the system and a huge integer numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;huge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;huge&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;huge&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;huge&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mn&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ninf&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;huge&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that the floating point arithmetics are performed in binary.
As a result, the outcome might be different from the one computed in decimal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
&lt;span class="mf"&gt;0.30000000000000004&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, &lt;strong&gt;DON'T&lt;/strong&gt; compare &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; values with
&lt;strong&gt;identity operators&lt;/strong&gt; (&lt;code&gt;is&lt;/code&gt; or &lt;code&gt;is not&lt;/code&gt;.)  Some implementations
will reuse the objects for small numbers and give &lt;em&gt;non-intuitive&lt;/em&gt;,
&lt;em&gt;unexpected&lt;/em&gt;, and &lt;em&gt;surprising&lt;/em&gt; results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="mh"&gt;0x40000000&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x40000000&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="complex-numbers"&gt;
&lt;h3&gt;Complex Numbers&lt;/h3&gt;
&lt;p&gt;We can compare the complex numbers with equality or inequality operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.4j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;1.4j&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.4j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;1.4&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the &lt;code&gt;complex&lt;/code&gt; numbers are unordered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1j&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unorderable&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even if their imaginary parts are equal to zero, they are unordered either:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unorderable&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="string"&gt;
&lt;h3&gt;String&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;str&lt;/code&gt; objects are ordered by lexicographical ordering.  In the other
words, the characters in the strings are element-wise compared.  The characters
are encoded in unicode and the comparison is case sensitive.  If two strings
have common prefix, then the shorter one is less than the longer one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sequential-types-tuple-list-bytearray-and-bytes"&gt;
&lt;h3&gt;Sequential Types: Tuple, List, ByteArray, and Bytes&lt;/h3&gt;
&lt;p&gt;The sequential types, such as &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;
and &lt;code&gt;bytes&lt;/code&gt;, are element-wise compared.  Like &lt;code&gt;str&lt;/code&gt; objects, if two
objects have common prefix, then the shorter one is less than the longer one.&lt;/p&gt;
&lt;p&gt;Here are the examples for &lt;code&gt;tuple&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the examples for &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the examples for &lt;code&gt;bytes&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ab&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are allowed to compare &lt;code&gt;bytearray&lt;/code&gt; with &lt;code&gt;bytes&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are also allowed to compare &lt;code&gt;tuple&lt;/code&gt; and &lt;code&gt;list&lt;/code&gt; with equality and
inequality operations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, unfortunately, we can't get the order between &lt;code&gt;tuple&lt;/code&gt; object and
&lt;code&gt;list&lt;/code&gt; object without type conversion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unorderable&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unorderable&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sets-and-frozensets"&gt;
&lt;h3&gt;Sets and FrozenSets&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;frozenset&lt;/code&gt; instances are ordered by the &lt;strong&gt;subset&lt;/strong&gt;
relationship.  For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that &lt;strong&gt;subset&lt;/strong&gt; is not a total order.  We can check this by adding
&lt;code&gt;2&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, it is fine to compare &lt;code&gt;set&lt;/code&gt; objects with &lt;code&gt;frozenset&lt;/code&gt;
objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="user-defined-classes"&gt;
&lt;h2&gt;User-defined Classes&lt;/h2&gt;
&lt;p&gt;We can declare a new class with a &lt;code&gt;class&lt;/code&gt; statement.  For example, we can
define a &lt;code&gt;Date&lt;/code&gt; class in &lt;code&gt;date.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{0}/{1:02}/{2:02}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Date({0},{1},{2})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What will happen if we compare two instances of &lt;code&gt;Date&lt;/code&gt;?  By default, we
can only compare them with &lt;strong&gt;equality/inequality operators&lt;/strong&gt; and &lt;strong&gt;identity
operators&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see, the default behavior for &lt;strong&gt;equality/inequality operators&lt;/strong&gt; are
equal to the &lt;strong&gt;identity operators&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If we compare the objects with other operators, such as &lt;em&gt;less-than operator&lt;/em&gt;,
then the &lt;code&gt;TypeError&lt;/code&gt; exception will be raised:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unorderable&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="customize-the-equality-and-inequality-operators"&gt;
&lt;h3&gt;Customize the Equality and Inequality Operators&lt;/h3&gt;
&lt;p&gt;We can customize the &lt;strong&gt;equality operators&lt;/strong&gt; by overriding &lt;code&gt;__eq__&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... skipped ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's try out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the &lt;em&gt;equality&lt;/em&gt; operator works as expected.&lt;/p&gt;
&lt;p&gt;Let's look at the &lt;em&gt;inequality&lt;/em&gt; operator.  If you don't have special logic, it
is suggested to define &lt;code&gt;__ne__&lt;/code&gt; in terms of &lt;code&gt;not&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt;.
For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... skipped ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__ne__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On a side note, we should not assume &lt;code&gt;a == b&lt;/code&gt; is complement with
&lt;code&gt;a != b&lt;/code&gt;.  This assumption may not be true in general.  Some class may
return &lt;code&gt;True&lt;/code&gt; on both cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remarks&lt;/strong&gt;: If you override &lt;code&gt;__eq__&lt;/code&gt;, then you should override
&lt;code&gt;__hash__&lt;/code&gt; as well.  Otherwise, the object won't be hashable.  In the
other words, we can't insert the objects to &lt;code&gt;set&lt;/code&gt; and the objects can't
be used as the key of &lt;code&gt;dict&lt;/code&gt;.  Besides, we have to make sure that
&lt;code&gt;a == b&lt;/code&gt; implies &lt;code&gt;hash(a) == hash(b)&lt;/code&gt;; otherwise, the uniqueness
property of the &lt;code&gt;set&lt;/code&gt; will become invalid.  Here's the &lt;code&gt;__hash__&lt;/code&gt;
function for our &lt;code&gt;Date&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... skipped ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;20150614&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="customize-the-ordering-comparison-operators"&gt;
&lt;h3&gt;Customize the Ordering Comparison Operators&lt;/h3&gt;
&lt;p&gt;We can customize the ordering comparison operators by overriding &lt;code&gt;__lt__&lt;/code&gt;,
&lt;code&gt;__le__&lt;/code&gt;, &lt;code&gt;__gt__&lt;/code&gt;, and &lt;code&gt;__ge__&lt;/code&gt;.  They are corresponding to
&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt; respectively.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... skipped ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__lt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our example, we simply implement &lt;code&gt;__lt__&lt;/code&gt; by comparing the hash value
of the object.  You may implement this with a series of integer comparisons and
boolean arithmetics as well.  Here are the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, you might be surprised that the following code works as expected even
though we haven't overridden &lt;code&gt;__gt__&lt;/code&gt; yet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is working because the &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; run-time will &lt;em&gt;reflect the comparison&lt;/em&gt;.  If
(1) the left-hand-side class does not override the corresponding method, or (2)
the corresponding method returns &lt;code&gt;NotImplemented&lt;/code&gt;, then the &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt;
run-time will &lt;strong&gt;swap the arguments&lt;/strong&gt; and call the &lt;strong&gt;reflected method&lt;/strong&gt;
defined in the right-hand-side class.  Here are the mapppings:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="28%" /&gt;
&lt;col width="27%" /&gt;
&lt;col width="45%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Original&lt;/th&gt;
&lt;th class="head"&gt;Reflects To&lt;/th&gt;
&lt;th class="head"&gt;Mnemonic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;__lt__(a, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__gt__(b, a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt; b&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;b &amp;gt; a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;__gt__(a, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__lt__(b, a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(ditto)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;__le__(a, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__ge__(b, a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;= b&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;b &amp;gt;= a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;__ge__(a, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__le__(b, a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(ditto)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;__eq__(a, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__eq__(b, a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a == b&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;b == a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;__ne__(a, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__ne__(b, a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a != b&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;b != a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With the reflection rules, it will be sufficient to define a total ordering
class by overriding &lt;code&gt;__eq__&lt;/code&gt;, &lt;code&gt;__ne__&lt;/code&gt;, &lt;code&gt;__lt__&lt;/code&gt;, and
&lt;code&gt;__le__&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="total-ordering-decorator"&gt;
&lt;h3&gt;Total Ordering Decorator&lt;/h3&gt;
&lt;p&gt;To define a &lt;strong&gt;class with total ordering&lt;/strong&gt;, we should override all of
&lt;code&gt;__eq__&lt;/code&gt;, &lt;code&gt;__ne__&lt;/code&gt;, &lt;code&gt;__lt__&lt;/code&gt;, and &lt;code&gt;__le__&lt;/code&gt;.  However,
it might be cumbersome to override all of them.  It will be simpler to decorate
the class with &lt;code&gt;functools.total_ordering&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;functools.total_ordering&lt;/code&gt; decorator, overriding &lt;code&gt;__eq__&lt;/code&gt; and
one of &lt;code&gt;__lt__&lt;/code&gt;, &lt;code&gt;__le__&lt;/code&gt;, &lt;code&gt;__gt__&lt;/code&gt;, or &lt;code&gt;__ge__&lt;/code&gt; is
sufficient to define a total ordering class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="nd"&gt;@functools.total_ordering&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... skipped ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__lt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Althoguh it is much simpler to define a total ordering class with the
decorator, it comes with the &lt;em&gt;performance penalty&lt;/em&gt;.  If this has been proved to
be a performance bottleneck, then it will be better to override six methods
directly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sort-the-list"&gt;
&lt;h2&gt;Sort the List&lt;/h2&gt;
&lt;p&gt;We can sort the list with either &lt;code&gt;a.sort()&lt;/code&gt; or &lt;code&gt;b = sorted(a)&lt;/code&gt;.
The former will sort the associate list and the later will create a new sorted
list from the iteratables (and leave the argument unchanged).  Both of them
will sort the elements by &lt;em&gt;less-than&lt;/em&gt; comparison (i.e. in ascending order.)
For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The element type doesn't matter as long as they are pairwise comparable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="sort-the-list-with-customized-ordering"&gt;
&lt;h3&gt;Sort the List with Customized Ordering&lt;/h3&gt;
&lt;p&gt;If we want to sort the elements in different order, we can specify the &lt;strong&gt;key
function&lt;/strong&gt; to extract the key from the elements.&lt;/p&gt;
&lt;p&gt;First, let's sort the list of tuples with &lt;code&gt;sorted()&lt;/code&gt; directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As what we have expected, the tuple are pairwisely compared.&lt;/p&gt;
&lt;p&gt;Second, let's sort the tuples by the first element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see, the tuples with &lt;code&gt;x[0]&lt;/code&gt; equals to &lt;code&gt;0&lt;/code&gt; comes before
the tuples with &lt;code&gt;x[0]&lt;/code&gt; equals to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;.  However,
&lt;code&gt;(0, 3)&lt;/code&gt; and &lt;code&gt;(0, 2)&lt;/code&gt; are not reordered.  This is due to the
&lt;strong&gt;stable&lt;/strong&gt; guarantee of the sorting algorithm.&lt;/p&gt;
&lt;p&gt;Third, the key function can &lt;strong&gt;return a new tuple&lt;/strong&gt; as well.  For example, we
can compare the second element first and then compare the first element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, returning a new tuple might result in performance penalty since&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;we have to allocate new tuples from the heap, and&lt;/li&gt;
&lt;li&gt;the element-wise comparison for tuples might be more expensive than
necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will be better to return primitive types if it is possible.  For example, if
it is guaranteed that both &lt;code&gt;x[0]&lt;/code&gt; and &lt;code&gt;x[1]&lt;/code&gt; are less than 1000,
then we can simply sort the tuples with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wrap-up"&gt;
&lt;h2&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;In this article, we have discussed the &lt;a class="reference internal" href="#id1"&gt;Comparison Operators&lt;/a&gt; that are
available in the Python programming language.  Besides, we have discussed the
semantics of the comparison operators for the &lt;a class="reference internal" href="#built-in-types"&gt;Built-in Types&lt;/a&gt; and how to
create &lt;a class="reference internal" href="#user-defined-classes"&gt;User-defined Classes&lt;/a&gt; with specific ordering.  Finally, we have
mentioned how to &lt;a class="reference internal" href="#sort-the-list"&gt;Sort the List&lt;/a&gt; with customized order by extracting the keys.&lt;/p&gt;
&lt;p&gt;Hope you enjoy this post!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/reference/datamodel.html#object.__lt__"&gt;Python: Data Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functools.html#functools.total_ordering"&gt;Python Module: functools.total_ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#sorted"&gt;Python: sorted()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="python"></category></entry><entry><title>Troubleshooting adb No Permissions Problem</title><link href="http://logan.tw/posts/2015/05/25/troubleshooting-adb-no-permissions-problem/" rel="alternate"></link><published>2015-05-25T21:59:00+08:00</published><updated>2015-05-25T21:59:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-05-25:/posts/2015/05/25/troubleshooting-adb-no-permissions-problem/</id><summary type="html">&lt;p&gt;I got an Android Nexus 7 (2013, Wi-Fi) device a short while ago.  I attached
the device to my computer and tried to list the devices with &lt;code&gt;adb
devices&lt;/code&gt; command.  But, unfortunately, I got the following error message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb devices
List of devices attached
????????????    no permissions
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the following of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got an Android Nexus 7 (2013, Wi-Fi) device a short while ago.  I attached
the device to my computer and tried to list the devices with &lt;code&gt;adb
devices&lt;/code&gt; command.  But, unfortunately, I got the following error message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb devices
List of devices attached
????????????    no permissions
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the following of the post, I would like to explain how did I fix the
problem.&lt;/p&gt;
&lt;div class="section" id="adb-server-with-root-permission"&gt;
&lt;h2&gt;ADB Server with Root Permission&lt;/h2&gt;
&lt;p&gt;First, we can run &lt;code&gt;adb&lt;/code&gt; command with &lt;strong&gt;root&lt;/strong&gt; permission, and check
whether we can list the devices with &lt;code&gt;sudo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Stop the adb server (which will be restarted later.)&lt;/span&gt;
$ adb kill-server

&lt;span class="c1"&gt;# Open a root shell.&lt;/span&gt;
$ sudo -s

&lt;span class="c1"&gt;# Run &amp;quot;adb device&amp;quot; with in the root shell.&lt;/span&gt;
&amp;gt; adb devices
List of devices attached
057d7cxx    device

&lt;span class="c1"&gt;# Stop the adb server with root permission.&lt;/span&gt;
&amp;gt; adb kill-server

&lt;span class="c1"&gt;# Leave the root shell.&lt;/span&gt;
&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK.  It seems that everything works fine with &lt;strong&gt;root&lt;/strong&gt; permission.  If we can
see the device with &lt;strong&gt;root&lt;/strong&gt; permission, then the underlying problem is that
the user is not allowed to access the USB device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-udev-for-usb-access"&gt;
&lt;h2&gt;Configure udev for USB Access&lt;/h2&gt;
&lt;p&gt;To grant the USB access to an user, you can follow the instructions in
&lt;a class="reference external" href="http://source.android.com/source/initializing.html#configuring-usb-access"&gt;Configuring USB Access&lt;/a&gt;.  In short, there are following steps:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a new &lt;strong&gt;udev&lt;/strong&gt; configuration file at
&lt;code&gt;/etc/udev/rules.d/51-android.rules&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Copy the settings from &lt;a class="reference external" href="http://source.android.com/source/initializing.html#configuring-usb-access"&gt;Configuring USB Access&lt;/a&gt; and replace
&lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with your Linux username.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reload the &lt;strong&gt;udev&lt;/strong&gt; configuration with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo udevadm control --reload-rules
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Re-plug the Android device.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you are lucky, this should work for you.&lt;/p&gt;
&lt;p&gt;However, it doesn't work for me because the &lt;em&gt;vendor ID&lt;/em&gt; and &lt;em&gt;product&lt;/em&gt; ID of my
device are not listed in &lt;a class="reference external" href="http://source.android.com/source/initializing.html#configuring-usb-access"&gt;Configuring USB Access&lt;/a&gt;.  I have to figure out the
&lt;em&gt;vendor ID&lt;/em&gt; and &lt;em&gt;product ID&lt;/em&gt; by myself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="find-usb-vendor-and-product-id-for-udev-rules"&gt;
&lt;h2&gt;Find USB Vendor and Product ID for udev Rules&lt;/h2&gt;
&lt;p&gt;We can check the USB &lt;em&gt;vendor ID&lt;/em&gt; and &lt;em&gt;product ID&lt;/em&gt; with &lt;code&gt;lsusb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ lsusb
Bus &lt;span class="m"&gt;003&lt;/span&gt; Device &lt;span class="m"&gt;013&lt;/span&gt;: ID 18d1:4ee7 Google Inc.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, &lt;code&gt;18d1&lt;/code&gt; is the &lt;em&gt;vendor ID&lt;/em&gt; and &lt;code&gt;4ee7&lt;/code&gt; is the
&lt;em&gt;product ID&lt;/em&gt; for my Android device.  Thus, I added the following rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# adb protocol on flo (Nexus 7 2013)&lt;/span&gt;
&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;18d1&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4ee7&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0600&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;OWNER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;username&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can reload the &lt;strong&gt;udev&lt;/strong&gt; rules with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo udevadm control --reload-rules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After re-pluging the device, we should be able to see the devices with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb devices
List of devices attached
057d7cxx    device
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, notice that the bootloader has different &lt;em&gt;product ID&lt;/em&gt;, thus we have
have to reboot to bootloader mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb reboot bootloader

$ lsusb
Bus &lt;span class="m"&gt;003&lt;/span&gt; Device &lt;span class="m"&gt;013&lt;/span&gt;: ID 18d1:4ee0 Google Inc.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It seems that we have to add &lt;code&gt;18d1:4ee0&lt;/code&gt; to udev rules as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# fastboot protocol on flo (Nexus 7 2013)&lt;/span&gt;
&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;18d1&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4ee0&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0600&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;OWNER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;username&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload the &lt;strong&gt;udev&lt;/strong&gt; configuration again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo udevadm control --reload-rules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, re-plug the USB device again.  Everything should work now!&lt;/p&gt;
&lt;p&gt;If this still doesn't work, then restart the &lt;strong&gt;udev&lt;/strong&gt; service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service udev restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hoping this post will help.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;StackExchange: &lt;a class="reference external" href="http://unix.stackexchange.com/questions/39370/how-to-reload-udev-rules-without-reboot"&gt;How to reload udev rules without reboot?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="android"></category><category term="udev"></category><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>Grub Install and Btrfs Root File System</title><link href="http://logan.tw/posts/2015/05/17/grub-install-and-btrfs-root-file-system/" rel="alternate"></link><published>2015-05-17T01:44:00+08:00</published><updated>2015-05-17T01:44:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-05-17:/posts/2015/05/17/grub-install-and-btrfs-root-file-system/</id><summary type="html">&lt;p&gt;Recently, the Linux operating system on my laptop no longer boots.  It seems
that the boot sector for &lt;a class="reference external" href="http://www.gnu.org/software/grub/"&gt;GRUB&lt;/a&gt; bootloader is corrupted.  I tried to
&lt;strong&gt;reinstall GRUB&lt;/strong&gt; with an Ubuntu LiveCD; however, I have encountered some
problem related to &lt;a class="reference external" href="https://btrfs.wiki.kernel.org/"&gt;Btrfs&lt;/a&gt; file system (which is the file system for my root …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, the Linux operating system on my laptop no longer boots.  It seems
that the boot sector for &lt;a class="reference external" href="http://www.gnu.org/software/grub/"&gt;GRUB&lt;/a&gt; bootloader is corrupted.  I tried to
&lt;strong&gt;reinstall GRUB&lt;/strong&gt; with an Ubuntu LiveCD; however, I have encountered some
problem related to &lt;a class="reference external" href="https://btrfs.wiki.kernel.org/"&gt;Btrfs&lt;/a&gt; file system (which is the file system for my root
mount point &lt;code&gt;/&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;After several attempts, I finally reinstalled &lt;a class="reference external" href="http://www.gnu.org/software/grub/"&gt;GRUB&lt;/a&gt; to the hard disk.  I feel
that it will be good idea to write the steps down, since I can't find any
useful suggestion at the time of writing.&lt;/p&gt;
&lt;div class="section" id="preparation"&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Before changing anything, it will be better to understand the situation
beforehand.  Check the status and find the correct device file with &lt;code&gt;sudo
fdisk -l&lt;/code&gt; command or the &lt;a class="reference external" href="http://gparted.org/"&gt;GParted&lt;/a&gt; GUI tool.&lt;/p&gt;
&lt;p&gt;For example, on my laptop, the main hard drive is &lt;code&gt;/dev/SDA&lt;/code&gt;, and
according to the result of &lt;code&gt;fdisk&lt;/code&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;/dev/SDA1&lt;/code&gt; is the partition for the EFI firmwares, which is a FAT32
partition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/SDA4&lt;/code&gt; is the &lt;strong&gt;root file system&lt;/strong&gt; for the Linux installation,
which is a &lt;cite&gt;Btrfs&lt;/cite&gt; partition.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides, I would like to reinstall &lt;a class="reference external" href="http://www.gnu.org/software/grub/"&gt;GRUB&lt;/a&gt; to &lt;code&gt;/dev/SDA&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="steps"&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;p&gt;After gathering the necessary information, we can start our work.  In summary,
there are three steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Mount the file systems.&lt;/li&gt;
&lt;li&gt;Switch to the root file system with &lt;code&gt;chroot&lt;/code&gt; command and fix the
problem inside the chroot.&lt;/li&gt;
&lt;li&gt;Unmount the file systems.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will elobrate them in the following paragraphs.&lt;/p&gt;
&lt;div class="section" id="mount-the-file-systems"&gt;
&lt;h3&gt;Mount the File Systems&lt;/h3&gt;
&lt;p&gt;First, create a directory as a mount point for &lt;strong&gt;root file system&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, mount the &lt;strong&gt;root file system&lt;/strong&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mount -o &lt;span class="nv"&gt;subvol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;@ /dev/SDA4 mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that it is &lt;em&gt;required&lt;/em&gt; to specify the &lt;a class="reference external" href="https://btrfs.wiki.kernel.org/"&gt;Btrfs&lt;/a&gt; subvolume with the
&lt;code&gt;-o subvol=&lt;/code&gt; option.  We will explain this later.  On the default Ubuntu
installation, the subvolume for the root file system is named after &lt;code&gt;&amp;#64;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Third, mount the special file system for the &lt;strong&gt;chroot&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="k"&gt;for&lt;/span&gt; i in dev dev/pts sys proc run&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; sudo mount --bind /&lt;span class="nv"&gt;$i&lt;/span&gt; mnt/&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fourth, if you are using &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"&gt;UEFI&lt;/a&gt;, you should mount the EFI boot partition
as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mount /dev/SDA1 mnt/boot/efi
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="change-root-and-reinstall-grub"&gt;
&lt;h3&gt;Change Root and Reinstall GRUB&lt;/h3&gt;
&lt;p&gt;Now, we can switch to the root file system with the &lt;code&gt;chroot&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo chroot mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the chroot, we can reinstall the &lt;a class="reference external" href="http://www.gnu.org/software/grub/"&gt;GRUB&lt;/a&gt; bootloader with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; grub-install /dev/SDA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remarks: If you see the error messages like &amp;quot;&lt;code&gt;cannot find a device for
...&lt;/code&gt;&amp;quot;, then it is possible that some partition is not mounted properly.  As a
result, &lt;code&gt;grub-probe&lt;/code&gt; can't detect the devices for the existing
configuration.&lt;/p&gt;
&lt;p&gt;For example, in my first attempt, I have seen the following error message:&lt;/p&gt;
&lt;blockquote&gt;
grub-install: error: cannot find a device for /boot/grub (is /dev mounted?)&lt;/blockquote&gt;
&lt;p&gt;This is due to the fact that the &lt;a class="reference external" href="https://btrfs.wiki.kernel.org/"&gt;Btrfs&lt;/a&gt; subvolume was mentioned in the
configuration file but I didn't specify the &lt;code&gt;subvol=&lt;/code&gt; option when I was
mounting the root file system in the first attempt.  If you encounter similar
error messages, double check the &lt;code&gt;/etc/fstab&lt;/code&gt; and the mount options.&lt;/p&gt;
&lt;p&gt;Now, we can verify the &lt;a class="reference external" href="http://www.gnu.org/software/grub/"&gt;GRUB&lt;/a&gt; installation and update the configuration files
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; grub-install --recheck /dev/SDA

&amp;gt; update-grub
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, leave the chroot with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unmount-the-file-systems"&gt;
&lt;h3&gt;Unmount the File Systems&lt;/h3&gt;
&lt;p&gt;Now, we would like to unmount the file systems so that the changes can be
flushed properly.&lt;/p&gt;
&lt;p&gt;First, unmount the EFI partition (if available):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo umount mnt/boot/efi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, unmount the special file systems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="k"&gt;for&lt;/span&gt; i in run proc sys dev/pts dev&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; sudo umount mnt/&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, unmount the root file systems and delete the mount point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo umount mnt

$ sudo rmdir mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's all.  You can reboot the computer now!  Hoping this will fix your
problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://howtoubuntu.org/how-to-repair-restore-reinstall-grub-2-with-a-ubuntu-live-cd"&gt;How to Repair, Restore, or Reinstall Grub 2 with a Ubuntu Live CD or USB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="grub"></category></entry><entry><title>Check Code Coverage with Clang and LCOV</title><link href="http://logan.tw/posts/2015/04/28/check-code-coverage-with-clang-and-lcov/" rel="alternate"></link><published>2015-04-28T01:28:00+08:00</published><updated>2015-04-28T01:28:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-04-28:/posts/2015/04/28/check-code-coverage-with-clang-and-lcov/</id><summary type="html">&lt;p&gt;Code coverage is a metric to show the code being untested.  It can be considered
as a hint to add more test cases.  When we are writing C/C++, the most notable
code coverage testing tool is &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html"&gt;gcov&lt;/a&gt;, which is a GCC built-in coverage testing
tool.  Besides, we can collect …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Code coverage is a metric to show the code being untested.  It can be considered
as a hint to add more test cases.  When we are writing C/C++, the most notable
code coverage testing tool is &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html"&gt;gcov&lt;/a&gt;, which is a GCC built-in coverage testing
tool.  Besides, we can collect the results and generate beautiful HTML output
with &lt;a class="reference external" href="http://ltp.sourceforge.net/coverage/lcov.php"&gt;lcov&lt;/a&gt;, which is an extension to &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html"&gt;gcov&lt;/a&gt;.  &lt;a class="reference external" href="http://ltp.sourceforge.net/coverage/lcov.php"&gt;lcov&lt;/a&gt; was originally
developed for &lt;a class="reference external" href="http://linux-test-project.github.io/"&gt;Linux Test Project&lt;/a&gt; and then further extended for user space
programs.&lt;/p&gt;
&lt;p&gt;Although LLVM/Clang can generate some gcov-like files to track the code
coverage, it requires some extra work to generate HTMLs with &lt;a class="reference external" href="http://ltp.sourceforge.net/coverage/lcov.php"&gt;lcov&lt;/a&gt;.  That's
the reason why I am writing this post.&lt;/p&gt;
&lt;div class="section" id="build-and-install-clang"&gt;
&lt;h2&gt;Build and Install Clang&lt;/h2&gt;
&lt;p&gt;To support code coverage instrumentation, we have to build LLVM and clang with
&lt;a class="reference external" href="http://compiler-rt.llvm.org/"&gt;compiler-rt&lt;/a&gt; &lt;a class="reference internal" href="#clang-rt-profile"&gt;[1]&lt;/a&gt;.  Here are the instructions to build a nightly build:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Checkout llvm&lt;/span&gt;
$ git clone http://llvm.org/git/llvm.git

&lt;span class="c1"&gt;# Checkout compiler-rt&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; llvm/projects
$ git clone http://llvm.org/git/compiler-rt.git

&lt;span class="c1"&gt;# Checkout clang&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../tools
$ git clone http://llvm.org/git/clang.git

&lt;span class="c1"&gt;# Build and install llvm and clang&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../..
$ mkdir llvm-build
$ &lt;span class="nb"&gt;cd&lt;/span&gt; llvm-build
$ ../llvm/configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/llvm-install&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                    --enable-optimized
$ make -j8
$ make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-wrapper-script-for-lcov"&gt;
&lt;h2&gt;Create a Wrapper Script for LCOV&lt;/h2&gt;
&lt;p&gt;LLVM has a fast development speed, thus the &lt;code&gt;llvm-cov&lt;/code&gt; command line
options have been changed, and &lt;a class="reference external" href="http://ltp.sourceforge.net/coverage/lcov.php"&gt;lcov&lt;/a&gt; can no longer recognize it.  Thus, we
have to create a script &lt;code&gt;llvm-gcov.sh&lt;/code&gt; to workaround the problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; llvm-cov gcov &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ chmod +x llvm-gcov.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="build-your-application"&gt;
&lt;h2&gt;Build Your Application&lt;/h2&gt;
&lt;p&gt;To track the code coverage, clang has to instrument your application.  You have
to compile your application with two extra options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-fprofile-arcs -ftest-coverage
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, given the &lt;code&gt;test.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GOT: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We should compile the file with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ clang -fprofile-arcs -ftest-coverage test.c
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will notice that there is an extra file &lt;code&gt;test.gcno&lt;/code&gt; being generated.
It is some data structure for run-time supporting library.&lt;/p&gt;
&lt;p&gt;Notice that if you are compiling the source code in two steps, i.e. compiling
the source code with &lt;code&gt;-c&lt;/code&gt; option, then you have to add &lt;code&gt;--coverage&lt;/code&gt;
to the LDFLAGS so that the program can linked with the run-time library
properly &lt;a class="reference internal" href="#llvm-gcov-writeout"&gt;[2]&lt;/a&gt;.  For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Compile the object file test.c&lt;/span&gt;
$ clang -fprofile-arcs -ftest-coverage -c test.c

&lt;span class="c1"&gt;# Link the program&lt;/span&gt;
$ clang --coverage test.o -o a.out
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-your-application"&gt;
&lt;h2&gt;Run Your Application&lt;/h2&gt;
&lt;p&gt;Now, we can run the application (or the test cases.)  If everything goes well,
then several &lt;code&gt;*.gcda&lt;/code&gt; will be generated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Run the program or the test cases.&lt;/span&gt;
$ ./a.out

&lt;span class="c1"&gt;# List the *.gcda files&lt;/span&gt;
$ ls *.gcda
test.gcda

&lt;span class="c1"&gt;# Read the *.gcda with llvm-cov&lt;/span&gt;
$ llvm-cov gcov -f -b test.gcda
Function &lt;span class="s1"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;
Lines executed:50.00% of &lt;span class="m"&gt;4&lt;/span&gt;
Branches executed:100.00% of &lt;span class="m"&gt;2&lt;/span&gt;
Taken at least once:50.00% of &lt;span class="m"&gt;2&lt;/span&gt;
No calls

File &lt;span class="s1"&gt;&amp;#39;test.c&amp;#39;&lt;/span&gt;
Lines executed:50.00% of &lt;span class="m"&gt;4&lt;/span&gt;
Branches executed:100.00% of &lt;span class="m"&gt;2&lt;/span&gt;
Taken at least once:50.00% of &lt;span class="m"&gt;2&lt;/span&gt;
No calls
test.c:creating &lt;span class="s1"&gt;&amp;#39;test.c.gcov&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="collect-the-results"&gt;
&lt;h2&gt;Collect the Results&lt;/h2&gt;
&lt;p&gt;Finally, we can collect the results and generate HTML files.  However, please
notice that LLVM is generating GCOV files with old version (approximately equal
to gcc 4.2), thus it is likely to be incompatible with the &lt;code&gt;gcov&lt;/code&gt; command.
As a result, we have to specify &lt;code&gt;--gcov-tool&lt;/code&gt; while running &lt;a class="reference external" href="http://ltp.sourceforge.net/coverage/lcov.php"&gt;lcov&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Collect the code coverage results&lt;/span&gt;
$ lcov --directory . &lt;span class="se"&gt;\&lt;/span&gt;
       --base-directory . &lt;span class="se"&gt;\&lt;/span&gt;
       --gcov-tool llvm-gcov.sh &lt;span class="se"&gt;\&lt;/span&gt;
       --capture -o cov.info

&lt;span class="c1"&gt;# Generate HTML files.&lt;/span&gt;
$ genhtml cov.info -o output
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;p.s. Notice that we should specify our wrapper script &lt;code&gt;llvm-gcov.sh&lt;/code&gt;
&lt;a class="reference internal" href="#create-a-wrapper-script-for-lcov"&gt;created earlier&lt;/a&gt; instead of &lt;code&gt;llvm-cov&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, we can see the code coverage report at &lt;code&gt;output/index.html&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, I have introduced how to generate code coverage report with
&lt;a class="reference external" href="http://ltp.sourceforge.net/coverage/lcov.php"&gt;lcov&lt;/a&gt; while building the application with clang.  Hope you enjoy this article.
Feel free to let me know if you have any questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;div class="section" id="can-t-find-libclang-rt-profile-x86-64-a"&gt;
&lt;span id="clang-rt-profile"&gt;&lt;/span&gt;&lt;h3&gt;Can't Find libclang_rt.profile-x86_64.a&lt;/h3&gt;
&lt;p&gt;If you see following link error message, it means that you haven't built clang
with compiler-rt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/ld: cannot find libclang_rt.profile-x86_64.a: No such file or directory
clang-3.7: error: linker command failed with exit code 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="link-error-while-building-application"&gt;
&lt;span id="llvm-gcov-writeout"&gt;&lt;/span&gt;&lt;h3&gt;Link Error While Building Application&lt;/h3&gt;
&lt;p&gt;Without the &lt;code&gt;--coverage&lt;/code&gt; option, you might see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test.o: In function `__llvm_gcov_writeout&amp;#39;:
test.c:(.text+0xf2): undefined reference to `llvm_gcda_start_file&amp;#39;
test.c:(.text+0x118): undefined reference to `llvm_gcda_emit_function&amp;#39;
test.c:(.text+0x12c): undefined reference to `llvm_gcda_emit_arcs&amp;#39;
test.c:(.text+0x131): undefined reference to `llvm_gcda_summary_info&amp;#39;
test.c:(.text+0x136): undefined reference to `llvm_gcda_end_file&amp;#39;
test.o: In function `__llvm_gcov_init&amp;#39;:
test.c:(.text+0x1a9): undefined reference to `llvm_gcov_init&amp;#39;
clang-3.7: error: linker command failed with exit code 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="llvm"></category><category term="clang"></category><category term="lcov"></category><category term="test"></category></entry><entry><title>Trace Source Code with Vim and Ctags</title><link href="http://logan.tw/posts/2015/03/10/trace-source-code-with-vim-and-ctags/" rel="alternate"></link><published>2015-03-10T23:01:00+08:00</published><updated>2015-05-19T08:09:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-03-10:/posts/2015/03/10/trace-source-code-with-vim-and-ctags/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;Ctags&lt;/a&gt; is a source code indexing tool.  With &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;, we can easily find the
definitions of the classes, functions, and variables.  According to my
experiences, &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt; can significantly reduce the time to browse the source
code.  In this post, I would like to give a brief introduction to &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt; and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;Ctags&lt;/a&gt; is a source code indexing tool.  With &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;, we can easily find the
definitions of the classes, functions, and variables.  According to my
experiences, &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt; can significantly reduce the time to browse the source
code.  In this post, I would like to give a brief introduction to &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt; and
&lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First, we have to install &lt;code&gt;exuberant-ctags&lt;/code&gt; package for &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;.  On
Ubuntu or Debian, we can install &lt;code&gt;exuberant-ctags&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install exuberant-ctags
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, I would suggest to &lt;em&gt;tweak&lt;/em&gt; the &lt;code&gt;.vimrc&lt;/code&gt; as well.  By default,
&lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; will only load the &lt;strong&gt;tags file&lt;/strong&gt; from:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;the current working directory, or&lt;/li&gt;
&lt;li&gt;the directory containing the opened source file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, if you have opened the file &lt;code&gt;foo/bar.c&lt;/code&gt;, then &lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; will
only check the &lt;strong&gt;tags file&lt;/strong&gt; named after &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;TAGS&lt;/code&gt;,
&lt;code&gt;foo/tags&lt;/code&gt;, or &lt;code&gt;foo/TAGS&lt;/code&gt;.  However, the &lt;strong&gt;tags file&lt;/strong&gt; in the
parent directories, such as &lt;code&gt;../../tags&lt;/code&gt; won't be considered.&lt;/p&gt;
&lt;p&gt;To ask &lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; to search for &lt;strong&gt;tags file&lt;/strong&gt; in the parent directories, we should
add an extra semicolon &lt;code&gt;;&lt;/code&gt; after &lt;code&gt;./tags&lt;/code&gt; and &lt;code&gt;./TAGS&lt;/code&gt;.  For
example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;.&lt;span class="sr"&gt;/tags;,./&lt;/span&gt;TAGS;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;TAGS
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, if you wish to put the generated &lt;strong&gt;tags file&lt;/strong&gt; in the &lt;code&gt;.git&lt;/code&gt;
directory so that the &lt;strong&gt;tags file&lt;/strong&gt; won't be added to git repository, then you
may wish to add the following snippets to the &lt;code&gt;.vimrc&lt;/code&gt; as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; Check .git/tags for ctags file.&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; FindTagsFileInGitDir&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nb"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; fnamemodify&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:p:h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;path&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; fname &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;path&lt;/span&gt; . &lt;span class="s1"&gt;&amp;#39;/.git/tags&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; filereadable&lt;span class="p"&gt;(&lt;/span&gt;fname&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; exec &lt;span class="s1"&gt;&amp;#39;set tags+=&amp;#39;&lt;/span&gt; . fname
    &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nb"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; fnamemodify&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;endwhile&lt;/span&gt;
&lt;span class="k"&gt;endfun&lt;/span&gt;

augroup CtagsGroup
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;BufRead&lt;/span&gt; * &lt;span class="k"&gt;call&lt;/span&gt; FindTagsFileInGitDir&lt;span class="p"&gt;(&lt;/span&gt;expand&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;afile&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
augroup END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This snippet allows &lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; to search for the &lt;strong&gt;tags file&lt;/strong&gt; in the &lt;code&gt;.git&lt;/code&gt;
directory of the parent directories of the source file, such as
&lt;code&gt;../../.git/tags&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;After installation, we have to generate the &lt;strong&gt;tags file&lt;/strong&gt; as the index.  We
can generate the &lt;strong&gt;tags file&lt;/strong&gt; with the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ctags -R &lt;span class="o"&gt;[&lt;/span&gt;dir&lt;span class="o"&gt;]&lt;/span&gt;
$ ctags -R -f &lt;span class="o"&gt;[&lt;/span&gt;tags-file&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;dir&lt;span class="o"&gt;]&lt;/span&gt;
$ ctags --tag-relative&lt;span class="o"&gt;=&lt;/span&gt;yes -R -f &lt;span class="o"&gt;[&lt;/span&gt;tags-file&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;dir&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usually, I prefer to run this command in the git repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ctags --tag-relative&lt;span class="o"&gt;=&lt;/span&gt;yes -R -f .git/tags .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is highly recommended to add &lt;code&gt;--tag-relative=yes&lt;/code&gt; to the &lt;code&gt;ctags&lt;/code&gt;
command.  Without this option, &lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; won't be able to open the correct source
file under certain circumstances.&lt;/p&gt;
&lt;p&gt;Sometimes, there might be some special naming convention in your project.  To
index those files, we can change the programming language map with
&lt;code&gt;--langmap&lt;/code&gt; option.  For example, to treat the &lt;code&gt;.inc&lt;/code&gt; file
extension as C++ source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ctags --langmap&lt;span class="o"&gt;=&lt;/span&gt;c++:+*.inc ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This options &lt;em&gt;adds&lt;/em&gt; &lt;code&gt;.inc&lt;/code&gt; to the C++ file extensions (in addition to the
default file extensions such as &lt;code&gt;.c&lt;/code&gt;, &lt;code&gt;.cpp&lt;/code&gt;, and etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-keys"&gt;
&lt;h2&gt;Vim Keys&lt;/h2&gt;
&lt;p&gt;After generating the &lt;strong&gt;tags file&lt;/strong&gt;, we can browse the source code with
&lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; and &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;.  &lt;a class="reference external" href="http://www.vim.org"&gt;Vim&lt;/a&gt; has excellent built-in support for &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;.
We can simply jump to or preview the definition with a little key stroke.
Here are some combinations for your reference.&lt;/p&gt;
&lt;div class="section" id="basic-usage"&gt;
&lt;h3&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;First, we can jump to the matching patterns with the &lt;code&gt;:ta&lt;/code&gt; command.
If we are not satisfied by the first match, we can jump to the &lt;em&gt;next match&lt;/em&gt;
with &lt;code&gt;:tn&lt;/code&gt;.  Conversely, we can jump to the &lt;em&gt;previous match&lt;/em&gt; with
&lt;code&gt;:tN&lt;/code&gt;.  We can also list all matches with &lt;code&gt;:ts&lt;/code&gt;.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="75%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Command&lt;/th&gt;
&lt;th class="head"&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;:ta [pattern]&lt;/td&gt;
&lt;td&gt;Jump to the best matching tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:ta /[regex]&lt;/td&gt;
&lt;td&gt;Jump to the best matching tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:ts [pattern]&lt;/td&gt;
&lt;td&gt;List the tags and jump to the selected one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:ts /[regex]&lt;/td&gt;
&lt;td&gt;List the tags and jump to the selected one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:tn&lt;/td&gt;
&lt;td&gt;Jump to next matching tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:tN&lt;/td&gt;
&lt;td&gt;Jump to previous matching tag&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here are some tips to search for the &lt;strong&gt;keyword pointed by the cursor&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To show the best matching in the new window, press &lt;code&gt;Ctrl+W&lt;/code&gt; then
&lt;code&gt;]&lt;/code&gt;.  &lt;strong&gt;(This is my favorite!)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;To list all matchings and show the selected one in the new window, press
&lt;code&gt;Ctrl+W&lt;/code&gt; then &lt;code&gt;g]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To jump to the best matching directly, press &lt;code&gt;Ctrl+]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To list all matchings and jump to selected one, press &lt;code&gt;g]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To search a pattern by selection, press &lt;code&gt;v&lt;/code&gt; to enter visual mode,
select the text, and press either &lt;code&gt;Ctrl+]&lt;/code&gt; or &lt;code&gt;g]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="preview-window"&gt;
&lt;h4&gt;Preview Window&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;preview window&lt;/strong&gt; is a separated window that will pop up on the top for
quick reference.  Unlike the &amp;quot;&lt;code&gt;Ctrl-W&lt;/code&gt; then &lt;code&gt;]&lt;/code&gt;&amp;quot; command mentioned
above, the cursor won't be moved to the preview window.&lt;/p&gt;
&lt;p&gt;To preview the keywords pointed by the cursor, press &lt;code&gt;Ctrl-W&lt;/code&gt; and
&lt;code&gt;}&lt;/code&gt;.  Alternatively, we can open the preview window by the &lt;code&gt;:pt&lt;/code&gt;
command.  To close the preview window, use the &lt;code&gt;:pc&lt;/code&gt; command.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="75%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Command&lt;/th&gt;
&lt;th class="head"&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;:pt [pattern]&lt;/td&gt;
&lt;td&gt;Preview the best matching tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:ptn&lt;/td&gt;
&lt;td&gt;Preview the next matching tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:ptN&lt;/td&gt;
&lt;td&gt;Preview the previous matching tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:pc&lt;/td&gt;
&lt;td&gt;Close the preview window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tag-stack"&gt;
&lt;h3&gt;Tag Stack&lt;/h3&gt;
&lt;p&gt;If we jump to a matching tag with &lt;code&gt;:ta&lt;/code&gt; or &lt;code&gt;g]&lt;/code&gt;, we may wish to go
back and forth.  When we jump to a new tag, the current position will be pushed
to the &lt;strong&gt;tag stack&lt;/strong&gt;.  To go back to previous position (i.e. pop the tag
stack), we can use the &lt;code&gt;:po&lt;/code&gt; command.  To go forward, we can use the
&lt;code&gt;:ta&lt;/code&gt; command.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="23%" /&gt;
&lt;col width="77%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Command&lt;/th&gt;
&lt;th class="head"&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;:tags&lt;/td&gt;
&lt;td&gt;List the tag stack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:po&lt;/td&gt;
&lt;td&gt;Pop the tag stack (go up)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:[n]po&lt;/td&gt;
&lt;td&gt;Pop &lt;code&gt;n&lt;/code&gt; items from the tag stack (go up)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:ta&lt;/td&gt;
&lt;td&gt;Push the tag stack (go down)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;:[n]ta&lt;/td&gt;
&lt;td&gt;Push &lt;code&gt;n&lt;/code&gt; items to the tag stack (go down)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we gave a brief introduction to the basic usages of &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;.  We
have mentioned some handy &lt;code&gt;.vimrc&lt;/code&gt; tweaks and some important &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;
option.  Besides, we have walked through several useful &lt;a class="reference external" href="http://www.vim.org"&gt;vim&lt;/a&gt; commands for
code browsing and navigation.  This should would be sufficient for most
use cases.  You can find more materials from the references.&lt;/p&gt;
&lt;p&gt;Last, but not the least, I would like to say that &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt; is an amazing source
code indexing tool.  I found my programming productivity has been significantly
improved by &lt;a class="reference external" href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;.  Hope you enjoy it too.  Happy coding!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Andrew Stewart, &lt;a class="reference external" href="http://andrew.stwrt.ca/posts/vim-ctags"&gt;Vim and Ctags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vim Wikia, &lt;a class="reference external" href="http://vim.wikia.com/wiki/Browsing_programs_with_tags"&gt;Browsing programs with tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vim Documentation, &lt;a class="reference external" href="http://vimdoc.sourceforge.net/htmldoc/tagsrch.html#tags"&gt;Tags and special searches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="c"></category><category term="cxx"></category><category term="vim"></category><category term="ctags"></category></entry><entry><title>Git Ignore File</title><link href="http://logan.tw/posts/2015/02/28/git-ignore-file/" rel="alternate"></link><published>2015-02-28T14:19:00+08:00</published><updated>2015-02-28T14:19:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-02-28:/posts/2015/02/28/git-ignore-file/</id><summary type="html">&lt;p&gt;In some circumstances, we would like to ignore the files (or directories) under
the Git repository base directory.  How could we do this?  For example, assume
that we have a Git repository with following files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;out/bin/conv
preprocessed/out/gen-case1.h
preprocessed/out/gen-case2.h
preprocessed/input.txt
conv …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In some circumstances, we would like to ignore the files (or directories) under
the Git repository base directory.  How could we do this?  For example, assume
that we have a Git repository with following files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;out/bin/conv
preprocessed/out/gen-case1.h
preprocessed/out/gen-case2.h
preprocessed/input.txt
conv.cpp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we would like to ignore the &lt;code&gt;out&lt;/code&gt; directory but not the
&lt;code&gt;preprocessed/out&lt;/code&gt; directory, then we can add following line to
&lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/out
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that there is an &lt;strong&gt;leading slash character&lt;/strong&gt; at the beginning of
the path.  Without the leading slash, all of the files (or directories) named
after &lt;code&gt;out&lt;/code&gt; will be ignored.&lt;/p&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git-scm.com/docs/gitignore"&gt;http://git-scm.com/docs/gitignore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="git"></category></entry><entry><title>Using Aria2 Download Manager</title><link href="http://logan.tw/posts/2015/02/21/using-aria2-download-manager/" rel="alternate"></link><published>2015-02-21T23:02:00+08:00</published><updated>2015-02-21T23:02:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-02-21:/posts/2015/02/21/using-aria2-download-manager/</id><summary type="html">&lt;p&gt;I used to download the large files with &lt;code&gt;wget&lt;/code&gt; because I can simply
resume the download tasks with &lt;code&gt;-c&lt;/code&gt; option.  This option will check
the size of the output file, and download the rest of the file from the server.
I can even restart the download task with a &lt;strong&gt;different …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I used to download the large files with &lt;code&gt;wget&lt;/code&gt; because I can simply
resume the download tasks with &lt;code&gt;-c&lt;/code&gt; option.  This option will check
the size of the output file, and download the rest of the file from the server.
I can even restart the download task with a &lt;strong&gt;different URI&lt;/strong&gt;.  This &lt;em&gt;feature&lt;/em&gt;
is not available in many sophisticated download managers.&lt;/p&gt;
&lt;p&gt;Recently, I came across &lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt;, which is a command line download manager
which supports lots of protocols, including HTTP, FTP, BitTorrents, and etc.
Similar to &lt;code&gt;wget&lt;/code&gt;, I can resume the download tasks without problems!  And
there are several features which are not available in &lt;code&gt;wget&lt;/code&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Multiple tasks and scheduling&lt;/li&gt;
&lt;li&gt;Split the download task and download the file in parallel&lt;/li&gt;
&lt;li&gt;Web UI&lt;/li&gt;
&lt;li&gt;&lt;em&gt;... and etc&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, I would like to give a brief introduction to &lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Before we can start our discussion, we have to install &lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;To install &lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt; on Ubuntu (or Debian), run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install aria2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Besides, check the file permission of your &lt;code&gt;.netrc&lt;/code&gt; file.  It should be
600, i.e. only the owner can read or write the file.  You can change the
file permission with following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ chmod &lt;span class="m"&gt;600&lt;/span&gt; ~/.netrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="download-files-with-aria2"&gt;
&lt;h2&gt;Download Files with Aria2&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt; is similar to &lt;code&gt;wget&lt;/code&gt; command line tool.  We can simply download
the files with &lt;code&gt;aria2c&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c &lt;span class="o"&gt;[&lt;/span&gt;URI&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, to download the Debian 7.8 minimal CD image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c http://cdimage.debian.org/debian-cd/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can specify the output file name with &lt;code&gt;-o&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c &lt;span class="o"&gt;[&lt;/span&gt;URI&lt;span class="o"&gt;]&lt;/span&gt; -o &lt;span class="o"&gt;[&lt;/span&gt;filename&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To resume a download task, we can specify the &lt;code&gt;-c&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c -c &lt;span class="o"&gt;[&lt;/span&gt;URI&lt;span class="o"&gt;]&lt;/span&gt;
$ aria2c -c &lt;span class="o"&gt;[&lt;/span&gt;URI&lt;span class="o"&gt;]&lt;/span&gt; -o &lt;span class="o"&gt;[&lt;/span&gt;filename&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we wish to download a file parallelly, we can try the &lt;code&gt;-x&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c -x&lt;span class="o"&gt;[&lt;/span&gt;num-parts&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;URI&lt;span class="o"&gt;]&lt;/span&gt;
$ aria2c -x2 &lt;span class="o"&gt;[&lt;/span&gt;URI&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Split the task into two parts.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-aria2-as-a-daemon"&gt;
&lt;h2&gt;Run Aria2 as a Daemon&lt;/h2&gt;
&lt;p&gt;If we wish to use &lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt; as a download manager, we should run &lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt; as a
daemon.&lt;/p&gt;
&lt;p&gt;To start the Aria2 daemon:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c --enable-rpc --rpc-listen-all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, &lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt; will perform 5 tasks at the same time, to change the
number of concurrent download tasks, we can specify the &lt;code&gt;-j&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c --enable-rpc --rpc-listen-all -j&lt;span class="o"&gt;[&lt;/span&gt;num-parallel&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, to download the files sequentially:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2c --enable-rpc --rpc-listen-all -j1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After starting the Aria2 daemon, click here for the &lt;a class="reference external" href="http://ziahamza.github.io/webui-aria2/"&gt;Aria2 Web UI&lt;/a&gt;.  You can
add/remove the download tasks in the &lt;a class="reference external" href="http://ziahamza.github.io/webui-aria2/"&gt;Aria2 Web UI&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="control-daemon-with-aria2rpc"&gt;
&lt;h2&gt;Control Daemon with aria2rpc&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://aria2.sourceforge.net/"&gt;Aria2&lt;/a&gt; provides a command line tool, &lt;code&gt;aria2rpc&lt;/code&gt;, to control the daemon.
However, it is not installed by default.&lt;/p&gt;
&lt;p&gt;To obtain &lt;code&gt;aria2rpc&lt;/code&gt;, run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat /usr/share/doc/aria2/xmlrpc/aria2rpc.gz &lt;span class="p"&gt;|&lt;/span&gt; gzip -d &amp;gt; aria2rpc
$ chmod +x aria2rpc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these steps, move &lt;code&gt;aria2rpc&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, so that we
can run &lt;code&gt;aria2rpc&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Now, we can add a download task with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2rpc addUri &lt;span class="o"&gt;[&lt;/span&gt;URI&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;task-id&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After adding a download task, an ID will be printed.  We can remove a task
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2rpc remove &lt;span class="o"&gt;[&lt;/span&gt;task-id&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may find more usages with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aria2rpc --help
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="aria2"></category></entry><entry><title>C++11 Unique Pointer</title><link href="http://logan.tw/posts/2015/01/31/c11-unique-pointer/" rel="alternate"></link><published>2015-01-31T23:04:00+08:00</published><updated>2015-01-31T23:04:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-01-31:/posts/2015/01/31/c11-unique-pointer/</id><summary type="html">&lt;p&gt;C++11 introduced three new &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/memory"&gt;smart pointer class templates&lt;/a&gt;:
&lt;code&gt;std::unique_ptr&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt;, and &lt;code&gt;std::weak_ptr&lt;/code&gt;.
These smart pointer class templates are designed to replace the old
&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/memory/auto_ptr"&gt;std::auto_ptr&lt;/a&gt; smart pointer, which is known to have some defect and
deprecated now.  In this post, I would like to give a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;C++11 introduced three new &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/memory"&gt;smart pointer class templates&lt;/a&gt;:
&lt;code&gt;std::unique_ptr&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt;, and &lt;code&gt;std::weak_ptr&lt;/code&gt;.
These smart pointer class templates are designed to replace the old
&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/memory/auto_ptr"&gt;std::auto_ptr&lt;/a&gt; smart pointer, which is known to have some defect and
deprecated now.  In this post, I would like to give a brief introduction to
&lt;code&gt;std::unique_ptr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The unique pointer is designed to be a &lt;strong&gt;fast&lt;/strong&gt; smart pointer that has an
&lt;strong&gt;exclusive ownership&lt;/strong&gt; of the pointee.  The unique pointer is responsible to
delete the pointee whenever the unique pointer is reset or destructed.&lt;/p&gt;
&lt;div class="section" id="basic-usage"&gt;
&lt;h2&gt;Basic Usage&lt;/h2&gt;
&lt;p&gt;Here are the basic usages of unique pointer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;()&lt;/code&gt; -- Default constructor which constructs an
null pointer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;(T* p)&lt;/code&gt; -- Construct an unique pointer from a the
raw pointer &lt;code&gt;p&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt; -- Get the raw pointer stored in the unique pointer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset(T* p)&lt;/code&gt; -- Delete the pointee and reset to &lt;code&gt;p&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; -- Delete the pointee and reset to &lt;code&gt;nullptr&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release()&lt;/code&gt; -- Return the raw pointer and set the unique pointer to
&lt;code&gt;nullptr&lt;/code&gt;.  This function does not delete the pointee.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A::A(this=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A::~A(this=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A::test()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TEST1: constructor and get()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p1.get() = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p2.get() = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Call the member function&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TEST2: reset()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p.get() = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p.get() = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p.get() = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p.get() = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TEST3: release()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: unique pointer p&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### END: unique pointer p&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="movable-but-non-copyable"&gt;
&lt;h2&gt;Movable but Non-copyable&lt;/h2&gt;
&lt;p&gt;To ensure the exclusive ownership guarantee, the unique pointer is designed
to be non-copyable.  In the other words, you can't create an unique pointer
by copying the other unique pointer instance.  For example, the following code
is illegal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;example1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// WON&amp;#39;T COMPILE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This doesn't compile either:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;example2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// WON&amp;#39;T COMPILE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fortunately, the unique pointer is movable, thus we can return an unique
pointer without problems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;create_instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_instance&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, the unique pointer can be assigned from
&lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;&amp;amp;&amp;amp;&lt;/code&gt;, the R-value reference to the unique pointer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;build_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// OK&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that in this example, the &lt;code&gt;std::move()&lt;/code&gt; is essential.
We have to cast the local variable &lt;code&gt;tmp&lt;/code&gt; to &lt;code&gt;std::unique_ptr&amp;lt;A&amp;gt;&amp;amp;&amp;amp;&lt;/code&gt;
with &lt;code&gt;std::move(tmp)&lt;/code&gt;; otherwise, the code won't compile because
&lt;code&gt;tmp&lt;/code&gt; is an L-value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="derived-class"&gt;
&lt;h2&gt;Derived Class&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt; is similar to the raw pointer type &lt;code&gt;T*&lt;/code&gt;.
If class B is derived from class A, then we can upcast
&lt;code&gt;std::unique_ptr&amp;lt;B&amp;gt;&lt;/code&gt; to &lt;code&gt;std::unique_ptr&amp;lt;A&amp;gt;&lt;/code&gt;.  However,
similar to the raw pointer, the late binding will only happen on the
virtual functions.  For the non-virtual functions, the callee function
will be statically resolved at compile time.  This rule also applies to
the destructor of the pointee.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... Skipped ... */&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B::B(this=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B::~B(this=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### TEST 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### TEST 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;### TEST 1
A::A(this=0xa6d010)
B::B(this=0xa6d010)
A::~A(this=0xa6d010)

### TEST 2
A::A(this=0xa6d010)
B::B(this=0xa6d010)
B::~B(this=0xa6d010)
A::~A(this=0xa6d010)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the object allocated at address 0xa6d010 is not destructed with
&lt;code&gt;B::~B()&lt;/code&gt;.  Conceptually, the &lt;code&gt;main()&lt;/code&gt; function above is equivalent
to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### TEST 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;pa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### TEST 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the destructor of A is not declared as virtual, the invocation of the
destructor won't be dynamically dispatched.  To fix the problem, we have to
declare &lt;code&gt;A::~A()&lt;/code&gt; as virtual.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pointer-to-array"&gt;
&lt;h2&gt;Pointer to Array&lt;/h2&gt;
&lt;p&gt;The unique pointer can point to an array as well.  However, it is important
that the pointer type should be &lt;code&gt;A[]&lt;/code&gt; instead of &lt;code&gt;A&lt;/code&gt;.  If the
element type is incorrect, then the default deleter won't be able to delete
the array properly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Correct Example&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Incorrect Example&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the output of the code snippet above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A::A(this=0x2161018)
A::A(this=0x2161019)
A::A(this=0x216101a)
A::~A(this=0x216101a)
A::~A(this=0x2161019)
A::~A(this=0x2161018)

A::A(this=0x2161018)
A::A(this=0x2161019)
A::A(this=0x216101a)
A::~A(this=0x216101a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the second unique pointer will only delete the first element
of the array since the unique pointer thought it was only pointing to one
element.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-deleter"&gt;
&lt;h2&gt;Custom Deleter&lt;/h2&gt;
&lt;p&gt;In fact, the unique pointer class template &lt;code&gt;std::unique_ptr&amp;lt;T, D&amp;gt;&lt;/code&gt;
has two template parameters.  The first template parameter is the pointee
type, and the second template parameter is the &lt;strong&gt;deleter type&lt;/strong&gt;.  With the
deleter type, we can customize the destruction policy of the pointee.&lt;/p&gt;
&lt;p&gt;If the programmer doesn't specify the deleter type, then the default deleter
will be &lt;code&gt;std::default_delete&lt;/code&gt;.  The default deleter will destruct the
object with &lt;code&gt;delete&lt;/code&gt; operator when &lt;code&gt;T&lt;/code&gt; is a non-array type and
destruct the object with &lt;code&gt;delete[]&lt;/code&gt; operator when &lt;code&gt;T&lt;/code&gt; is an
array type.&lt;/p&gt;
&lt;p&gt;In the following example, we are going to define a &lt;code&gt;ExampleDeleter&lt;/code&gt;
function object which will call the object pool to reclaim and recycle the
pointee instead of deleting the pointee:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cassert&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExamplePool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;ExamplePool&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pool_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExamplePool&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pool_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Example::Example(this=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Example::~Example(this=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;reclaim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleDeleter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reclaim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExamplePool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ExampleDeleter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;free_list_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;Handle&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emplace_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Reuse: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;free_list_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;reclaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Reclaim: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;*&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;free_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free_list_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;used_list_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ptr not found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;reclaim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;pool_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reclaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ExamplePool&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### END: h2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h3&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h4&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### END: h3, h4&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### END: h1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h5&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h6&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h7&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h8&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h9&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h9&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### END: h6, h7, h8, h9&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### BEGIN: h10&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;h10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;### END: h5, h10&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linked-list-example"&gt;
&lt;h2&gt;Linked List Example&lt;/h2&gt;
&lt;p&gt;Finally, I would like to demonstrate that can implement the singly linked
list with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;next_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;List::List(this=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;List::~List(this=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;next_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;insert_after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;next_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;---- BEGIN first&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;---- BEGIN second&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insert_after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;---- END second&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;---- END first&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, I have given a brief introduction to &lt;code&gt;std::unique_ptr&lt;/code&gt;.
We started from the basic usage of unique pointer and then we went through
different topics including the pointer to derived classes, the pointer to
array, and the unique pointer deleter.  Finally, we showed that we can build
a simple singly linked list with &lt;code&gt;std::unique_ptr&lt;/code&gt;.  Hope you enjoy
this article.&lt;/p&gt;
&lt;p&gt;In the next post, I would like to introduce the usage of the shared
smart pointers.  Both &lt;code&gt;std::shared_ptr&lt;/code&gt; and &lt;code&gt;std::weak_ptr&lt;/code&gt;
are included.  Stay in tune!  :-)&lt;/p&gt;
&lt;/div&gt;
</content><category term="cxx"></category></entry><entry><title>C++ std::multimap and Equal Range</title><link href="http://logan.tw/posts/2015/01/20/c-stdmultimap-and-equal-range/" rel="alternate"></link><published>2015-01-20T23:17:00+08:00</published><updated>2015-01-20T23:17:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-01-20:/posts/2015/01/20/c-stdmultimap-and-equal-range/</id><summary type="html">&lt;p&gt;Today I have encountered a problem: Given that there are multiple equivalent
keys in an instance of &lt;code&gt;std::multimap&lt;/code&gt;, how could we list all of the
corresponding values?  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Today I have encountered a problem: Given that there are multiple equivalent
keys in an instance of &lt;code&gt;std::multimap&lt;/code&gt;, how could we list all of the
corresponding values?  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// How to list all of the values associated with key 2?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My first attempt is to look for the values with the &lt;code&gt;find()&lt;/code&gt; function,
and then keep iterating until the iterator is equal to the returned value of
&lt;code&gt;end()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// XXX: INCORRECT SOLUTION&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; : &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the output should shows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2 : 21
2 : 22
2 : 23
3 : 32
3 : 33
3 : 31
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is &lt;strong&gt;incorrect&lt;/strong&gt; at all!&lt;/p&gt;
&lt;p&gt;After checking the &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/container/multimap"&gt;documentation for std::multimap&lt;/a&gt;, I found that the
&lt;code&gt;find()&lt;/code&gt; member function only guarantees the returned iterator will point
to one matching key-value pair (any will do.)  In the other words, the standard
doesn't even guarantee the code above would list all of the associated values.&lt;/p&gt;
&lt;div class="section" id="equal-range"&gt;
&lt;h2&gt;Equal Range&lt;/h2&gt;
&lt;p&gt;The correct solution is to use the &lt;code&gt;equal_range()&lt;/code&gt; member function to get
a pair of iterators indicating the range of the associated values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// List all of the values associated with key 2.&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equal_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; : &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;equal_range()&lt;/code&gt; member function is also available in the other
&lt;strong&gt;associative containers&lt;/strong&gt; (e.g. &lt;code&gt;std::set&lt;/code&gt;, &lt;code&gt;std::map&lt;/code&gt;,
&lt;code&gt;std::multiset&lt;/code&gt;, and &lt;code&gt;std::multimap&lt;/code&gt;) and the &lt;strong&gt;unordered
associative containers&lt;/strong&gt; (e.g. &lt;code&gt;std::unordered_set&lt;/code&gt;,
&lt;code&gt;std::unordered_map&lt;/code&gt;, &lt;code&gt;std::unordered_multiset&lt;/code&gt; and
&lt;code&gt;std::unordered_multimap&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lower-bound-and-upper-bound"&gt;
&lt;h2&gt;Lower Bound and Upper Bound&lt;/h2&gt;
&lt;p&gt;For the &lt;strong&gt;associative containers&lt;/strong&gt;, I found that we can go even further.  We
can look for the keys between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; with
&lt;code&gt;lower_bound(a)&lt;/code&gt; and &lt;code&gt;upper_bound(b)&lt;/code&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;code&gt;lower_bound()&lt;/code&gt; function will return the iterator to the first
element with the key which is &lt;em&gt;NOT less than&lt;/em&gt; the given key.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;upper_bound()&lt;/code&gt; function will return the iterator to the first
element with the key which is &lt;em&gt;greater than&lt;/em&gt; the given key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, we can list all of the values associated with the keys between 2
and 5 with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// List all of the values associated with key betwen 2 and 5.&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower_bound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper_bound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; : &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To wrap up this post, I would like to recall that there are three member
functions mentioned in this post: &lt;code&gt;equal_range()&lt;/code&gt;, &lt;code&gt;lower_bound()&lt;/code&gt;,
and &lt;code&gt;upper_bound()&lt;/code&gt;.  With these functions, we can efficiently find the
key in the associative containers and iterate the corresponding values.  Hope
you enjoy this article and thanks for your reading.&lt;/p&gt;
&lt;/div&gt;
</content><category term="cxx"></category><category term="stl"></category></entry><entry><title>Waliki Installation</title><link href="http://logan.tw/posts/2015/01/02/waliki-installation/" rel="alternate"></link><published>2015-01-02T11:20:00+08:00</published><updated>2015-01-02T11:20:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-01-02:/posts/2015/01/02/waliki-installation/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/mgaitan/waliki"&gt;Waliki&lt;/a&gt; is a simple wiki app for &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;.  We can write wiki contents with
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; and the contents will be stored in a &lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt; repository.
In this post, I would like to introduce the instructions to install &lt;a class="reference external" href="https://github.com/mgaitan/waliki"&gt;Waliki&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;First, install the related Ubuntu packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install git …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/mgaitan/waliki"&gt;Waliki&lt;/a&gt; is a simple wiki app for &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;.  We can write wiki contents with
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; and the contents will be stored in a &lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt; repository.
In this post, I would like to introduce the instructions to install &lt;a class="reference external" href="https://github.com/mgaitan/waliki"&gt;Waliki&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;First, install the related Ubuntu packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install git python3 python-virtualenv &lt;span class="se"&gt;\&lt;/span&gt;
      libpython3-dev libxml2-dev libxslt1-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, create a new Python virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir waliki
$ &lt;span class="nb"&gt;cd&lt;/span&gt; waliki
$ virtualenv ENV --no-site-packages --python&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/python3
$ &lt;span class="nb"&gt;source&lt;/span&gt; ENV/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, install the Python packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;$ pip install waliki rst2pdf hovercraft &lt;span class="se"&gt;\&lt;/span&gt;
                   django-sendfile django-allauth
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fourth, create a new Django project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;$ django-admin startproject waliki_site
&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; waliki_site
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fifth, edit the site settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;$ vim waliki_site/settings.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following lines to &lt;code&gt;waliki_site/settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth.account.context_processors.account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.core.context_processors.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;AUTHENTICATION_BACKENDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth.account.auth_backends.AuthenticationBackend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SITE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following Django apps to &lt;code&gt;INSTALLED_APPS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;# BEGIN OF CHANGE - Extra Django Apps for Waliki&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;waliki&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;waliki.git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;waliki.attachments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;waliki.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;waliki.slides&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;allauth.account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# END OF CHANGE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following lines to &lt;code&gt;waliki_site/urls.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# Examples:&lt;/span&gt;
    &lt;span class="c1"&gt;# url(r&amp;#39;^$&amp;#39;, &amp;#39;waliki_site.views.home&amp;#39;, name=&amp;#39;home&amp;#39;),&lt;/span&gt;
    &lt;span class="c1"&gt;# url(r&amp;#39;^blog/&amp;#39;, include(&amp;#39;blog.urls&amp;#39;)),&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;

    &lt;span class="c1"&gt;# BEGIN OF CHANGE&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^accounts/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;allauth.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;waliki.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;# END OF CHANGE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sixth, migrate the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;$ python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Seventh, create a super user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;$ python manage.py createsuperuser
Username &lt;span class="o"&gt;(&lt;/span&gt;leave blank to use &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
Email address: username@example.com
Password:
Password &lt;span class="o"&gt;(&lt;/span&gt;again&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, start the development server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;$ python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We should be able to see Waliki at &lt;a class="reference external" href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customize-the-authentication"&gt;
&lt;h2&gt;Customize the Authentication&lt;/h2&gt;
&lt;p&gt;Since I am using Waliki to take my personal notes, I &lt;strong&gt;don't want&lt;/strong&gt; the wiki to
be edited by the others.  To disable the sign up feature, we have to customize
the account adapter.&lt;/p&gt;
&lt;p&gt;First, add following lines to &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ACCOUNT_ADAPTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;waliki_site.auth.AccountAdapter&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, create &lt;code&gt;waliki_site/auth.py&lt;/code&gt; with following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;allauth.account.adapter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultAccountAdapter&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AccountAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultAccountAdapter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_open_for_signup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these changes, the sign up feature will be disabled.  You can only login
with account created with &lt;code&gt;python manage.py createsuperuser&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deploy-waliki-with-apache-wsgi"&gt;
&lt;h2&gt;Deploy Waliki with Apache WSGI&lt;/h2&gt;
&lt;p&gt;We would like to deploy our Waliki site with Apache and WSGI so that all users
can have access to our Waliki.&lt;/p&gt;
&lt;p&gt;First, we have to install Apache and its WSGI module with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install apache2 libapache2-mod-wsgi-py3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: AFAIK, due to the design of WSGI module, we can't install WSGI module for
both Python 2.x and 3.0.  It is possible to have some problem if you have
installed &lt;code&gt;libapache2-mod-wsgi&lt;/code&gt; at the same time.  Remove
&lt;code&gt;libapache2-mod-wsgi&lt;/code&gt; or try to install Waliki with Python 2 if you have
encountered any problems.&lt;/p&gt;
&lt;p&gt;Second, we have to change &lt;code&gt;waliki_site/wsgi.py&lt;/code&gt; to workaround the
&lt;a class="reference external" href="https://code.google.com/p/modwsgi/wiki/VirtualEnvironments#Application_Environments"&gt;problem related to virtualenv&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim waliki_site/wsgi.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following lines to the beginning of &lt;code&gt;wsgi.py&lt;/code&gt; and change
&lt;code&gt;/PATH/TO/DIR/ENV&lt;/code&gt; to the virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;site&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;ENV_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/PATH/TO/DIR/ENV&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;activate_virtualenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;
    &lt;span class="n"&gt;ver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# Path to executables and site-packages.&lt;/span&gt;
    &lt;span class="n"&gt;bin_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;site_packages_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;site-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add bin_dir to executable search path.&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bin_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pathsep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Add site_packages_dir to the front of sys.path.&lt;/span&gt;
    &lt;span class="n"&gt;prev_sys_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site_packages_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;new_sys_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prev_sys_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_sys_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_sys_path&lt;/span&gt;

&lt;span class="n"&gt;activate_virtualenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENV_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, create a new virtual host configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /etc/apache2/sites-available/waliki.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And add following lines and change &lt;code&gt;/PATH/TO/DIR&lt;/code&gt; and &lt;code&gt;USERNAME&lt;/code&gt;
accordingly:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;lt;VirtualHost *:80&amp;gt;
    Define name waliki_site
    Define base /PATH/TO/DIR
    Define site ${base}/${name}
    Define user USERNAME

    WSGIDaemonProcess ${name} processes=1 threads=15 user=${user} display-name=%{GROUP} home=${site} python-path=${site}:${base}/ENV/lib/python2.7/site-packages
    WSGIProcessGroup ${name}
    WSGIScriptAlias / ${site}/${name}/wsgi.py

    Alias /robots.txt ${site}/static/robots.txt
    Alias /favicon.ico ${site}/static/favicon.ico

    Alias /media/ ${site}/media/
    Alias /static/ ${site}/static/

    &amp;lt;Directory ${site}/static&amp;gt;
        Require all granted
    &amp;lt;/Directory&amp;gt;

    &amp;lt;Directory ${site}/media&amp;gt;
        Require all granted
    &amp;lt;/Directory&amp;gt;

    &amp;lt;Directory ${site}/${name}&amp;gt;
        &amp;lt;Files wsgi.py&amp;gt;
            Require all granted
        &amp;lt;/Files&amp;gt;
    &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Fourth, enable the site with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo a2ensite waliki
$ sudo service apache2 reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, you should be able to see your Waliki installation!&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="wsgi"></category><category term="waliki"></category></entry><entry><title>Python Package Manager: PIP</title><link href="http://logan.tw/posts/2015/01/01/python-package-manager-pip/" rel="alternate"></link><published>2015-01-01T00:14:00+08:00</published><updated>2015-01-01T00:14:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-01-01:/posts/2015/01/01/python-package-manager-pip/</id><summary type="html">&lt;p&gt;The Python package manager &lt;a class="reference external" href="https://pip.pypa.io"&gt;pip&lt;/a&gt; is a tool to manage the installed site
packages.  With &lt;a class="reference external" href="https://pip.pypa.io"&gt;pip&lt;/a&gt;, we don't have to be worried about the package
dependencies anymore.  &lt;a class="reference external" href="https://pip.pypa.io"&gt;pip&lt;/a&gt; will download the required packages from
&lt;a class="reference external" href="https://pypi.python.org"&gt;Python Package Index&lt;/a&gt; automatically.&lt;/p&gt;
&lt;div class="section" id="install-packages"&gt;
&lt;h2&gt;Install Packages&lt;/h2&gt;
&lt;p&gt;To download and install the packages from &lt;a class="reference external" href="https://pypi.python.org"&gt;Python Package Index …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The Python package manager &lt;a class="reference external" href="https://pip.pypa.io"&gt;pip&lt;/a&gt; is a tool to manage the installed site
packages.  With &lt;a class="reference external" href="https://pip.pypa.io"&gt;pip&lt;/a&gt;, we don't have to be worried about the package
dependencies anymore.  &lt;a class="reference external" href="https://pip.pypa.io"&gt;pip&lt;/a&gt; will download the required packages from
&lt;a class="reference external" href="https://pypi.python.org"&gt;Python Package Index&lt;/a&gt; automatically.&lt;/p&gt;
&lt;div class="section" id="install-packages"&gt;
&lt;h2&gt;Install Packages&lt;/h2&gt;
&lt;p&gt;To download and install the packages from &lt;a class="reference external" href="https://pypi.python.org"&gt;Python Package Index&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install package1 package2 package3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, we can install &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; and its dependencies with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In some scenario, we have to install the package with specific version.  We can
achieve this with the version qualifier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install &lt;span class="s1"&gt;&amp;#39;django==1.5&amp;#39;&lt;/span&gt;
$ pip install &lt;span class="s1"&gt;&amp;#39;django&amp;gt;=1.7&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also write a &lt;code&gt;requirements.txt&lt;/code&gt; with various packages, for example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
django-sendfile
django&amp;gt;=1.7
&lt;/pre&gt;
&lt;p&gt;And then install packages with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some projects have extra requirements.  To install those requirements, we
have to specify the name in the brackets, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install waliki&lt;span class="o"&gt;[&lt;/span&gt;all&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-packages-for-development"&gt;
&lt;h2&gt;Install Packages for Development&lt;/h2&gt;
&lt;p&gt;To install the lastest still-in-development packages, which has not been released
to &lt;a class="reference external" href="https://pypi.python.org"&gt;Python Package Index&lt;/a&gt;, we can install them by specifying the tarball URLs.&lt;/p&gt;
&lt;p&gt;For example, we can install the latest &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; packages from their master
branch with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install https://github.com/django/django/tarball/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also install the package from the local file system with the
&lt;code&gt;file://&lt;/code&gt; protocol:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install &lt;span class="s2"&gt;&amp;quot;file:///path/to/the/package#egg=name&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, to install latest &lt;a class="reference external" href="https://github.com/mgaitan/waliki"&gt;Waliki&lt;/a&gt; from Git repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/mgaitan/waliki
$ &lt;span class="nb"&gt;cd&lt;/span&gt; waliki
$ pip install &lt;span class="s2"&gt;&amp;quot;file://&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;#egg=waliki[all]&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes, it is more convenient use the Python files in-place, so that we
don't have to reinstall the package after changing any files.  We can achieve
this with &lt;code&gt;-e&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -e path/to/the/package
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/mgaitan/waliki
$ &lt;span class="nb"&gt;cd&lt;/span&gt; waliki
$ pip install -e .&lt;span class="o"&gt;[&lt;/span&gt;all&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code&gt;pip install -e&lt;/code&gt;, we can save a lot of development time!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uninstall-packages"&gt;
&lt;h2&gt;Uninstall Packages&lt;/h2&gt;
&lt;p&gt;Finally, we can remove the package with the &lt;code&gt;pip uninstall&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip uninstall package-name
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="linux"></category></entry><entry><title>2014 Year End Review</title><link href="http://logan.tw/posts/2014/12/31/2014-year-end-review/" rel="alternate"></link><published>2014-12-31T23:54:00+08:00</published><updated>2014-12-31T23:54:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-12-31:/posts/2014/12/31/2014-year-end-review/</id><summary type="html">&lt;p&gt;It's the end of 2014.  It has been an amazing year with a lot of astonishing
moments!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This is my first year to work as a &lt;em&gt;full-time software engineer&lt;/em&gt;.  I have
learned a lot from the real world software development, including the PMD,
annaul planning, software schedule estimation, and etc …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;It's the end of 2014.  It has been an amazing year with a lot of astonishing
moments!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This is my first year to work as a &lt;em&gt;full-time software engineer&lt;/em&gt;.  I have
learned a lot from the real world software development, including the PMD,
annaul planning, software schedule estimation, and etc.  Besides, I have
become the person who is responsible for some project.  However, I feel that
I still have a lot to learn.&lt;/li&gt;
&lt;li&gt;In the early June, I have been to &lt;a class="reference external" href="https://plus.google.com/photos/114533678157511059717/albums/6022083547074183473"&gt;Peng-hu&lt;/a&gt; with Chun-hung.  It is my first
time to take the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Propeller_%28aeronautics%29"&gt;propeller&lt;/a&gt;.  It is my first time to pick &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Sea_urchin"&gt;urchins&lt;/a&gt; from
the sea.  During the trip, I have eaten the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Sea_urchin"&gt;urchins&lt;/a&gt; and cactaceae
ice-cream.  It was an interesting experience to me.&lt;/li&gt;
&lt;li&gt;In the late August, I have been to Tai-tung to have a trip with Chih-yu.
This is my first backpack travel with my friends.  We have built a sand
castle on the beach, and we have seen the hot balloons at Luye.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have been changed a lot this year.  First, I decided to exercise everyday to
keep my body in shape.  I have lost a lot of weight, and several physical
examination indices have come back to normal.  Second, I have changed my view
to the life.  At the beginning of the year, I am a work acholic and often work
overtime.  However, I burned out in the middle of year.  That's the reason why
I decided to take a trip.  I realized that I still have to work for more than
20 years.  It is important to balance the work and the life.  Besides, it would
be good to leave more time for myself.  Third, I feel that there are still a
lot to learn as a professional software engineer and life hacker.  I decided to
write more notes and blog posts, so that I can have some retrospection in the
end of year.&lt;/p&gt;
&lt;p&gt;Hoping that I can become a better person next year.&lt;/p&gt;
</content><category term="diary"></category></entry><entry><title>Debian Backports</title><link href="http://logan.tw/posts/2014/12/20/debian-backports/" rel="alternate"></link><published>2014-12-20T22:04:00+08:00</published><updated>2014-12-20T22:04:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-12-20:/posts/2014/12/20/debian-backports/</id><summary type="html">&lt;p&gt;It is well-known that &lt;a class="reference external" href="http://www.debian.org/"&gt;Debian&lt;/a&gt; stable release is very &lt;em&gt;stable&lt;/em&gt;, i.e. the
packages are very old and well-tested.  However, this become a problem to me.&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://www.git-scm.org/"&gt;Git&lt;/a&gt; 1.9, we have to run the following command to silence a warning
when we are running &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;It is well-known that &lt;a class="reference external" href="http://www.debian.org/"&gt;Debian&lt;/a&gt; stable release is very &lt;em&gt;stable&lt;/em&gt;, i.e. the
packages are very old and well-tested.  However, this become a problem to me.&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://www.git-scm.org/"&gt;Git&lt;/a&gt; 1.9, we have to run the following command to silence a warning
when we are running &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global push.default simple
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this command will add settings to &lt;code&gt;.gitconfig&lt;/code&gt; in the home directory,
which is unknown to the &lt;code&gt;git&lt;/code&gt; command from the Wheezy repository.  And,
unfortunately, I am using &lt;a class="reference external" href="https://alioth.debian.org/projects/buildd-tools/"&gt;schroot&lt;/a&gt; to switch between Ubuntu 14.04 and Debian
Wheezy.  Can I install a newer &lt;code&gt;git&lt;/code&gt; package on Debian Wheezy?&lt;/p&gt;
&lt;p&gt;Yes, &lt;a class="reference external" href="http://backports.debian.org/"&gt;Debian Backports&lt;/a&gt; is the answer.  &lt;strong&gt;Debian backports&lt;/strong&gt; provide
repositories that contains the newer software for Debian stable releases (with
necessary modification.)&lt;/p&gt;
&lt;p&gt;To install the packages from the backports, add the following line to
&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://ftp.us.debian.org/debian wheezy-backports main
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: The URL can be any &lt;a class="reference external" href="https://www.debian.org/mirror/official"&gt;official Debian mirrors&lt;/a&gt;.  Usually, there will be
one line similar to &lt;code&gt;deb [URL] wheezy main&lt;/code&gt; in your &lt;code&gt;sources.list&lt;/code&gt;.
You can copy the line and replace &lt;code&gt;wheezy&lt;/code&gt; with &lt;code&gt;wheezy-backport&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Update the local APT information with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To install the packages from the backports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install -t wheezy-backports &lt;span class="o"&gt;[&lt;/span&gt;package-name&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, to install &lt;code&gt;git&lt;/code&gt; from the backports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install -t wheezy-backports git
&lt;/pre&gt;&lt;/div&gt;
</content><category term="linux"></category><category term="debian"></category></entry><entry><title>Count Trailing Zeros</title><link href="http://logan.tw/posts/2014/12/17/count-trailing-zeros/" rel="alternate"></link><published>2014-12-17T23:34:00+08:00</published><updated>2014-12-17T23:34:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-12-17:/posts/2014/12/17/count-trailing-zeros/</id><summary type="html">&lt;p&gt;How to count the number of trailing zeros of an integer?  The simplest way is
to use the built-in function &lt;code&gt;__builtin_ctz()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__builtin_ctz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What will happen if we don't have &lt;code&gt;__builtin_ctz()&lt;/code&gt;?  If we have another
built-in function &lt;code&gt;__popcount()&lt;/code&gt;, which can compute the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Hamming_weight"&gt;Hamming weight&lt;/a&gt;
(the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How to count the number of trailing zeros of an integer?  The simplest way is
to use the built-in function &lt;code&gt;__builtin_ctz()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__builtin_ctz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What will happen if we don't have &lt;code&gt;__builtin_ctz()&lt;/code&gt;?  If we have another
built-in function &lt;code&gt;__popcount()&lt;/code&gt;, which can compute the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Hamming_weight"&gt;Hamming weight&lt;/a&gt;
(the number of set bits), then we can compute the number of trailing zeros with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__popcount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: Assume that &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Two%27s_complement"&gt;two's complement&lt;/a&gt; is adopted for negation and substract,
the expression &lt;code&gt;(n &amp;amp; -n)&lt;/code&gt; will leave only the last set-bit in the input
integer.  Next, the &lt;code&gt;-1&lt;/code&gt; operation will set the bits lower than the last
set-bit.  And finally, you can get the number of trailing zeros with
&lt;code&gt;__popcount()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Find_first_set"&gt;Wikipedia: Find First Set&lt;/a&gt; (retrived on 2014/12/17)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="compiler"></category></entry><entry><title>RISC-V Microprocessor</title><link href="http://logan.tw/posts/2014/12/16/risc-v-microprocessor/" rel="alternate"></link><published>2014-12-16T23:20:00+08:00</published><updated>2014-12-16T23:20:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-12-16:/posts/2014/12/16/risc-v-microprocessor/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://riscv.org"&gt;RISC-V&lt;/a&gt; is an instruction set architecture (ISA) released by UC Berkeley.
Besides, a high performance, power efficient, and royalty-free open source
implementation &lt;a class="reference external" href="https://github.com/ucb-bar"&gt;Rocket Chip&lt;/a&gt; is available.&lt;/p&gt;
&lt;p&gt;RISC-V was developed by Krste Asanović and David A. Patterson.  In their
&lt;a class="reference external" href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-146.pdf"&gt;technical report&lt;/a&gt;, they claimed that an open instruction set can benefit both …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://riscv.org"&gt;RISC-V&lt;/a&gt; is an instruction set architecture (ISA) released by UC Berkeley.
Besides, a high performance, power efficient, and royalty-free open source
implementation &lt;a class="reference external" href="https://github.com/ucb-bar"&gt;Rocket Chip&lt;/a&gt; is available.&lt;/p&gt;
&lt;p&gt;RISC-V was developed by Krste Asanović and David A. Patterson.  In their
&lt;a class="reference external" href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-146.pdf"&gt;technical report&lt;/a&gt;, they claimed that an open instruction set can benefit both
academic and industry.  They gave three arguments:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Greater innovation&lt;/strong&gt; -- If there is an open instruction set and open
implementations, we could have greater innovation since the developers or
researchers can change the ISA, evaluate their new deisgn, and compare their
design with the others.  This is not possible with current proprietary ISA
licensing models.  Since most of the licensing models disallow the change of
ISA.  Some licensing model even prohibits the change of the ISA
implementations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open development&lt;/strong&gt; -- If the instruction set and its implementation is
developed in open, more developers can read and audit the source code and
find the possible errors.  It is well-known that the open model works for
operating system and compiler toolchain.  And RISC-V is the one to fill in
the missing piece for microprocessors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduce cost&lt;/strong&gt; -- If the ecosystem becomes mature, the price of the baseline
chip will become as low as the manufacture cost since everyone can download
the reference implementation and ask the IC foundries to produce the chip.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The design of the instruction set is yet anther question.  The choice of the
instruction is important since the ISA will last for several decades.  A good
design should include the essential features and exclude the unnecessary
features.  For example, it is necessary to have load/store instructions for
byte, short, float, and double; but it is unnecessary to include &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Delay_slot"&gt;delay slot&lt;/a&gt;
and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Register_window"&gt;register window&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Krste and David predict that there are three trends for the computer evolution:
IoT devices, personal mobile devices, and warehouse-scale computers.  Thus,
RISC-V follows these design concepts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Base plus extension ISA&lt;/strong&gt; -- More applications are accelerating the
computation with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Application-specific_integrated_circuit"&gt;ASIC&lt;/a&gt;, thus we have to leave the space for further
extension of the core instruction set.  This implies that we should leave
sufficient encoding space for extensions.  As a result, RISC-V has a core
instruction set with several extensions.  The bit operations, SIMD
instructions, and compact instructions are defined as the optional
extensions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compact instruction set encoding&lt;/strong&gt; -- On the memory limited IoT devices,
the code size will be an issue.  It will be helpful to have compact
instruction set encoding.  There is a compact instruction extension which
encodes the popular instructions in 16-bit (instead of 32-bit).  This is
similar to the Thumb instruction set for ARM, which has been proved to be
useful to reduce the code size.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quadruple-precision floating point arithmetic&lt;/strong&gt; -- There are several
WSC applications using quadruple-precision arithmetic to process a lot of
data nowadays.  It will be a good idea to include them to the instruction
set.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support 32-bit, 64-bit and even 128-bit address space&lt;/strong&gt; -- The
32-bit address space is still important to the IoT devices due to their
limited memory.  However, 64-bit address make more sense for the other
applications.  Although there is no 128-bit usage at the moment, we have to
leave sufficient room for extension.  If we don't plan for larger address
space in the early stage, it may be difficult to workaround in the future.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can compare RISC-V with OpenRISC.  &lt;a class="reference external" href="http://openrisc.github.io"&gt;OpenRISC&lt;/a&gt; is an open source ISA as
well.  However, due to the encoding of the immediate value, there is little
encoding space left for extension.  Besides, it lacks for compact instruction
encoding and quadrupe-precision arithmetics.  Furthermore, when RISC-V was
developed, OpenRISC does not have 64-bit address space support at the time
(although OpenRISC have 64-bit support now.)&lt;/p&gt;
&lt;p&gt;In conclusion, &lt;a class="reference external" href="http://riscv.org"&gt;RISC-V&lt;/a&gt; is an open source ISA which work hard to fulfill the
design goals mentioned above.  Besides, we can
&lt;a class="reference external" href="http://riscv.org/download.html#tab_isa-sim"&gt;download the compiler and simulator&lt;/a&gt; right now.  A non-profit organization
&lt;a class="reference external" href="http://www.lowrisc.org"&gt;lowRISC&lt;/a&gt; is developing the development board for RISC-V.  I am looking
forward to the future of &lt;a class="reference external" href="http://riscv.org"&gt;RISC-V&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-146.pdf"&gt;Instruction Sets Should Be Free: The Case for RISC-V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://s3-us-west-1.amazonaws.com/riscv.org/riscv-spec-v2.0.pdf"&gt;User-level ISA Specification v2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2011/EECS-2011-63.html"&gt;Improving Energy Efficiency and Reducing Code Size with RISC-V Compressed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.eejournal.com/archives/articles/20141210-risc-v/"&gt;EE Journal: Berkeley's RISC-V Wants to Be Free&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="processor"></category><category term="compiler"></category></entry><entry><title>Autossh and Ubuntu Upstart Daemon</title><link href="http://logan.tw/posts/2014/12/15/autossh-and-ubuntu-upstart-daemon/" rel="alternate"></link><published>2014-12-15T18:04:00+08:00</published><updated>2014-12-15T18:04:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-12-15:/posts/2014/12/15/autossh-and-ubuntu-upstart-daemon/</id><summary type="html">&lt;p&gt;Since I am sharing the network without public IP, I would like to maintain a
SSH tunnel so that I can connect to my desktop from the remote site.  After
searching the web, I found that &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;Autossh&lt;/a&gt; fits my needs.  &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;Autossh&lt;/a&gt; is a
utility that can start and monitor the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since I am sharing the network without public IP, I would like to maintain a
SSH tunnel so that I can connect to my desktop from the remote site.  After
searching the web, I found that &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;Autossh&lt;/a&gt; fits my needs.  &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;Autossh&lt;/a&gt; is a
utility that can start and monitor the SSH tunnel.  If the connections are
broken, then &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;Autossh&lt;/a&gt; will restart the SSH connection automatically.&lt;/p&gt;
&lt;p&gt;In this post, I would like to introduce how to setup an autossh daemon with
&lt;a class="reference external" href="http://upstart.ubuntu.com"&gt;Ubuntu Upstart&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="setup-local-host"&gt;
&lt;h2&gt;Setup Local Host&lt;/h2&gt;
&lt;p&gt;First, create a new user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a new user named &amp;quot;autossh&amp;quot;&lt;/span&gt;
$ sudo adduser --system --group --disabled-password autossh

&lt;span class="c1"&gt;# Login as autossh&lt;/span&gt;
autossh:~$ sudo su autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, record the remote SSH server key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autossh:~$ ssh-keyscan &lt;span class="o"&gt;[&lt;/span&gt;remote&lt;span class="o"&gt;]&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/known_hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, create SSH public keys:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create SSH private and public keys&lt;/span&gt;
autossh:~$ ssh-keygen -t rsa
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/autossh/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;enter&lt;span class="o"&gt;]&lt;/span&gt;
Created directory &lt;span class="s1"&gt;&amp;#39;/home/autossh/.ssh&amp;#39;&lt;/span&gt;.
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;enter&lt;span class="o"&gt;]&lt;/span&gt;
Enter same passphrase again: &lt;span class="o"&gt;[&lt;/span&gt;enter&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Print the public key&lt;/span&gt;
autossh:~$ cat ~/.ssh/id_rsa.pub
&lt;span class="o"&gt;[&lt;/span&gt;copy the output line&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fourth, logout and disable the shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autossh:~$ &lt;span class="nb"&gt;exit&lt;/span&gt;
$ sudo chsh --shell /bin/false autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-remote-host"&gt;
&lt;h2&gt;Setup Remote Host&lt;/h2&gt;
&lt;p&gt;First, create a new user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Login to the remote host&lt;/span&gt;
$ ssh &lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;@&lt;span class="o"&gt;[&lt;/span&gt;remote&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Create a new user&lt;/span&gt;
remote:~$ sudo adduser --system --group --shell /bin/false &lt;span class="se"&gt;\&lt;/span&gt;
                       --disabled-password autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, add the authorized public key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create directory for authorized keys&lt;/span&gt;
remote:~$ sudo mkdir -p /home/autossh/.ssh

&lt;span class="c1"&gt;# Add new public key&lt;/span&gt;
remote:~$ sudo vi /home/autossh/.ssh/authorized_keys
&lt;span class="o"&gt;[&lt;/span&gt;paste the public key&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Change the owner of the file&lt;/span&gt;
remote:~$ sudo chown -R autossh:autossh /home/autossh/.ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have finished the configuration on the remote host, logout from the remote
host with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;remote:~$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-upstart-configuration-file"&gt;
&lt;h2&gt;Setup Upstart Configuration File&lt;/h2&gt;
&lt;p&gt;(&lt;strong&gt;Update 2015/11/15&lt;/strong&gt;: To setup a daemon for &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;, read &lt;a class="reference external" href="http://logan.tw/posts/2015/11/15/autossh-and-systemd-service/"&gt;this post&lt;/a&gt;
instead.)&lt;/p&gt;
&lt;p&gt;Let's add the Ubuntu Upstart configuration file.&lt;/p&gt;
&lt;p&gt;First, create new upstart configuration with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /etc/init/autossh.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following lines to the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;description &amp;quot;autossh daemon for ssh tunnel&amp;quot;

start on net-device-up IFACE=eth0
stop on runlevel [01S6]

setuid autossh

respawn
respawn limit 5 60

script
export AUTOSSH_FIRST_POLL=30
export AUTOSSH_GATETIME=0
export AUTOSSH_POLL=60
autossh -M [daemon-port] -N -R [remote-port]:localhost:22 [remote] -i /home/autossh/.ssh/id_rsa
end script
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the variables properly.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;[daemon-port]&lt;/code&gt; can be any number larger than 8000.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[remote-port]&lt;/code&gt; is the remote port that will be opened on remote host
which will be mapped to local port.&lt;/li&gt;
&lt;li&gt;For the exported environment variables, you can refer to the &lt;a class="reference external" href="http://manpages.ubuntu.com/manpages/utopic/en/man1/autossh.1.html"&gt;autossh manual
pages&lt;/a&gt; for further details.  Usually, you would like to set
&lt;code&gt;AUTOSSH_GATETIME&lt;/code&gt; to zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, start the service now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service autossh start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these steps, the SSH tunnel should start to work now!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ubuntugeek.com/automatically-restart-ssh-sessions-and-tunnels-using-autossh.html"&gt;Automatically restart SSH sessions and tunnels Using Autossh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="ssh"></category><category term="autossh"></category><category term="upstart"></category><category term="init"></category></entry><entry><title>LLVM Obfuscator</title><link href="http://logan.tw/posts/2014/12/09/llvm-obfuscator/" rel="alternate"></link><published>2014-12-09T23:18:00+08:00</published><updated>2014-12-09T23:18:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-12-09:/posts/2014/12/09/llvm-obfuscator/</id><summary type="html">&lt;p&gt;I came across the &lt;a class="reference external" href="https://github.com/obfuscator-llvm/obfuscator/wiki"&gt;LLVM obfuscator&lt;/a&gt; today.  It is a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Obfuscation_%28software%29"&gt;code obfuscator&lt;/a&gt; working
mostly on LLVM IR level.  This means that most LLVM supported target platforms
are supported by the &lt;a class="reference external" href="https://github.com/obfuscator-llvm/obfuscator/wiki"&gt;LLVM obfuscator&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Also, I have also read &lt;a class="reference external" href="http://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html"&gt;an article&lt;/a&gt; which mentioned how to disassemble and
deobfuscate the binaries …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I came across the &lt;a class="reference external" href="https://github.com/obfuscator-llvm/obfuscator/wiki"&gt;LLVM obfuscator&lt;/a&gt; today.  It is a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Obfuscation_%28software%29"&gt;code obfuscator&lt;/a&gt; working
mostly on LLVM IR level.  This means that most LLVM supported target platforms
are supported by the &lt;a class="reference external" href="https://github.com/obfuscator-llvm/obfuscator/wiki"&gt;LLVM obfuscator&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Also, I have also read &lt;a class="reference external" href="http://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html"&gt;an article&lt;/a&gt; which mentioned how to disassemble and
deobfuscate the binaries compiled by &lt;a class="reference external" href="https://github.com/obfuscator-llvm/obfuscator/wiki"&gt;LLVM obfuscator&lt;/a&gt;.  The article sounds
interesting and the example being used looks impressive.  It is worthwhile to
read this article.&lt;/p&gt;
</content><category term="llvm"></category></entry><entry><title>C++ Virtual Destructor and Inheritence</title><link href="http://logan.tw/posts/2014/12/09/c-virtual-destructor-and-inheritence/" rel="alternate"></link><published>2014-12-09T19:00:00+08:00</published><updated>2014-12-09T19:00:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-12-09:/posts/2014/12/09/c-virtual-destructor-and-inheritence/</id><summary type="html">&lt;p&gt;It is a well-known idiom to define a virtual destructor for the classes with
virtual functions.  If we don't define a virtual destructor, then the base
class destructor will be invoked when you are deleting the object through the
base class pointer even if the object is an instance of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is a well-known idiom to define a virtual destructor for the classes with
virtual functions.  If we don't define a virtual destructor, then the base
class destructor will be invoked when you are deleting the object through the
base class pointer even if the object is an instance of derived class.&lt;/p&gt;
&lt;p&gt;Although this sounds intuitive, it is non-trivial to the C++ compiler
implementation.  Some extra care should be paid if the programmer didn't
specify the desturctor.  For example, in the following code, the base class
&lt;code&gt;A&lt;/code&gt; has a virtual destructor and the derived class &lt;code&gt;B&lt;/code&gt; does not
define any destructor.  What will happen when after running &lt;code&gt;delete a&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your compiler is following the &lt;a class="reference external" href="https://mentorembedded.github.io/cxx-abi/abi.html"&gt;Itanium C++ ABI&lt;/a&gt;, then the compiler will
synthesize two functions &lt;code&gt;_ZN1BD0Ev()&lt;/code&gt; and &lt;code&gt;_ZN1BD2Ev()&lt;/code&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;code&gt;_ZN1BD2Ev()&lt;/code&gt; is the synthesized destructor which will destruct the
instance members of class &lt;code&gt;B&lt;/code&gt; and will in turn call the
&lt;code&gt;_ZN1AD2Ev()&lt;/code&gt; to destruct the members of class &lt;code&gt;A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;_ZN1BD0Ev()&lt;/code&gt; will invoke &lt;code&gt;_ZN1BD2Ev()&lt;/code&gt; to destruct the object
and deallocate the memory with &lt;code&gt;operator delete (void *)&lt;/code&gt; (or namely
&lt;code&gt;_ZdlPv()&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Back to the example, when the &lt;code&gt;delete a&lt;/code&gt; is executed, the underlying code
sequence will get the second function pointer (index 1) from the virtual method
table and pass the object address to the corresponding function, which is
&lt;code&gt;_ZN1BD0Ev()&lt;/code&gt; in this case.&lt;/p&gt;
&lt;p&gt;In fact, if you define the destructor in the derived class, then your destructor
will be part of the &lt;code&gt;_ZN1BD2Ev()&lt;/code&gt;.  You can check the behavior with the
following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;p.s. You can generate the LLVM assembly with &lt;code&gt;clang++ -S -emit-llvm&lt;/code&gt;
which is more readable.&lt;/p&gt;
</content><category term="cxx"></category></entry><entry><title>LLVM Bugpoint</title><link href="http://logan.tw/posts/2014/11/26/llvm-bugpoint/" rel="alternate"></link><published>2014-11-26T23:03:00+08:00</published><updated>2014-11-26T23:03:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-26:/posts/2014/11/26/llvm-bugpoint/</id><summary type="html">&lt;p&gt;In this post, I would like to introduce the &lt;a class="reference external" href="http://llvm.org/docs/CommandGuide/bugpoint.html"&gt;bugpoint&lt;/a&gt; command line tool.
This is a automatic test case reduction tool which can help us generate
minimal test case.&lt;/p&gt;
&lt;p&gt;As a compiler developer, the first step to debug is to create a minimal test
case which can still reproduce the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, I would like to introduce the &lt;a class="reference external" href="http://llvm.org/docs/CommandGuide/bugpoint.html"&gt;bugpoint&lt;/a&gt; command line tool.
This is a automatic test case reduction tool which can help us generate
minimal test case.&lt;/p&gt;
&lt;p&gt;As a compiler developer, the first step to debug is to create a minimal test
case which can still reproduce the bug.  Unfortunately, the preprocessed C++
source code usually contains more than 10,000 lines.  However, to make the test
case understandable, we have to reduce them to less than 100 lines.  To be
honest, it is really a boring task that I don't like to work on manually.
Fortunately, &lt;a class="reference external" href="http://llvm.org/docs/CommandGuide/bugpoint.html"&gt;bugpoint&lt;/a&gt; is the automatic tool to solve the problem.&lt;/p&gt;
&lt;div class="section" id="convert-to-llvm-assembly"&gt;
&lt;h2&gt;Convert to LLVM Assembly&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://llvm.org/docs/CommandGuide/bugpoint.html"&gt;Bugpoint&lt;/a&gt; is a reduction tool for &lt;a class="reference external" href="http://llvm.org/docs/LangRef.html"&gt;LLVM assembly&lt;/a&gt;.  In the other words,
it takes &lt;a class="reference external" href="http://llvm.org/docs/LangRef.html"&gt;LLVM assembly&lt;/a&gt; as the input and generates LLVM bitcode as the output.
Thus, we have to convert C/C++ programs to &lt;a class="reference external" href="http://llvm.org/docs/LangRef.html"&gt;LLVM assembly&lt;/a&gt; with &lt;code&gt;clang&lt;/code&gt;.
The easiest way is to replace the &lt;code&gt;-emit-obj&lt;/code&gt; with &lt;code&gt;-emit-llvm&lt;/code&gt;
from the &lt;code&gt;cc1&lt;/code&gt; invocation command.  For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ clang -cc1 -emit-llvm input.cpp  &lt;span class="c1"&gt;# ... other options ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If &lt;code&gt;clang&lt;/code&gt; crashes in this step, then it seems that you are facing a
front-end bug.  You may wish to use &lt;a class="reference external" href="http://embed.cs.utah.edu/creduce/"&gt;C-Reduce&lt;/a&gt; or more general tools working
on top of C/C++ source code.&lt;/p&gt;
&lt;p&gt;If the output &lt;code&gt;input.ll&lt;/code&gt; is generated without any problems, than we can
continue with the &lt;code&gt;llc&lt;/code&gt; command (which will generate either machine
assembly file or relocatable object file):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ llc input.ll  &lt;span class="c1"&gt;# ... other options ... (e.g. -O3 -mtriple=...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;llc&lt;/code&gt; command should crash in this step.  If it does not crash, then
try to add some common optimization flags such as &lt;code&gt;-O3&lt;/code&gt; to the command
line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reduce-the-test-case"&gt;
&lt;h2&gt;Reduce the Test Case&lt;/h2&gt;
&lt;p&gt;Now, we can reduce the test case with the &lt;code&gt;bugpoint&lt;/code&gt; command.  Since I am
cross-compiling the source code in this case, I am using &lt;code&gt;-llc-safe&lt;/code&gt; to
test the compiler without the interpreter.  Besides, the arguments to be passed
to &lt;code&gt;llc&lt;/code&gt; can be specified with the &lt;code&gt;-safe-tool-args&lt;/code&gt; option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bugpoint input.ll -llc-safe -safe-tool-args -mtriple&lt;span class="o"&gt;=&lt;/span&gt;armv7-linux-gnueabi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything goes well, then &lt;code&gt;bugpoint-reduced-simplified.bc&lt;/code&gt; will be
created.  You can disassemble the output file with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ llvm-dis bugpoint-reduced-simplified.bc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output &lt;code&gt;bugpoint-reduced-simplified.ll&lt;/code&gt; is the result test case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reduce-the-test-case-with-custom-compile-script"&gt;
&lt;h2&gt;Reduce the Test Case with Custom Compile Script&lt;/h2&gt;
&lt;p&gt;You may wish to customize the compiler pipeline to reproduce the bug.  To do
so, use the &lt;code&gt;-compile-custom&lt;/code&gt; option instead and specify the test script
with &lt;code&gt;-compile-command&lt;/code&gt;.  For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bugpoint input.ll -compile-custom -compile-command ./test.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the test script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Create a temporary file for the test command&lt;/span&gt;
&lt;span class="nv"&gt;logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mktemp&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Run your test command (and redirect the output messages)&lt;/span&gt;
llc &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;logfile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Print messages when error occurs&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ret&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test failed&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# must print something on failure&lt;/span&gt;
  cat &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;logfile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Cleanup the temporary file&lt;/span&gt;
rm &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;logfile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ret&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The test script &lt;em&gt;MUST&lt;/em&gt; print some message when the command &lt;strong&gt;failed&lt;/strong&gt; and it
should not print any message when the command succeed.  Otherwise, the
&lt;code&gt;bugpoint&lt;/code&gt; command won't work properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="strip-the-symbols"&gt;
&lt;h2&gt;Strip the Symbols&lt;/h2&gt;
&lt;p&gt;Sometimes, there will be several long symbol names and dead function
declaration in the LLVM bitcode, we can further strip the bitcode with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ opt -S -strip -strip-dead-prototypes &lt;span class="se"&gt;\&lt;/span&gt;
    bugpoint-reduced-simplified.ll &amp;gt; strip.ll
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After these steps, we should be able to obtain a minimal test case which is
suitable for debugging.  We can find the exact pass causing the problem with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ opt -print-before-all -print-after-all -O2 strip.ll &amp;gt; debug.txt &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this post, I have introduced the basic usage of &lt;a class="reference external" href="http://llvm.org/docs/CommandGuide/bugpoint.html"&gt;bugpoint&lt;/a&gt; to reduce the
test case for code generation bugs.  We can automate the test case reduction
process with &lt;a class="reference external" href="http://llvm.org/docs/CommandGuide/bugpoint.html"&gt;bugpoint&lt;/a&gt;, and as a creative programmer we can focus on more
challenging tasks.  For further information, please refer to
&lt;a class="reference external" href="http://llvm.org/docs/HowToSubmitABug.html"&gt;How to Submit a LLVM Bug&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://llvm.org/docs/CommandGuide/bugpoint.html"&gt;Bugpoint: automatic test case reduction tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://comments.gmane.org/gmane.comp.compilers.llvm.devel/68215"&gt;Bugpoint can't automatically select a safe interpreter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="clang"></category><category term="llvm"></category><category term="test"></category></entry><entry><title>Vim Vundle</title><link href="http://logan.tw/posts/2014/11/25/vim-vundle/" rel="alternate"></link><published>2014-11-25T22:41:00+08:00</published><updated>2014-11-25T22:41:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-25:/posts/2014/11/25/vim-vundle/</id><summary type="html">&lt;p&gt;In the past, I didn't like to install the &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; plug-ins or new syntax
highlight because all of the files were messed up in the &lt;code&gt;.vim&lt;/code&gt; directory
which makes it difficult to uninstall a plug-in.&lt;/p&gt;
&lt;p&gt;Recently, I have come across with &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vim Vundle&lt;/a&gt;.  It is a vim plug-in manager
which …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the past, I didn't like to install the &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; plug-ins or new syntax
highlight because all of the files were messed up in the &lt;code&gt;.vim&lt;/code&gt; directory
which makes it difficult to uninstall a plug-in.&lt;/p&gt;
&lt;p&gt;Recently, I have come across with &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vim Vundle&lt;/a&gt;.  It is a vim plug-in manager
which allows you to install or uninstall a plug-in by editing lines in
&lt;code&gt;.vimrc&lt;/code&gt;.  In the next section, I would like to explain how to install
&lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vim Vundle&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First, to reduce the possible problems, it is suggested to remove or backup
your existing &lt;code&gt;.vim&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mv ~/.vim ~/vim-backup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, clone the &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vim Vundle&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/VundleVim/Vundle.vim.git &lt;span class="se"&gt;\&lt;/span&gt;
            ~/.vim/bundle/Vundle.vim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, add following lines to your &lt;code&gt;.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; version &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;
  &lt;span class="k"&gt;filetype&lt;/span&gt; off

  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle/Vundle.&lt;span class="k"&gt;vim&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; vundle#begin&lt;span class="p"&gt;()&lt;/span&gt;

  Plugin &lt;span class="s1"&gt;&amp;#39;VundleVim/Vundle.vim&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;  &amp;quot; ... Add More Plug-ins Here ...&lt;/span&gt;

  &lt;span class="k"&gt;call&lt;/span&gt; vundle#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fourth, after editing &lt;code&gt;.vimrc&lt;/code&gt;, run following command to download
plug-ins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim +PluginInstall +qall
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Vim will pop up and show the progress.  You have to run this command again
whenever you are adding (or removing) the &lt;code&gt;Plugin&lt;/code&gt; directives to your
&lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="folding"&gt;
&lt;h2&gt;Folding&lt;/h2&gt;
&lt;p&gt;If you follow the steps in the previous section, you will find out that Vim
will fold our &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; or &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; documents.  However, I don't
like these behavior at all.  After some try and error, I realized that the
problem is related to the &lt;code&gt;filetype&lt;/code&gt; command in the &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can fix the problem by changing the &lt;code&gt;filetype&lt;/code&gt; command to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;filetype&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or alternatively, add following lines to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; Disable auto folding&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; mkd &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;nofoldenable&lt;/span&gt; &lt;span class="nb"&gt;foldmethod&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;manual
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; rst &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;nofoldenable&lt;/span&gt; &lt;span class="nb"&gt;foldmethod&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;manual
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-plugins-which-i-have-installed"&gt;
&lt;h2&gt;Vim Plugins which I Have Installed&lt;/h2&gt;
&lt;p&gt;Finally, it's time to add more vim plug-ins.  You can specify the plug-in with
the plug-in names from &lt;a class="reference external" href="http://vim-scripts.org/vim/scripts.html"&gt;Vim Scripts&lt;/a&gt;, GitHub repository names, or complete
Git repository urls.&lt;/p&gt;
&lt;p&gt;Here's the list of plug-ins which I have installed at the moment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; LLVM assembly and tablegen syntax highlight&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;andrewmacp/llvm.vim&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Rust programming language syntax highlight&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;wting/rust.vim&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; OpenCL syntax highlight&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;petRUShka/vim-opencl&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; reStructuredText&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;Rykka/riv.vim&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:riv_disable_folding&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="c"&gt;&amp;quot; disable folding&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Markdown&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;godlygeek/tabular&amp;#39;&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;plasticboy/vim-markdown&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hope you enjoy this article, check out the &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vim Vundle&lt;/a&gt; official website
for more details: &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;https://github.com/VundleVim/Vundle.vim&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="change-logs"&gt;
&lt;h2&gt;Change Logs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2016-03-27: Update Vundle URL to &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;https://github.com/VundleVim/Vundle.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="vim"></category></entry><entry><title>Let's Encrypt</title><link href="http://logan.tw/posts/2014/11/24/lets-encrypt/" rel="alternate"></link><published>2014-11-24T23:32:00+08:00</published><updated>2014-11-24T23:32:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-24:/posts/2014/11/24/lets-encrypt/</id><summary type="html">&lt;p&gt;According to the &lt;a class="reference external" href="http://andreasgal.com/2014/11/18/lets-encrypt-one-more-step-on-the-road-to-tls-everywhere/"&gt;post&lt;/a&gt; by &lt;a class="reference external" href="http://andreasgal.com"&gt;Andreas Gal&lt;/a&gt;, &lt;a class="reference external" href="https://www.eff.org/"&gt;EFF&lt;/a&gt;, &lt;a class="reference external" href="https://mozilla.com/"&gt;Mozilla&lt;/a&gt;, Cisco, Akamai,
and IdenTrust are going to form Internet Security Research Group which will
start the &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; ceritificate authority service in 2015 Q2.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; is expected to become a free, automated, and open SSL
sertificate authority which aims to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;According to the &lt;a class="reference external" href="http://andreasgal.com/2014/11/18/lets-encrypt-one-more-step-on-the-road-to-tls-everywhere/"&gt;post&lt;/a&gt; by &lt;a class="reference external" href="http://andreasgal.com"&gt;Andreas Gal&lt;/a&gt;, &lt;a class="reference external" href="https://www.eff.org/"&gt;EFF&lt;/a&gt;, &lt;a class="reference external" href="https://mozilla.com/"&gt;Mozilla&lt;/a&gt;, Cisco, Akamai,
and IdenTrust are going to form Internet Security Research Group which will
start the &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; ceritificate authority service in 2015 Q2.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; is expected to become a free, automated, and open SSL
sertificate authority which aims to increase the adoption of HTTPS protocol
and provide a more secure Internet.  I am looking forward to this project.&lt;/p&gt;
&lt;p&gt;For the impatient, you may check &lt;a class="reference external" href="https://github.com/letsencrypt"&gt;their GitHub&lt;/a&gt; for the preview release.&lt;/p&gt;
</content><category term="http"></category><category term="ssl"></category></entry><entry><title>Ubuntu Bluetooth Headset</title><link href="http://logan.tw/posts/2014/11/24/ubuntu-bluetooth-headset/" rel="alternate"></link><published>2014-11-24T23:04:00+08:00</published><updated>2014-11-24T23:04:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-24:/posts/2014/11/24/ubuntu-bluetooth-headset/</id><summary type="html">&lt;p&gt;I have bought a Bluetooth headset recently.  After connecting the device, I
was quite disappointed with the sound quality.  Fortunately, after searching on
the web, it seems that I am using the &amp;quot;Telphony Duplex&amp;quot; mode, which has low
quality.&lt;/p&gt;
&lt;p&gt;Here are the steps to switch to the mode with better …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have bought a Bluetooth headset recently.  After connecting the device, I
was quite disappointed with the sound quality.  Fortunately, after searching on
the web, it seems that I am using the &amp;quot;Telphony Duplex&amp;quot; mode, which has low
quality.&lt;/p&gt;
&lt;p&gt;Here are the steps to switch to the mode with better sound quality:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Left click on the &amp;quot;Bluetooth icon&amp;quot; on the top right corner.&lt;/li&gt;
&lt;li&gt;Move the cursor to your connected device.&lt;/li&gt;
&lt;li&gt;Left click on &amp;quot;Sound Settings ...&amp;quot; menu item.&lt;/li&gt;
&lt;li&gt;Change the mode from &amp;quot;Telphony Duplex (HSP/HFP)&amp;quot; to &amp;quot;&lt;strong&gt;High Fidelity Playback
(A2DP)&lt;/strong&gt;&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reference: &lt;a class="reference external" href="http://ubuntuforums.org/showthread.php?t=2171043"&gt;Ubuntu Forums: Bluetooth Headset Bad Sound Quality&lt;/a&gt;.&lt;/p&gt;
</content><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>Install GCIN on Ubuntu 14.04</title><link href="http://logan.tw/posts/2014/11/23/install-gcin-on-ubuntu-1404/" rel="alternate"></link><published>2014-11-23T14:36:00+08:00</published><updated>2014-11-23T14:36:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-23:/posts/2014/11/23/install-gcin-on-ubuntu-1404/</id><summary type="html">&lt;p&gt;I decided to look for some alternatives to &lt;a class="reference external" href="https://code.google.com/p/ibus/"&gt;IBus&lt;/a&gt; input method after tolerating
its long latency to switch between input methods for a long time.  As a
Taiwanese, both &lt;a class="reference external" href="http://hyperrate.com/dir.php?eid=67"&gt;gcin&lt;/a&gt; and &lt;a class="reference external" href="http://hime.luna.com.tw/"&gt;hime&lt;/a&gt; came up to my mind.  Unfortunately, both of
them need extra configuration after &lt;code&gt;apt-get&lt;/code&gt;.  Here's my note to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I decided to look for some alternatives to &lt;a class="reference external" href="https://code.google.com/p/ibus/"&gt;IBus&lt;/a&gt; input method after tolerating
its long latency to switch between input methods for a long time.  As a
Taiwanese, both &lt;a class="reference external" href="http://hyperrate.com/dir.php?eid=67"&gt;gcin&lt;/a&gt; and &lt;a class="reference external" href="http://hime.luna.com.tw/"&gt;hime&lt;/a&gt; came up to my mind.  Unfortunately, both of
them need extra configuration after &lt;code&gt;apt-get&lt;/code&gt;.  Here's my note to install
them properly.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First, we have to install either &lt;a class="reference external" href="http://hyperrate.com/dir.php?eid=67"&gt;gcin&lt;/a&gt; or &lt;a class="reference external" href="http://hime.luna.com.tw/"&gt;hime&lt;/a&gt; packages with
&lt;code&gt;apt-get&lt;/code&gt;.  After installing the package, we have to change the
system settings and reboot; otherwise, ibus daemon will continue to capture
your keyboard.&lt;/p&gt;
&lt;p&gt;Here are the instructions:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the input methods&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# To install gcin:&lt;/span&gt;
$ sudo apt-get install gcin gcin-chewing

&lt;span class="c1"&gt;# To install hime:&lt;/span&gt;
$ sudo apt-get install hime hime-chewing
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install the &lt;a class="reference external" href="http://chewing.im/"&gt;chewing&lt;/a&gt; packages if you are interested in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# For gcin users:&lt;/span&gt;
$ sudo apt-get install gcin-chewing

&lt;span class="c1"&gt;# For hime users:&lt;/span&gt;
$ sudo apt-get install hime-chewing
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Change the system settings for input method system:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click on the &amp;quot;System Menu&amp;quot; button on the top right of the screen.&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;System Settings ...&amp;quot; menu item.&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;Language Support&amp;quot; button.&lt;/li&gt;
&lt;li&gt;Change &amp;quot;Keyboard input method system&amp;quot; field to gcin (or hime)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot the system (restart X11 window system)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After rebooting your system, &lt;a class="reference external" href="http://hyperrate.com/dir.php?eid=67"&gt;gcin&lt;/a&gt; or &lt;a class="reference external" href="http://hime.luna.com.tw/"&gt;hime&lt;/a&gt; should start to work after
pressing Ctrl+Space.  You should be able to type some Chinese characters now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-tray-icon"&gt;
&lt;h2&gt;System Tray Icon&lt;/h2&gt;
&lt;p&gt;Since Ubuntu Unity team decided to ship their own indicator protocol, you won't
be able to see the &lt;a class="reference external" href="http://hyperrate.com/dir.php?eid=67"&gt;gcin&lt;/a&gt; (or &lt;a class="reference external" href="http://hime.luna.com.tw/"&gt;hime&lt;/a&gt;) icon on the system tray (or the
notification area) if you are using Ubuntu 13.10 or newer.  To workaround the
problem, we have to install the Unity package built by the third-party.&lt;/p&gt;
&lt;p&gt;Here are the instructions for Ubuntu 14.04 &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Add APT repository for systray&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo add-apt-repository ppa:gurqn/systray-trusty
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /etc/apt/preferences.d/systray-trusty
Package: *
Pin: release &lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;LP-PPA-gurqn-systray-trusty
Pin-Priority: &lt;span class="m"&gt;600&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Update APT&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot the system (logout and login again)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should be able to see the &lt;a class="reference external" href="http://hyperrate.com/dir.php?eid=67"&gt;gcin&lt;/a&gt; or &lt;a class="reference external" href="http://hime.luna.com.tw/"&gt;hime&lt;/a&gt; system tray after rebooting.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For Ubuntu 14.10, change &lt;code&gt;trusty&lt;/code&gt; with &lt;code&gt;utopic&lt;/code&gt; should work.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="hide-the-ibus-icon"&gt;
&lt;h2&gt;Hide the IBus Icon&lt;/h2&gt;
&lt;p&gt;Finally, we can hide the ibus icon since it is not useful anymore.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click on the &amp;quot;System Menu&amp;quot; button on the top right of the screen.&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;System Settings ...&amp;quot; menu item.&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;Text Entry&amp;quot; button.&lt;/li&gt;
&lt;li&gt;Uncheck &amp;quot;Show current input source in the menu bar&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are the tweaks for me to install &lt;a class="reference external" href="http://hyperrate.com/dir.php?eid=67"&gt;gcin&lt;/a&gt; or &lt;a class="reference external" href="http://hime.luna.com.tw/"&gt;hime&lt;/a&gt;, and hope this is
helpful.  Feel free to let me know if you have any problem.&lt;/p&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="ubuntu"></category><category term="gcin"></category></entry><entry><title>Pre-compile the OpenCL Kernel Program - Part 2</title><link href="http://logan.tw/posts/2014/11/22/pre-compile-the-opencl-kernel-program-part-2/" rel="alternate"></link><published>2014-11-22T12:22:00+08:00</published><updated>2014-11-22T12:22:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-22:/posts/2014/11/22/pre-compile-the-opencl-kernel-program-part-2/</id><summary type="html">&lt;p&gt;In the &lt;a class="reference external" href="http://logan.tw/posts/2014/11/21/pre-compile-the-opencl-kernel-program-part-1/"&gt;part 1&lt;/a&gt; of this article, we have mentioned how to pre-compile the
OpenCL kernel program and load the pre-compiled binaries with the OpenCL API.&lt;/p&gt;
&lt;p&gt;However, I was using the &lt;code&gt;ioc64&lt;/code&gt; command from the &lt;a class="reference external" href="https://software.intel.com/en-us/intel-opencl"&gt;Intel OpenCL SDK&lt;/a&gt; to
pre-compile the kernel program.  This command might be unavailable in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the &lt;a class="reference external" href="http://logan.tw/posts/2014/11/21/pre-compile-the-opencl-kernel-program-part-1/"&gt;part 1&lt;/a&gt; of this article, we have mentioned how to pre-compile the
OpenCL kernel program and load the pre-compiled binaries with the OpenCL API.&lt;/p&gt;
&lt;p&gt;However, I was using the &lt;code&gt;ioc64&lt;/code&gt; command from the &lt;a class="reference external" href="https://software.intel.com/en-us/intel-opencl"&gt;Intel OpenCL SDK&lt;/a&gt; to
pre-compile the kernel program.  This command might be unavailable in the other
OpenCL implementations.  How could we get the compiled binaries in those
implementations?&lt;/p&gt;
&lt;p&gt;After checking the &lt;a class="reference external" href="https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/clGetProgramInfo.html"&gt;manual&lt;/a&gt;, it shows that we can retrieve the compiled
binaries with &lt;code&gt;clGetProgramInfo()&lt;/code&gt; after the execution of
&lt;code&gt;clBuildProgram()&lt;/code&gt;.  In detail, we need four steps to get the binaries:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Allocate the an array of &lt;code&gt;size_t&lt;/code&gt; to save the size of each binaries.&lt;/li&gt;
&lt;li&gt;Get the &lt;strong&gt;size&lt;/strong&gt; of each binaries with
&lt;code&gt;clGetProgrmaInfo(program, CL_PROGRAM_BINARY_SIZES, ...)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Allocate the buffers for the binaries.  The size of each buffers should be
greater than or equal to the size returned in the second step.&lt;/li&gt;
&lt;li&gt;Get the &lt;strong&gt;binaries&lt;/strong&gt; with
&lt;code&gt;clGetProgramInfo(program, CL_PROGRAM_BINARIES, ...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's the code listing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cl_int&lt;/span&gt; &lt;span class="nf"&gt;write_binaries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cl_program&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;num_devices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;cl_uint&lt;/span&gt; &lt;span class="n"&gt;platform_idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cl_int&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CL_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;binaries_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;binaries_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Read the binaries size&lt;/span&gt;
  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;binaries_size_alloc_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num_devices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;binaries_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaries_size_alloc_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;binaries_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CL_OUT_OF_HOST_MEMORY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clGetProgramInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_PROGRAM_BINARY_SIZES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;binaries_size_alloc_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;binaries_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;CL_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Read the binaries&lt;/span&gt;
  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;binaries_ptr_alloc_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num_devices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;binaries_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaries_ptr_alloc_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CL_OUT_OF_HOST_MEMORY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;binaries_ptr_alloc_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num_devices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaries_size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CL_OUT_OF_HOST_MEMORY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clGetProgramInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_PROGRAM_BINARIES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;binaries_ptr_alloc_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;CL_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Write the binaries to file&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num_devices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create output file name&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cl-out_%u-%u.bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;platform_idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Write the binary to the output file&lt;/span&gt;
    &lt;span class="n"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;binaries_size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nl"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;// Free the return value buffer&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num_devices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaries_ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaries_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on these OpenCL APIs, I have written a simple OpenCL kernel program
compiler to translate &lt;code&gt;.cl&lt;/code&gt; files into pre-compiled binaries.  Please
refer to &lt;a class="reference external" href="https://github.com/loganchien/opencl-examples/blob/master/cl-compile/cl-compile.c"&gt;cl-compile.c&lt;/a&gt; for the source code.&lt;/p&gt;
&lt;p&gt;This completes our discussion on the compilation of OpenCL kernel binaries.  In
the next post, I would like to give an introduction to OpenCL SPIR, the
official intermediate representation for OpenCL kernel programs.&lt;/p&gt;
</content><category term="opencl"></category></entry><entry><title>Pre-compile the OpenCL Kernel Program - Part 1</title><link href="http://logan.tw/posts/2014/11/21/pre-compile-the-opencl-kernel-program-part-1/" rel="alternate"></link><published>2014-11-21T21:22:00+08:00</published><updated>2014-11-21T21:22:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-21:/posts/2014/11/21/pre-compile-the-opencl-kernel-program-part-1/</id><summary type="html">&lt;p&gt;In the &lt;a class="reference external" href="http://logan.tw/posts/2014/11/18/getting-started-with-opencl/"&gt;previous post&lt;/a&gt;, we have written a simple vector addition OpenCL
program.  We were compiling the OpenCL kernel program from source code at
run-time, thus we have to distribute the OpenCL source code to our users.&lt;/p&gt;
&lt;p&gt;However, in some cases, we may prefer to &lt;strong&gt;pre-compile the OpenCL kernel
program …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the &lt;a class="reference external" href="http://logan.tw/posts/2014/11/18/getting-started-with-opencl/"&gt;previous post&lt;/a&gt;, we have written a simple vector addition OpenCL
program.  We were compiling the OpenCL kernel program from source code at
run-time, thus we have to distribute the OpenCL source code to our users.&lt;/p&gt;
&lt;p&gt;However, in some cases, we may prefer to &lt;strong&gt;pre-compile the OpenCL kernel
program&lt;/strong&gt;.  For example:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It might take too long to compile the kernel functions.&lt;/li&gt;
&lt;li&gt;Debug the kernel function much earlier.&lt;/li&gt;
&lt;li&gt;We would like to implement the OpenCL program compilation cache.&lt;/li&gt;
&lt;li&gt;There might be some trade secret in the kernel functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fortunately, there are some OpenCL APIs which can make this possible.&lt;/p&gt;
&lt;p&gt;First, we have to compile our OpenCL kernel function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ioc64 -cmd&lt;span class="o"&gt;=&lt;/span&gt;build -input&lt;span class="o"&gt;=&lt;/span&gt;vec_add.cl -ir&lt;span class="o"&gt;=&lt;/span&gt;vec_add.bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we have converted &lt;code&gt;vec_add.cl&lt;/code&gt; into binary executable for
&lt;a class="reference external" href="https://software.intel.com/en-us/intel-opencl"&gt;Intel OpenCL SDK&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Second, we have to load the binaries from our host program.  Instead of
loading &lt;code&gt;vec_add.cl&lt;/code&gt; with &lt;code&gt;clCreateProgramWithSource()&lt;/code&gt;, we should
use &lt;code&gt;clCreateProgramWithBinary()&lt;/code&gt; instead.  Here's the listing of the
changed lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Create program&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;program_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;program_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vec_add.bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;cl_program&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;clCreateProgramWithBinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clBuildProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that there is two subtle differences between
&lt;code&gt;clCreateProgramWithSource()&lt;/code&gt; and &lt;code&gt;clCreateProgramWithBinar()&lt;/code&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have to pass the devices list.&lt;/li&gt;
&lt;li&gt;For each device, we have to specify the corresponding binary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although this is troblesome, this is necessary because the pre-compiled
binaries are inherently not portable.&lt;/p&gt;
&lt;p&gt;Last, I have uploaded the source code to &lt;a class="reference external" href="https://github.com/loganchien/opencl-examples"&gt;opencl-examples&lt;/a&gt;.  Check
&lt;a class="reference external" href="https://github.com/loganchien/opencl-examples/blob/master/vec_add/vec_add_binary.c"&gt;vec_add_binary.c&lt;/a&gt; for complete source code.&lt;/p&gt;
</content><category term="opencl"></category></entry><entry><title>C++ Private Inheritence and Using Directive</title><link href="http://logan.tw/posts/2014/11/20/c-private-inheritence-and-using-directive/" rel="alternate"></link><published>2014-11-20T11:52:00+08:00</published><updated>2014-11-20T11:52:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-20:/posts/2014/11/20/c-private-inheritence-and-using-directive/</id><summary type="html">&lt;p&gt;I used to feel that the private inheritence is useless.  Although we can
implement the has-a semantics with private inheritence, it provides little
benefits compared with object composition.  Besides, in order to expose the
privately inherited members to public, C++ introduced an awkward syntax, i.e.
the &lt;code&gt;using&lt;/code&gt; directives.  These …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I used to feel that the private inheritence is useless.  Although we can
implement the has-a semantics with private inheritence, it provides little
benefits compared with object composition.  Besides, in order to expose the
privately inherited members to public, C++ introduced an awkward syntax, i.e.
the &lt;code&gt;using&lt;/code&gt; directives.  These are the reasons why I didn't like the
private inheritence at all.&lt;/p&gt;
&lt;p&gt;Recently, I changed my mind.  Since we only have to specify the function
names in the &lt;code&gt;using&lt;/code&gt; directives, all of the overloaded functions can
be &lt;em&gt;exported&lt;/em&gt; with one directive.  As a result, we can reduce the numbers of
helper functions.  For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// All of these should work.&lt;/span&gt;

  &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, IMHO, private inheritence is still a good indication of bad class
hierarchy deisgn.&lt;/p&gt;
</content><category term="cxx"></category></entry><entry><title>OpenCL 1.2 Manual Pages</title><link href="http://logan.tw/posts/2014/11/19/opencl-12-manual-pages/" rel="alternate"></link><published>2014-11-19T22:37:00+08:00</published><updated>2014-11-19T22:37:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-19:/posts/2014/11/19/opencl-12-manual-pages/</id><summary type="html">&lt;p&gt;There is a package for &lt;a class="reference external" href="https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/"&gt;OpenCL 1.2 manual pages&lt;/a&gt; in the Ubuntu repository.  To
install the &lt;code&gt;opencl-1.2-man-doc&lt;/code&gt; package, please run this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install opencl-1.2-man-doc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installing this package, we can check the OpenCL API with &lt;code&gt;man&lt;/code&gt;
command.  For example, run &lt;code&gt;man 3 clGetPlatformIDs&lt;/code&gt; to read …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is a package for &lt;a class="reference external" href="https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/"&gt;OpenCL 1.2 manual pages&lt;/a&gt; in the Ubuntu repository.  To
install the &lt;code&gt;opencl-1.2-man-doc&lt;/code&gt; package, please run this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install opencl-1.2-man-doc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installing this package, we can check the OpenCL API with &lt;code&gt;man&lt;/code&gt;
command.  For example, run &lt;code&gt;man 3 clGetPlatformIDs&lt;/code&gt; to read the document
for &lt;code&gt;clGetPlatformIDs()&lt;/code&gt;.&lt;/p&gt;
</content><category term="opencl"></category></entry><entry><title>Getting Started with OpenCL</title><link href="http://logan.tw/posts/2014/11/18/getting-started-with-opencl/" rel="alternate"></link><published>2014-11-18T23:05:00+08:00</published><updated>2014-11-18T23:05:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-18:/posts/2014/11/18/getting-started-with-opencl/</id><summary type="html">&lt;p&gt;I have heard of &lt;a class="reference external" href="http://www.khronos.org/opencl"&gt;OpenCL&lt;/a&gt; for a long time, but I haven't tried it until
recently.  Here's my note to write and run a simple &lt;strong&gt;vector addition&lt;/strong&gt; OpenCL
program.&lt;/p&gt;
&lt;p&gt;The following source code is compiled and tested with &lt;a class="reference external" href="https://software.intel.com/en-us/intel-opencl"&gt;Intel SDK for OpenCL
Applications&lt;/a&gt;.  The code should work with other OpenCL …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have heard of &lt;a class="reference external" href="http://www.khronos.org/opencl"&gt;OpenCL&lt;/a&gt; for a long time, but I haven't tried it until
recently.  Here's my note to write and run a simple &lt;strong&gt;vector addition&lt;/strong&gt; OpenCL
program.&lt;/p&gt;
&lt;p&gt;The following source code is compiled and tested with &lt;a class="reference external" href="https://software.intel.com/en-us/intel-opencl"&gt;Intel SDK for OpenCL
Applications&lt;/a&gt;.  The code should work with other OpenCL implementation as well.&lt;/p&gt;
&lt;div class="section" id="kernel-functions"&gt;
&lt;h2&gt;Kernel Functions&lt;/h2&gt;
&lt;p&gt;First, we have to write a &lt;strong&gt;kernel function&lt;/strong&gt; which will be run on the devices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__kernel&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;vec_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__global&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;__global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;__global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;in2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;in2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the OpenCL run-time will launch many work items, we can simply process
one element at once.  As a result, we are only adding &lt;code&gt;in1[i]&lt;/code&gt; and
&lt;code&gt;in2[i]&lt;/code&gt; and assigning the result to &lt;code&gt;out[i]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;__kernel&lt;/code&gt; is the attribute to mark the kernel functions.  The
&lt;code&gt;__global&lt;/code&gt; is the attribute to annotate the address space, and
&lt;code&gt;get_global_id()&lt;/code&gt; is the built-in function which will return the index of
current work item.&lt;/p&gt;
&lt;p&gt;Save this file as &lt;code&gt;vec_add.cl&lt;/code&gt;.  We will load this file later in the host
program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="host-program"&gt;
&lt;h2&gt;Host Program&lt;/h2&gt;
&lt;p&gt;Second, we have to write a &lt;strong&gt;host program&lt;/strong&gt;.  The host program is responsible
to control the devices through the OpenCL run-time.  In the host program, we
have to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Initialize the OpenCL run-time.&lt;ul&gt;
&lt;li&gt;Get the platform IDs with &lt;code&gt;clGetPlatformIDs()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Get the device IDs with &lt;code&gt;clGetDeviceIDs()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create the context with &lt;code&gt;clCreateContext()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prepare the program (kernel functions.)&lt;ul&gt;
&lt;li&gt;Load the program.&lt;/li&gt;
&lt;li&gt;Build the program with &lt;code&gt;clBuildProgram()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allocate the memory buffers with &lt;code&gt;clCreateBuffer()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create command queue with &lt;code&gt;clCreateCommandQueue()&lt;/code&gt; &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create kernel data structure.&lt;ul&gt;
&lt;li&gt;Find kernel function from the program with &lt;code&gt;clCreateKernel()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Setup kernel arguments with &lt;code&gt;clSetKernelArg()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enqueue the input buffer write command with &lt;code&gt;clEnqueueWriteBuffer()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enqueue the kernel function execution command with
&lt;code&gt;clEnqueueNDRangeKernel()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enqueue the output buffer read command with &lt;code&gt;clEnqueueReadBuffer()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wait until all commands are finished with &lt;code&gt;clFinish()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Release the resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the complete host program for the vector addition example &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;CL/cl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ftell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_SET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run_vec_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;num_elems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cl_int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cl_int&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Query platforms and devices&lt;/span&gt;
  &lt;span class="n"&gt;cl_platform_id&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clGetPlatformIDs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;cl_device_id&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clGetDeviceIDs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_DEVICE_TYPE_ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;cl_context_properties&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CL_CONTEXT_PLATFORM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cl_context_properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Create context&lt;/span&gt;
  &lt;span class="n"&gt;cl_context&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clCreateContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Create program&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;program_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;program_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vec_add.cl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;cl_program&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;clCreateProgramWithSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clBuildProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Allocate memory buffers (on the device)&lt;/span&gt;
  &lt;span class="n"&gt;cl_mem&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clCreateBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_MEM_READ_ONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;cl_mem&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clCreateBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_MEM_READ_ONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;cl_mem&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clCreateBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_MEM_WRITE_ONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Create command queue&lt;/span&gt;
  &lt;span class="n"&gt;cl_command_queue&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clCreateCommandQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Enqueue the write buffer commands&lt;/span&gt;
  &lt;span class="n"&gt;cl_event&lt;/span&gt; &lt;span class="n"&gt;wb_events&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clEnqueueWriteBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wb_events&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clEnqueueWriteBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wb_events&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Enqueue the kernel execution command&lt;/span&gt;
  &lt;span class="n"&gt;cl_kernel&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clCreateKernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vec_add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clSetKernelArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cl_mem&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clSetKernelArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cl_mem&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clSetKernelArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cl_mem&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;global_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cl_event&lt;/span&gt; &lt;span class="n"&gt;kernel_event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clEnqueueNDRangeKernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;global_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num_elems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wb_events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;kernel_event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Enqueue the read buffer command&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clEnqueueReadBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CL_TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;kernel_event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Wait until every commands are finished&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clFinish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Release the resources&lt;/span&gt;
  &lt;span class="n"&gt;clReleaseMemObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;clReleaseMemObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;clReleaseMemObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;clReleaseKernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;clReleaseProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;clReleaseCommandQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;clReleaseContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;clReleaseDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cl_int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Prepare the input data&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;num_elems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cl_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num_elems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cl_int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cl_int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num_elems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Run the OpenCL program&lt;/span&gt;
  &lt;span class="n"&gt;run_vec_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_elems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Check the answer&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num_elems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Failed: %u&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the code as &lt;code&gt;vec_add.c&lt;/code&gt; and compile with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcc vec_add.c -lOpenCL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enjoy the result!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In OpenCL 2.0 implementations, &lt;code&gt;clCreateCommandQueue()&lt;/code&gt; should be
replaced with &lt;code&gt;clCreateCommandQueueWithProperties()&lt;/code&gt;; otherwise, a
warning will be raised.  Alternatively, add
&lt;code&gt;-DCL_USE_DEPRECATED_OPENCL_2_0_APIS=1&lt;/code&gt; to silence the warning.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For simplicity, I am ignoring every possible error.  The returned error
code should handled properly in a robust software.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="opencl"></category></entry><entry><title>Fix GRUB2 Warning</title><link href="http://logan.tw/posts/2014/11/17/fix-grub2-warning/" rel="alternate"></link><published>2014-11-17T23:50:00+08:00</published><updated>2014-11-17T23:50:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-17:/posts/2014/11/17/fix-grub2-warning/</id><summary type="html">&lt;p&gt;It has been for a while that my desktop PC was not showing the &lt;a class="reference external" href="http://www.gnu.org/software/grub/"&gt;GRUB2&lt;/a&gt; menu.
Besides, I noticed that there was a warning message during the execution of
&lt;code&gt;update-grub&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Warning: Setting GRUB_TIMEOUT to a non-zero value when GRUB_HIDDEN_TIMEOUT
is set is no longer supported.&lt;/blockquote&gt;
&lt;p&gt;After checking the manual, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It has been for a while that my desktop PC was not showing the &lt;a class="reference external" href="http://www.gnu.org/software/grub/"&gt;GRUB2&lt;/a&gt; menu.
Besides, I noticed that there was a warning message during the execution of
&lt;code&gt;update-grub&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Warning: Setting GRUB_TIMEOUT to a non-zero value when GRUB_HIDDEN_TIMEOUT
is set is no longer supported.&lt;/blockquote&gt;
&lt;p&gt;After checking the manual, I learned that we can fix the problem by removing
following line from &lt;code&gt;/etc/default/grub&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GRUB_HIDDEN_TIMEOUT=0
&lt;/pre&gt;
&lt;p&gt;And update the GRUB with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo update-grub
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After rebooting, GRUB should work now.&lt;/p&gt;
</content><category term="linux"></category><category term="grub"></category></entry><entry><title>GitHub Pages and HTTPS</title><link href="http://logan.tw/posts/2014/11/16/github-pages-and-https/" rel="alternate"></link><published>2014-11-16T23:31:00+08:00</published><updated>2014-11-16T23:31:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-16:/posts/2014/11/16/github-pages-and-https/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; supports HTTPS protocol.  It will be good to prefer HTTPS to
HTTP.  However, I found that if the URLs are not written carefully, the
user might be redirected to HTTP URLs.&lt;/p&gt;
&lt;p&gt;For unknown reason, &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; are redirecting the directories without
trailing slash to the HTTP URLs.  For …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; supports HTTPS protocol.  It will be good to prefer HTTPS to
HTTP.  However, I found that if the URLs are not written carefully, the
user might be redirected to HTTP URLs.&lt;/p&gt;
&lt;p&gt;For unknown reason, &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; are redirecting the directories without
trailing slash to the HTTP URLs.  For example, the following URL:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://loganchien.github.io/cert
&lt;/pre&gt;
&lt;p&gt;will be redirected to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://loganchien.github.io/cert/
&lt;/pre&gt;
&lt;p&gt;To avoid this pitfall, please make sure that your URLs are ending with trailing
slash if they are pointing to directories.  For example,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
https://loganchien.github.io/cert/
&lt;/pre&gt;
&lt;p&gt;This URL won't be redirected and work as expected.&lt;/p&gt;
</content><category term="github"></category><category term="https"></category></entry><entry><title>Pelican and GitHub Pages</title><link href="http://logan.tw/posts/2014/11/16/pelican-and-github-pages/" rel="alternate"></link><published>2014-11-16T23:01:00+08:00</published><updated>2014-11-16T23:01:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-16:/posts/2014/11/16/pelican-and-github-pages/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; has built-in support for &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.  However, I noticed that
the &lt;code&gt;ghp-import&lt;/code&gt; command might screw up the commit log if your GitHub
Pages and your Pelican source code share the same branch name.&lt;/p&gt;
&lt;p&gt;According to the document of &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;, the user pages should be
committed to &lt;code&gt;master&lt;/code&gt; branch …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; has built-in support for &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.  However, I noticed that
the &lt;code&gt;ghp-import&lt;/code&gt; command might screw up the commit log if your GitHub
Pages and your Pelican source code share the same branch name.&lt;/p&gt;
&lt;p&gt;According to the document of &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;, the user pages should be
committed to &lt;code&gt;master&lt;/code&gt; branch (instead of &lt;code&gt;gh_pages&lt;/code&gt;.)  If you have
answered &lt;code&gt;master&lt;/code&gt; while &lt;code&gt;pelican-quickstart&lt;/code&gt; was asking for the
GitHub Page branch, then &lt;code&gt;ghp-import&lt;/code&gt; will automatically commit the
generated output to the &lt;code&gt;master&lt;/code&gt; branch.  Consequently, the git
repository will be screwed up.&lt;/p&gt;
&lt;p&gt;My solution is to create a &lt;code&gt;pelican-source&lt;/code&gt; branch for Pelican source
code, and commit the generated output to the &lt;code&gt;master&lt;/code&gt; branch.  This will
fix this issue without any problems.&lt;/p&gt;
</content><category term="github"></category><category term="pelican"></category></entry><entry><title>SSL Certificate</title><link href="http://logan.tw/posts/2014/11/15/ssl-certificate/" rel="alternate"></link><published>2014-11-15T02:30:00+08:00</published><updated>2014-11-15T02:30:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-15:/posts/2014/11/15/ssl-certificate/</id><summary type="html">&lt;p&gt;I would like to run &lt;a class="reference external" href="https://code.google.com/p/shellinabox/"&gt;shellinabox&lt;/a&gt; and my private blog system through HTTPS
protocol.  However, an SSL certificate is really expensive, thus I decided to
run our own &lt;strong&gt;certificate authority&lt;/strong&gt; and distribute my &lt;em&gt;cacert.pem&lt;/em&gt; through
&lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In general, running a certificate authority requires three steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a RSA …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I would like to run &lt;a class="reference external" href="https://code.google.com/p/shellinabox/"&gt;shellinabox&lt;/a&gt; and my private blog system through HTTPS
protocol.  However, an SSL certificate is really expensive, thus I decided to
run our own &lt;strong&gt;certificate authority&lt;/strong&gt; and distribute my &lt;em&gt;cacert.pem&lt;/em&gt; through
&lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In general, running a certificate authority requires three steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a RSA public/private keys for the CA.  This step will create
&lt;code&gt;cacert.pem&lt;/code&gt; as well.  You should distribute the CA certificate via
some safe tunnel.&lt;/li&gt;
&lt;li&gt;For each service, create a &lt;em&gt;certificate request&lt;/em&gt; and send it to CA.&lt;/li&gt;
&lt;li&gt;The CA should sign the certificate request, and return it back.&lt;/li&gt;
&lt;li&gt;Install the CA-signed SSL certificate to HTTPS server (and etc.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The OpenSSL package from Ubuntu has provide a simple script for us to
manage the certificates.  Let's start.&lt;/p&gt;
&lt;div class="section" id="create-a-certificate-authority"&gt;
&lt;h2&gt;Create a Certificate Authority&lt;/h2&gt;
&lt;p&gt;Create directory to save everything:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir MyCA
$ chmod &lt;span class="m"&gt;700&lt;/span&gt; MyCA
$ &lt;span class="nb"&gt;cd&lt;/span&gt; MyCA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copy the tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cp /usr/lib/ssl/misc/CA.pl .
$ cp /etc/ssl/openssl.cnf .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit the configurations to fit your need, and finally create the certificate
for your CA:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./CA.pl -newca
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the &lt;code&gt;cacert.pem&lt;/code&gt; will be generated at
&lt;code&gt;demoCA/cacert.pem&lt;/code&gt;.  Install this certificate as an authority in your
browser.  You can also check the fingerprint with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ openssl x509 -fingerprint -noout -in cacert.pem
$ openssl x509 -sha256 -fingerprint -noout -in cacert.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="generate-certificates-for-your-service"&gt;
&lt;h2&gt;Generate Certificates for Your Service&lt;/h2&gt;
&lt;p&gt;To create the SSL certificate for your service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a certificate request&lt;/span&gt;
$ ./CA.pl -newreq

&lt;span class="c1"&gt;# Sign a certificate request&lt;/span&gt;
$ ./CA.pl -sign
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated &lt;code&gt;newkey.pem&lt;/code&gt; and &lt;code&gt;newcert.pem&lt;/code&gt; are the private key
and the certificate respectively.&lt;/p&gt;
&lt;p&gt;Please notice that the &lt;code&gt;newkey.pem&lt;/code&gt; has been encrypted with a passpharse.
Under some situation, you have to decrypt it before installing the certificate
(e.g. Apache2).  Here's the command to decrypt the private key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ openssl rsa -in newkey.pem -out newkey.nopass.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="https"></category><category term="apache2"></category><category term="ssl"></category></entry><entry><title>C++ std::list Operations</title><link href="http://logan.tw/posts/2014/11/14/c-stdlist-operations/" rel="alternate"></link><published>2014-11-14T23:53:00+08:00</published><updated>2014-11-14T23:53:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-14:/posts/2014/11/14/c-stdlist-operations/</id><summary type="html">&lt;p&gt;To sort the doubly linked list &lt;code&gt;std::list&lt;/code&gt;, we can simply call the
&lt;code&gt;sort()&lt;/code&gt; member function.  For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Sort the std::list!&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To sort the doubly linked list &lt;code&gt;std::list&lt;/code&gt;, we can simply call the
&lt;code&gt;sort()&lt;/code&gt; member function.  For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Sort the std::list!&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can't replace &lt;code&gt;xs.sort()&lt;/code&gt; with &lt;code&gt;std::sort(xs)&lt;/code&gt;, because the
&lt;code&gt;std::sort()&lt;/code&gt; function from &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; header requires random
access iterator as the input argument.  Unfortunately, &lt;code&gt;std::list&lt;/code&gt; only
provides bidirectional iterator.  That's why the C++ standard library provides
an &lt;code&gt;std::list&lt;/code&gt;-specific sort function.&lt;/p&gt;
&lt;p&gt;To move the nodes in &lt;code&gt;std::list&lt;/code&gt;, we can call the member function
&lt;code&gt;splice()&lt;/code&gt;.  For example, we can move the second element to the beginning
of the list with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Find the iterator to the second element&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Move the second node to the beginning of xs&lt;/span&gt;
  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;splice()&lt;/code&gt; function can move the a sequence of nodes from one list
to the other as well.  For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move_nelements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Find the iterator to the n-th element&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Move the elements&lt;/span&gt;
  &lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;move_nelements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;y&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test our understanding, let's write our &lt;code&gt;merge_sort()&lt;/code&gt; for
&lt;code&gt;std::list&lt;/code&gt;.  Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Alloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;merge_sort_helper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Alloc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;num_elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;Compare&lt;/span&gt; &lt;span class="n"&gt;is_less_than&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Alloc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Induction basis: List with small number of elements.&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="nf"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_less_than&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Swap the node if they are not ordered&lt;/span&gt;
        &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Partition&lt;/span&gt;
  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num_elem&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="nf"&gt;mid_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid_iter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Split the list&lt;/span&gt;
  &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid_iter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="c1"&gt;// Sort the xs and ys&lt;/span&gt;
  &lt;span class="n"&gt;merge_sort_helper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_less_than&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;merge_sort_helper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_elem&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_less_than&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Merge the ys back to xs&lt;/span&gt;
  &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;xs_it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;xs_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;ys_it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;ys_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs_it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;xs_end&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ys_it&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ys_end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_less_than&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ys_it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;xs_it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// *ys_it is less than *xs_it, thus insert ys_it before xs_it.&lt;/span&gt;
      &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs_it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys_it&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;xs_it&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys_it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys_end&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Alloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Compare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Alloc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Compare&lt;/span&gt; &lt;span class="n"&gt;is_less_than&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;merge_sort_helper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;is_less_than&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="n"&gt;merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's call it a day.  In this article, we have introduced the usage of
&lt;code&gt;std::list&amp;lt;T&amp;gt;::sort()&lt;/code&gt; and &lt;code&gt;std::list::splice()&lt;/code&gt;.  Hope you enjoy
this article.&lt;/p&gt;
</content><category term="cxx"></category></entry><entry><title>C++ Associative Container and Iterator Validness</title><link href="http://logan.tw/posts/2014/11/13/c-associative-container-and-iterator-validness/" rel="alternate"></link><published>2014-11-13T22:38:00+08:00</published><updated>2014-11-13T22:38:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-13:/posts/2014/11/13/c-associative-container-and-iterator-validness/</id><summary type="html">&lt;p&gt;I used to believe that iterators will be invalidated after calling the
member functions &lt;code&gt;insert()&lt;/code&gt; or &lt;code&gt;erase()&lt;/code&gt; of containers.  Thus, I
would adopt a conservative approach:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a temporary container.&lt;/li&gt;
&lt;li&gt;Copy the elements which I would like to keep to the temporary container.&lt;/li&gt;
&lt;li&gt;Swap the container.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, to remove …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I used to believe that iterators will be invalidated after calling the
member functions &lt;code&gt;insert()&lt;/code&gt; or &lt;code&gt;erase()&lt;/code&gt; of containers.  Thus, I
would adopt a conservative approach:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a temporary container.&lt;/li&gt;
&lt;li&gt;Copy the elements which I would like to keep to the temporary container.&lt;/li&gt;
&lt;li&gt;Swap the container.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, to remove odd numbers from a set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;remove_odds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this code is inefficient for two reasons:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Elements copy overhead -- If the container is hold heavy elements, e.g.
&lt;code&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt;, then copying elements will cost a lot of
time and space.&lt;/li&gt;
&lt;li&gt;Temporary container construction overhead -- The overhead to allocate new
element nodes and insert the elements to the container.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In addition, this conservative approach sounds like an overkill if only a little
portion of elements are expected to be removed.&lt;/p&gt;
&lt;p&gt;Fortunately, according to the latest &lt;a class="reference external" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf"&gt;C++14 draft (N3797)&lt;/a&gt;, the &lt;strong&gt;associative
containers&lt;/strong&gt; (23.2.4 #9) guarantees that:&lt;/p&gt;
&lt;blockquote&gt;
The &lt;code&gt;insert()&lt;/code&gt; and &lt;code&gt;emplace()&lt;/code&gt; members shall not affect the
validity of iterators and references to container &lt;a class="footnote-reference" href="#typo" id="id1"&gt;[1]&lt;/a&gt;, and the
&lt;code&gt;erase()&lt;/code&gt; shall invalidate only iterators and references to the
erased elements.&lt;/blockquote&gt;
&lt;p&gt;Besides, the &lt;strong&gt;unordered associative containers&lt;/strong&gt; (23.2.5 #14) guarantees that:&lt;/p&gt;
&lt;blockquote&gt;
The &lt;code&gt;insert()&lt;/code&gt; and &lt;code&gt;emplace()&lt;/code&gt; members shall not affect the
validity of references to container elements, but may invalidate all
iterators to the container &lt;a class="footnote-reference" href="#uac" id="id2"&gt;[2]&lt;/a&gt;.  The &lt;code&gt;erase()&lt;/code&gt; members shall
invalidate only iterators and references to the erased elements.&lt;/blockquote&gt;
&lt;p&gt;Thus, for associative containers (including &lt;code&gt;std::set&lt;/code&gt;, &lt;code&gt;std::map&lt;/code&gt;,
&lt;code&gt;std::multiset&lt;/code&gt;, and &lt;code&gt;std::multimap&lt;/code&gt;) and unordered associative
containers (including &lt;code&gt;std::unorderd_set&lt;/code&gt;, &lt;code&gt;std::unordered_map&lt;/code&gt;,
&lt;code&gt;std::unordered_multiset&lt;/code&gt;, &lt;code&gt;std::unordered_multimap&lt;/code&gt;), we can
directly erase the elements from the container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;remove_odds_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Move to next element.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Erase current element and post increase iterator.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, please be careful that following code &lt;code&gt;remove_odds_3()&lt;/code&gt; is not
equivalent to &lt;code&gt;remove_odds_2()&lt;/code&gt; because the &lt;code&gt;erase()&lt;/code&gt; function will
invalidate the iterator to the erased element.  According to 24.2.1 #5 and #10,
any operations on the invalid iterator except the destruction (including
&lt;code&gt;++i&lt;/code&gt;) will in result undefined behavior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// XXX Incorrect code to demostrate undefined behavior&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;remove_odds_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// erase() will invalidate the iterator it.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To complete our discussion, it is important to know that there is &lt;em&gt;no such
guarantee&lt;/em&gt; for &lt;strong&gt;sequence containers&lt;/strong&gt; &lt;a class="footnote-reference" href="#list" id="id3"&gt;[3]&lt;/a&gt;.  We should either fall back to
the conservative copy-and-swap approach or restart from &lt;code&gt;c.begin()&lt;/code&gt; after
removing any elements.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="typo" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;IMO, there is a typo in &amp;quot;shall not affect the validity of iterators
and references to &lt;em&gt;container&lt;/em&gt;&amp;quot;.   The &amp;quot;&lt;em&gt;container&lt;/em&gt;&amp;quot; should be replaced with
&amp;quot;&lt;em&gt;elements&lt;/em&gt;.&amp;quot;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="uac" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Please notice that the unordered associative containers do not always
guarantee the iterator validness on &lt;code&gt;insert()&lt;/code&gt;, since the iterator
will be invalidated when the hash table is resized.  Read 23.2.5 #15 for
more details.  However, this is not related to this post because we are
focusing on the &lt;code&gt;erase()&lt;/code&gt; function.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="list" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As a special case, &lt;code&gt;std::list&lt;/code&gt; gives extra guarantee on
&lt;code&gt;insert()&lt;/code&gt; and &lt;code&gt;erase()&lt;/code&gt;.  But this does not apply to sequence
containers, such as &lt;code&gt;std::vector&lt;/code&gt; and &lt;code&gt;std::deque&lt;/code&gt;, in general.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="cxx"></category><category term="stl"></category></entry><entry><title>Git Merge Base and Checkout</title><link href="http://logan.tw/posts/2014/11/13/git-merge-base-and-checkout/" rel="alternate"></link><published>2014-11-13T22:04:00+08:00</published><updated>2014-11-13T22:04:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-13:/posts/2014/11/13/git-merge-base-and-checkout/</id><summary type="html">&lt;p&gt;Today I have learned two different usages of &lt;code&gt;git&lt;/code&gt; command.  First, to
list the &lt;strong&gt;least common ancestor&lt;/strong&gt; of two refs, we may use following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git merge-base --octopus &amp;lt;commit_1&amp;gt; &amp;lt;commit_2&amp;gt; ... &amp;lt;commit_n&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that &lt;code&gt;--octopus&lt;/code&gt; is mandatory; otherwise, &lt;code&gt;git&lt;/code&gt;
will create a hypothetical commit &lt;code&gt;M&lt;/code&gt;, which merges &lt;code&gt;commit_2&lt;/code&gt; ..
&lt;code&gt;commit_n&lt;/code&gt;, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I have learned two different usages of &lt;code&gt;git&lt;/code&gt; command.  First, to
list the &lt;strong&gt;least common ancestor&lt;/strong&gt; of two refs, we may use following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git merge-base --octopus &amp;lt;commit_1&amp;gt; &amp;lt;commit_2&amp;gt; ... &amp;lt;commit_n&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please notice that &lt;code&gt;--octopus&lt;/code&gt; is mandatory; otherwise, &lt;code&gt;git&lt;/code&gt;
will create a hypothetical commit &lt;code&gt;M&lt;/code&gt;, which merges &lt;code&gt;commit_2&lt;/code&gt; ..
&lt;code&gt;commit_n&lt;/code&gt;, and then compute the common ancestor of &lt;code&gt;commit_1&lt;/code&gt; and
&lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;git merge-base&lt;/code&gt; command will print the SHA1 of the least common
ancestor.  If such commit is not available, then &lt;code&gt;git&lt;/code&gt; will return with
error.&lt;/p&gt;
&lt;p&gt;The second usage I have learned is that we can create a &lt;strong&gt;orphan branch&lt;/strong&gt; with
following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout --orphan &amp;lt;new-branch-name&amp;gt;
$ git reset
$ rm -rf *
... add files ...
$ git commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The orphan branch will be completely independent of the existing branches.
This is helpful when creating &lt;a class="reference external" href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; branch.&lt;/p&gt;
</content><category term="git"></category><category term="tips"></category></entry><entry><title>Soundness and Completeness of the Type System</title><link href="http://logan.tw/posts/2014/11/12/soundness-and-completeness-of-the-type-system/" rel="alternate"></link><published>2014-11-12T21:26:00+08:00</published><updated>2014-11-12T21:26:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-12:/posts/2014/11/12/soundness-and-completeness-of-the-type-system/</id><summary type="html">&lt;p&gt;In the section 6 of  &lt;a class="reference external" href="https://class.coursera.org/proglang-003"&gt;Programming Languages&lt;/a&gt; course, Dan Grossman discussed
about the soundness and the completeness of the type system.  He said that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A type-system is &lt;strong&gt;sound&lt;/strong&gt; implies that all of type-checked programs are
correct (in the other words, all of the incorrect program can't be type
checked), i …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;In the section 6 of  &lt;a class="reference external" href="https://class.coursera.org/proglang-003"&gt;Programming Languages&lt;/a&gt; course, Dan Grossman discussed
about the soundness and the completeness of the type system.  He said that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A type-system is &lt;strong&gt;sound&lt;/strong&gt; implies that all of type-checked programs are
correct (in the other words, all of the incorrect program can't be type
checked), i.e. there won't be any &lt;em&gt;false negative&lt;/em&gt; &lt;a class="footnote-reference" href="#neg" id="id1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A type-system is &lt;strong&gt;complete&lt;/strong&gt; implies that all of the correct program can
be accepted by the type checker, i.e. there won't be any &lt;em&gt;false positive&lt;/em&gt;
&lt;a class="footnote-reference" href="#pos" id="id2"&gt;[2]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this explanation, I have better understanding to the soundness and the
completeness of the logic system.  In the logic system, we would say that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A logic system is &lt;strong&gt;sound&lt;/strong&gt; means that all provable statements are true in
models &lt;a class="footnote-reference" href="#ana" id="id3"&gt;[3]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A logic system is &lt;strong&gt;complete&lt;/strong&gt; means that all statements which are true in
all models are provable &lt;a class="footnote-reference" href="#ana" id="id4"&gt;[3]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides, according to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems"&gt;Godel's incompleteness theorems&lt;/a&gt;, if your system is
expressive enough to represent natural numbers, then it can't be both sound
and complete.  This theorem applies to the type system as well.  Usually, most
programming language would prefer soundness over completeness, since false
positive will result in bad consequence.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="neg" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For negative, we mean that the type checker claims that there is
&lt;em&gt;no error&lt;/em&gt; in the input program, i.e. the input program is correct.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="pos" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For positive, we mean that the type checker claims that there are
&lt;em&gt;some errors&lt;/em&gt; in the input program, i.e. the input program is incorrect.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="ana" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id3"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id4"&gt;2&lt;/a&gt;)&lt;/em&gt; Analogous to the type system, provable is corresponded to type checked
and model is the set of correct program.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="plt"></category><category term="logic"></category></entry><entry><title>First Post</title><link href="http://logan.tw/posts/2014/11/11/first-post/" rel="alternate"></link><published>2014-11-11T23:38:00+08:00</published><updated>2014-11-11T23:38:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-11:/posts/2014/11/11/first-post/</id><summary type="html">&lt;p&gt;After using &lt;a class="reference external" href="https://blogger.com"&gt;Blogger&lt;/a&gt; for several years, I decided to switch to &lt;a class="reference external" href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; and
&lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.  I feel it will be much easier to write down my thoughts,
notes, and ideas with reStructuredText.  As a result, I can update the blog
more frequently.&lt;/p&gt;
&lt;p&gt;In the foreseeable future, I will start to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After using &lt;a class="reference external" href="https://blogger.com"&gt;Blogger&lt;/a&gt; for several years, I decided to switch to &lt;a class="reference external" href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; and
&lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.  I feel it will be much easier to write down my thoughts,
notes, and ideas with reStructuredText.  As a result, I can update the blog
more frequently.&lt;/p&gt;
&lt;p&gt;In the foreseeable future, I will start to write some C++ related articles.
Stay tuned!  :-)&lt;/p&gt;
</content></entry></feed>