<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Logan's Note</title><link href="http://logan.tw/" rel="alternate"></link><link href="http://logan.tw/feeds/web.atom.xml" rel="self"></link><id>http://logan.tw/</id><updated>2015-11-15T22:35:00+08:00</updated><entry><title>Autossh and Systemd Service</title><link href="http://logan.tw/posts/2015/11/15/autossh-and-systemd-service/" rel="alternate"></link><updated>2015-11-15T22:35:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-11-15:posts/2015/11/15/autossh-and-systemd-service/</id><summary type="html">&lt;p&gt;Several months ago, I wrote a &lt;a class="reference external" href="http://logan.tw/posts/2014/12/15/autossh-and-ubuntu-upstart-daemon/"&gt;post&lt;/a&gt; to describe how to setup an &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; daemon
with &lt;a class="reference external" href="http://upstart.ubuntu.com/"&gt;upstart&lt;/a&gt;.  Since Ubuntu 15.04 has switched to &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;, I would like to do
the same with &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;.  I will give a brief introduction to &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; in this
post.&lt;/p&gt;
&lt;div class="section" id="systemd-unit-file"&gt;
&lt;h2&gt;Systemd Unit File&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;Systemd&lt;/a&gt; services are configured by &lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;unit files&lt;/a&gt;.  By convention, these files
use &lt;code&gt;.service&lt;/code&gt; as their file name extension.&lt;/p&gt;
&lt;p&gt;On Ubuntu, there are two directories for &lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;unit files&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;/lib/systemd&lt;/code&gt; -- This is the directory for unit files provided by the
installed packages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/systemd&lt;/code&gt; -- This is the directory for the administrators to
create, override, modify or mask the unit files in &lt;code&gt;/lib/systemd&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although the autossh package does not come with any unit file, we can create
one in &lt;code&gt;/lib/systemd&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vim /lib/systemd/system/autossh.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the content of the unit file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;autossh&lt;/span&gt;
&lt;span class="na"&gt;Wants&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network-online.target&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network-online.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;simple&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;autossh&lt;/span&gt;
&lt;span class="na"&gt;EnvironmentFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/etc/default/autossh&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/autossh $SSH_OPTIONS&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;
&lt;span class="na"&gt;RestartSec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;60&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some explanations to the options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Description=&lt;/strong&gt; contains some words that can describe the service.  This
will show up in the logs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Wants=&lt;/strong&gt; specifies the dependencies of the services.  If this service is
activated, &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; will also activate the listed services.&lt;/p&gt;
&lt;p&gt;In our case, we would like to make sure that the network interface is ready,
thus we specified &lt;code&gt;network-online.target&lt;/code&gt; &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;After=&lt;/strong&gt; specifies the order to launch the service.  With the &lt;code&gt;After&lt;/code&gt;
option, &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; will only launch the service after the activation of listed
services.  Notice that this option is orthogonal to &lt;code&gt;Wants&lt;/code&gt; (or
&lt;code&gt;Requires&lt;/code&gt;.)  If &lt;code&gt;After&lt;/code&gt; is not specified, &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; may launch
the dependencies simultaneously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Type=&lt;/strong&gt; specifies the type of the service.  There are several options:
simple, fork, oneshot, and etc.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A &lt;strong&gt;simple&lt;/strong&gt; service will contain one long running process.  The process
will not stop unless we kill the service.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;fork&lt;/strong&gt; service means that the &lt;code&gt;ExecStart&lt;/code&gt; command will fork a
subprocess and return immediately.  In the other words, the command will
manage the process by themselves.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;oneshot&lt;/strong&gt; service will launch a new process whenever an event triggers
this service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;User=&lt;/strong&gt; specifies the user as whom the service process is run.  By default,
the process is run as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;EnvironmentFile=&lt;/strong&gt; specifies the path to an environment file, which
contains the environment variables for the service process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;ExecStart=&lt;/strong&gt; specifies the command to launch the service.  We have to
specify the full path to the executable to be executed.&lt;/p&gt;
&lt;p&gt;Notice that there are two &lt;code&gt;ExecStart&lt;/code&gt; in our unit file.  They are not
typos.  In order to allow this unit file to be included by another unit
file, we have to clear &lt;code&gt;ExecStart&lt;/code&gt; before specifying a new command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;WantedBy=&lt;/strong&gt; specifies the &lt;em&gt;init stage&lt;/em&gt; to launch the service (if the service
is enabled.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, we can create a soft link in &lt;code&gt;/etc/systemd/system&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo ln -s /lib/systemd/system/autossh.service &lt;span class="se"&gt;\&lt;/span&gt;
      /etc/systemd/system/autossh.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="environment-file"&gt;
&lt;h2&gt;Environment File&lt;/h2&gt;
&lt;p&gt;Did you notice that there is a variable &lt;code&gt;$SSH_OPTIONS&lt;/code&gt; in the
&lt;code&gt;ExecStart&lt;/code&gt; option above?  It will be substituted by the &lt;strong&gt;environment
variable&lt;/strong&gt; from the file specified by &lt;code&gt;EnvironmentFile&lt;/code&gt;.  Environment
files are the files which contain the configurations which should be passed to
the service.&lt;/p&gt;
&lt;p&gt;Let's create an environment file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vim /etc/default/autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The environment file resembles to a Bash script.  Here's the example for our
&lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;AUTOSSH_POLL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60
&lt;span class="nv"&gt;AUTOSSH_FIRST_POLL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30
&lt;span class="nv"&gt;AUTOSSH_GATETIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="nv"&gt;AUTOSSH_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;22000
&lt;span class="nv"&gt;SSH_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-N -R 2222:localhost:22 example.com -i /home/autossh/.ssh/id_rsa&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can find more options by reading &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; man pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="start-the-service"&gt;
&lt;h2&gt;Start the Service&lt;/h2&gt;
&lt;p&gt;Before we can start our service, we have to ask &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; to reload all unit
files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo systemctl daemon-reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can start &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;autossh&lt;/a&gt; service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo systemctl start autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then, we can check the status with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo systemctl status autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this command, you should be able to see the following output (if the unit
file is correct):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;* autossh.service - autossh
   Loaded: loaded (/lib/systemd/system/autossh.service; enabled;
vendor preset: enabled)
   Active: active (running) since Sun 2015-11-15 22:51:25 CST; 1min 1s ago
 Main PID: 14382 (autossh)
   CGroup: /system.slice/autossh.service
           |-14382 /usr/lib/autossh/autossh -N -R 8022:localhost:22 ....
           `-14385 /usr/bin/ssh -L ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are some problems, check &lt;code&gt;/var/log/syslog&lt;/code&gt; for more details.&lt;/p&gt;
&lt;p&gt;BTW, to stop the service, we can use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo systemctl stop autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="launch-service-at-boot-time"&gt;
&lt;h2&gt;Launch Service at Boot Time&lt;/h2&gt;
&lt;p&gt;OK.  If everything goes well, then we may ask &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; to launch our service
during the boot time.  To do so, we have to &lt;strong&gt;enable&lt;/strong&gt; the service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, I have covered some basic concept of &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; unit files and
basic commands to control &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reload unit files with &lt;code&gt;sudo systemctl daemon-reload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start/stop service with: &lt;code&gt;sudo systemctl [start/stop] [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check service status with: &lt;code&gt;sudo systemctl status [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Register/unregister the service for the boot time with:
&lt;code&gt;sudo systemctl [enable/disable] [name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope you enjoy this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Systemd"&gt;Wikipedia: systemd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Systemd"&gt;Arch Linux wiki: systemd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.ubuntu.com/SystemdForUpstartUsers"&gt;Ubuntu wiki: systemd for upstart users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/chap-Managing_Services_with_systemd.html"&gt;RedHat RHEL7: System Administrator's Guide: Chapter 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/"&gt;Systemd Manuals&lt;/a&gt;: &lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;systemd.unit&lt;/a&gt; and &lt;a class="reference external" href="http://www.freedesktop.org/software/systemd/man/systemd.service.html"&gt;systemd.service&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/"&gt;Running Services After the Network is up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It is non-trivial to write an unit file for the service that requires
network connections, read &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/"&gt;Running Services After the Network is up&lt;/a&gt; for
more details.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="systemd"></category><category term="autossh"></category><category term="ssh"></category></entry><entry><title>Discourse Installation Notes</title><link href="http://logan.tw/posts/2015/09/13/discourse-installation-notes/" rel="alternate"></link><updated>2015-09-13T22:28:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-09-13:posts/2015/09/13/discourse-installation-notes/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; is a new generation discussion forum.  I found that &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;
is very suitable for personal note taking.  One notable feature of &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;
is that the users can focus on conversations.  Besides, it supports Markdown as
the message markup language.  This is the reason why I like it very
much.&lt;/p&gt;
&lt;p&gt;In the rest of the post, I would like to write down how did I install
&lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; on a &lt;a class="reference external" href="https://digitalocean.com"&gt;Digital Ocean&lt;/a&gt; droplet.&lt;/p&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;To install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;, there are five essential steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setup-the-mail-server"&gt;Setup the Mail Server&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-a-droplet"&gt;Create a Droplet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setup-the-swap-file"&gt;Setup the Swap File&lt;/a&gt;: If the VPS plan does not have sufficient RAM (less
than 1G), it is required to setup a swap file.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installation"&gt;Installation&lt;/a&gt;: Install &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt;, install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; and launch the
containers.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#configure-discourse"&gt;Configure Discourse&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-the-mail-server"&gt;
&lt;h2&gt;Setup the Mail Server&lt;/h2&gt;
&lt;p&gt;It is required to have a mail server for &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;.  If you already have
one, then just use it.  If you don't have a mail server, then you can register
one for free at &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt;, which allows you to send 10k e-mails per month.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Visit &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt; and click the &lt;strong&gt;TRY FOR FREE&lt;/strong&gt; button on the top right
corner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Sign up&lt;/strong&gt; for &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Fill in the &lt;em&gt;e-mail&lt;/em&gt; and the &lt;em&gt;password&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Solve the CAPTCHA.&lt;/li&gt;
&lt;li&gt;Agree to the &lt;em&gt;terms of use&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Sign Up&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Verify your account&lt;/strong&gt; by clicking the links in the confirmation e-mail.&lt;/p&gt;
&lt;p&gt;Note: If you didn't receive the confirmation e-mail, you can request a new
e-mail by clicking &amp;quot;&lt;strong&gt;ACCOUNT&lt;/strong&gt; -&amp;gt; &lt;strong&gt;SENDING DOMAINS&lt;/strong&gt;&amp;quot; and click the link
in the top bar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Before we can send e-mails with &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt;, we have to claim that we
are the owner of a domain name.  This will require us to configure the DNS
records.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click &amp;quot;&lt;strong&gt;ACCOUNT&lt;/strong&gt; -&amp;gt; &lt;strong&gt;SENDING DOMAINS&lt;/strong&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;NEW DOMAIN&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Fill in the domain name and click &lt;strong&gt;ADD DOMAIN&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Update DNS records for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sender_Policy_Framework"&gt;SPF&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail"&gt;DKIM&lt;/a&gt;.  Click the &lt;strong&gt;Configure&lt;/strong&gt; link
for more details.  In summary, you have to add two different TXT
records.&lt;/li&gt;
&lt;li&gt;After updating the DNS TXT records, click the &lt;strong&gt;Test&lt;/strong&gt; links for
verification.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a new API key.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click &amp;quot;&lt;strong&gt;ACCOUNT&lt;/strong&gt; -&amp;gt; &lt;strong&gt;API &amp;amp; SMTP&lt;/strong&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;&lt;strong&gt;NEW API KEY&lt;/strong&gt;&amp;quot; button.&lt;/li&gt;
&lt;li&gt;Fill in the &lt;em&gt;API Key Name&lt;/em&gt;, e.g. &amp;quot;discourse&amp;quot;.&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Send via SMTP&lt;/strong&gt; in the &lt;em&gt;API Permissions&lt;/em&gt; section.&lt;/li&gt;
&lt;li&gt;Fill in the SparkPost password again.&lt;/li&gt;
&lt;li&gt;Copy the API key.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-droplet"&gt;
&lt;h2&gt;Create a Droplet&lt;/h2&gt;
&lt;p&gt;After logging into &lt;a class="reference external" href="https://digitalocean.com"&gt;Digital Ocean&lt;/a&gt;, click on the &lt;strong&gt;Create Droplet&lt;/strong&gt; button on
the top right corner.  In the new page, you have to fill in the following
fields:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Droplet Hostname&lt;/strong&gt; -- Choose a good name for your installation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select Size&lt;/strong&gt; -- All plans are fine.  I tried the cheapest $5/mo plan, and
it works perfectly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select Region&lt;/strong&gt; -- Choose a region for the data center.  I chose
&lt;em&gt;New York&lt;/em&gt; data center.  Pick one which is close to your visitors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Select Image&lt;/strong&gt; -- The default image, &lt;em&gt;Ubuntu 14.04 x64&lt;/em&gt;, is suggested.
It is recommended by the &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; development team.&lt;/li&gt;
&lt;li&gt;Add your SSH public key to the &lt;strong&gt;Add SSH Keys&lt;/strong&gt; section.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we can click on the &lt;strong&gt;Create Droplet&lt;/strong&gt; button and wait for a while.
After the droplet is created, then try to log in with &lt;code&gt;ssh&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Note: You can check the SSH server fingerprint by clicking the
&lt;strong&gt;Console Access&lt;/strong&gt; button in the &lt;a class="reference external" href="https://digitalocean.com"&gt;Digital Ocean&lt;/a&gt; admin console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-the-swap-file"&gt;
&lt;h2&gt;Setup the Swap File&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; requires 1GB RAM to run without problems.  If you are running with
500MB RAM, then you must enable the swap file.  Otherwise, you will not be able
to build the &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; container.&lt;/p&gt;
&lt;p&gt;Here are the instructions to setup the &lt;strong&gt;swap file&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create a new swap file.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo fallocate -l 4G /swapfile

&lt;span class="c"&gt;# Change the file permission.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile

&lt;span class="c"&gt;# Format the swap file.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mkswap /swapfile

&lt;span class="c"&gt;# Enable the swap file.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo swapon /swapfile

&lt;span class="c"&gt;# Check that the swap file has been enabled.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo swapon -s
Filenam    Type  Size     Used  Priority
/swapfile  file  &lt;span class="m"&gt;4194300&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;     -1

&lt;span class="c"&gt;# Add the swap file to fstab&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo bash -c &lt;span class="s2"&gt;&amp;quot;echo &amp;#39;/swapfile none swap sw 0 0&amp;#39; &amp;gt;&amp;gt; /etc/fstab&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Reboot the machine now.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can further tweak the configuration by reading:
&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04"&gt;How to Add Swap on Ubuntu 14.04&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;In this section, we would like to install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;.  There are three
steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#harden-droplet"&gt;Harden Droplet&lt;/a&gt; - Make your Droplet much more secure.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#install-docker"&gt;Install Docker&lt;/a&gt; - Install &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt; for &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#install-discourse"&gt;Install Discourse&lt;/a&gt; - Install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; and modify the settings.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="harden-droplet"&gt;
&lt;h3&gt;Harden Droplet&lt;/h3&gt;
&lt;p&gt;Before installing &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;, it will be better to harden the Droplet.  We
should:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Enable automatic upgrade&lt;/li&gt;
&lt;li&gt;Disable the root account&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, we can enable automatic upgrade with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dpkg-reconfigure -plow unattended-upgrades
&lt;span class="c"&gt;# Choose &amp;lt;yes&amp;gt; to enable automatic upgrade.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, we would like to disable the root accoount.  However, before doing so,
we have to create a new user account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create a new user.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo adduser &lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;
Enter new UNIX password:
Retype new UNIX password:

&lt;span class="c"&gt;# Grant sudo access to that user.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo visudo
&lt;span class="c"&gt;# ... Add &amp;quot;[username] ALL=(ALL:ALL) ALL&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Copy SSH keys.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mkdir -p /home/&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;/.ssh
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo cp /root/.ssh/authorized_keys /home/&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;/.ssh
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chown -R &lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt; /home/&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;/.ssh

&lt;span class="c"&gt;# Logout.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Log in with the &lt;em&gt;new account&lt;/em&gt; and disable the root account with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Lock the root password.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo passwd -l root

&lt;span class="c"&gt;# Disable the ssh root login.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vi /etc/ssh/sshd_config
&lt;span class="c"&gt;# ... Change &amp;quot;PermitRootLogin&amp;quot; to &amp;quot;no&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Restart ssh server.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service ssh restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-docker"&gt;
&lt;h3&gt;Install Docker&lt;/h3&gt;
&lt;p&gt;It is preferred to install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; through the prebuilt &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt; image.
Thus, we have to install &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt; beforehand.&lt;/p&gt;
&lt;p&gt;To install &lt;a class="reference external" href="https://www.docker.com"&gt;Docker&lt;/a&gt;, run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget -qO- https://get.docker.com/ &lt;span class="p"&gt;|&lt;/span&gt; sudo sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-discourse"&gt;
&lt;h3&gt;Install Discourse&lt;/h3&gt;
&lt;p&gt;Now, we can install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Switch to root user.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo -s

&lt;span class="c"&gt;# Create a directory for Discourse.&lt;/span&gt;
&amp;gt; mkdir /var/discourse

&lt;span class="c"&gt;# Clone the Discourse docker image.&lt;/span&gt;
&amp;gt; git clone https://github.com/discourse/discourse_docker.git &lt;span class="se"&gt;\&lt;/span&gt;
            /var/discourse

&lt;span class="c"&gt;# Change the directory to /var/discourse.&lt;/span&gt;
&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /var/discourse

&lt;span class="c"&gt;# Copy the sample configuration.&lt;/span&gt;
&amp;gt; cp samples/standalone.yml containers/app.yml

&lt;span class="c"&gt;# Edit the configuration.&lt;/span&gt;
&amp;gt; vi containers/app.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is &lt;em&gt;mandatory&lt;/em&gt; to change the following fields:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_DEVELOPER_EMAILS&lt;/strong&gt; - This is the e-mail that will be treat as the
administrator of the &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_HOSTNAME&lt;/strong&gt; - This is the domain name for your &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;
installation.&lt;/li&gt;
&lt;li&gt;Mail Server Configurations - These are the settings for the mail server.
Here we are using the &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt; as the example.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_SMTP_ADDRESSES&lt;/strong&gt;, e.g. &lt;code&gt;smtp.sparkpostmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_SMTP_PORT&lt;/strong&gt;, e.g. &lt;code&gt;587&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_SMTP_USER_NAME&lt;/strong&gt;, e.g. &lt;code&gt;SMTP_Injection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCOURSE_SMTP_PASSWORD&lt;/strong&gt; - The API key that you have created (40-digit
hexadecimals.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then, we can bootstrap the installation with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./launcher bootstrap app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will take some time.  Get a cup of coffee and wait for a while.  :-)&lt;/p&gt;
&lt;p&gt;After the bootstrap succeed, we can launch the &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./launcher start app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt;  You should be able to checkout the installation through
your favorite browser!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you have SSL certificates, then don't register or input anything
now.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-ssl-certificate"&gt;
&lt;h3&gt;Install SSL Certificate&lt;/h3&gt;
&lt;p&gt;If you have an SSL certificate, then it's time to install the SSL certificate
now!&lt;/p&gt;
&lt;p&gt;To install SSL certificate:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mkdir -p /var/discourse/shared/standalone/ssl
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Copy the private key to &lt;code&gt;/var/discourse/shared/standalone/ssl/ssl.key&lt;/code&gt;
and the certificate to &lt;code&gt;/var/discourse/shared/standalone/ssl/ssl.crt&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit the configuration:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Append &lt;code&gt;&amp;quot;templates/web.ssl.template.yml&amp;quot;&lt;/code&gt; to &lt;strong&gt;templates&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;&amp;quot;443:443&amp;quot;&lt;/code&gt; to the &lt;strong&gt;expose&lt;/strong&gt; section.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we should rebuild the container with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Rebuild the container.&lt;/span&gt;
./launcher rebuild app
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-discourse"&gt;
&lt;h2&gt;Configure Discourse&lt;/h2&gt;
&lt;p&gt;As the last step of installation, we have to create an administrator account
so that we can fill in several important settings and moderate the forum.&lt;/p&gt;
&lt;div class="section" id="create-an-admin-account"&gt;
&lt;h3&gt;Create an Admin Account&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the browser and visit your &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Click the &lt;strong&gt;Sign Up&lt;/strong&gt; button on the top right corner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fill in the E-mail, Username, Name, and Password.&lt;/p&gt;
&lt;p&gt;Note: To be an adminstrator, the e-mail must be identical to
&lt;em&gt;DISCOURSE_DEVELOPER_EMAILS&lt;/em&gt; specified in &lt;code&gt;app.yml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Click the link in the verification e-mail.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="update-settings"&gt;
&lt;h3&gt;Update Settings&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Visit &lt;code&gt;http[s]://[domain-name]/admin&lt;/code&gt; and click &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Fill in the fields.&lt;/li&gt;
&lt;li&gt;If you have installed SSL certificate, check the
&amp;quot;&lt;strong&gt;Security&lt;/strong&gt; -&amp;gt; &lt;strong&gt;use https&lt;/strong&gt;&amp;quot; field.&lt;/li&gt;
&lt;li&gt;If you want this &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation work as a private installation,
then you can check the following check boxes:&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;strong&gt;Login&lt;/strong&gt; -&amp;gt; &lt;strong&gt;invite only&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Login&lt;/strong&gt; -&amp;gt; &lt;strong&gt;login required&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Login&lt;/strong&gt; -&amp;gt; &lt;strong&gt;must approve users&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="install-discourse-tagging-plug-in"&gt;
&lt;h3&gt;Install Discourse Tagging Plug-in&lt;/h3&gt;
&lt;p&gt;If you wish to install &lt;a class="reference external" href="https://github.com/discourse/discourse-tagging"&gt;Discourse Tagging Plug-in&lt;/a&gt;, here are the instructions:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Open &lt;code&gt;app.yml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Append following line to &lt;strong&gt;hooks&lt;/strong&gt; -&amp;gt; &lt;strong&gt;after_code&lt;/strong&gt; -&amp;gt; &lt;strong&gt;exec&lt;/strong&gt; -&amp;gt; &lt;strong&gt;cmd&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://github.com/discourse/discourse-tagging.git
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Rebuild the container with &lt;code&gt;./launcher rebuild app&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the admin console in the browser, and enable the plug-in at
&lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;tagging enabled&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;These are my notes to get a &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; installation.  We have covered:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Register a &lt;a class="reference external" href="https://www.sparkpost.com/"&gt;SparkPost&lt;/a&gt; account and create an API key.&lt;/li&gt;
&lt;li&gt;Create a droplet and enable the swap file.&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt; and fill in the necessary settings.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope you enjoy this.  You can find more information in the
&lt;a class="reference external" href="https://github.com/discourse/discourse"&gt;Discourse GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Discourse, &lt;a class="reference external" href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-cloud.md"&gt;Set up Discourse in the cloud in under 30 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sam Saffron, &lt;a class="reference external" href="https://meta.discourse.org/t/allowing-ssl-for-your-discourse-docker-setup/13847"&gt;Allowing SSL for your Discourse Docker setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Justin Ellingwood, &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04"&gt;How to Add Swap on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="discourse"></category></entry><entry><title>Waliki Installation</title><link href="http://logan.tw/posts/2015/01/02/waliki-installation/" rel="alternate"></link><updated>2015-01-02T11:20:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2015-01-02:posts/2015/01/02/waliki-installation/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/mgaitan/waliki"&gt;Waliki&lt;/a&gt; is a simple wiki app for &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;.  We can write wiki contents with
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; and the contents will be stored in a &lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt; repository.
In this post, I would like to introduce the instructions to install &lt;a class="reference external" href="https://github.com/mgaitan/waliki"&gt;Waliki&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;First, install the related Ubuntu packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install git python3 python-virtualenv &lt;span class="se"&gt;\&lt;/span&gt;
      libpython3-dev libxml2-dev libxslt1-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, create a new Python virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir waliki
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;waliki
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv ENV --no-site-packages --python&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/python3
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;ENV/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, install the Python packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install waliki rst2pdf hovercraft &lt;span class="se"&gt;\&lt;/span&gt;
                   django-sendfile django-allauth
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fourth, create a new Django project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject waliki_site
&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;waliki_site
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fifth, edit the site settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim waliki_site/settings.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following lines to &lt;code&gt;waliki_site/settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;allauth.account.context_processors.account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.core.context_processors.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;AUTHENTICATION_BACKENDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;allauth.account.auth_backends.AuthenticationBackend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SITE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following Django apps to &lt;code&gt;INSTALLED_APPS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c"&gt;# BEGIN OF CHANGE - Extra Django Apps for Waliki&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;waliki&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;waliki.git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;waliki.attachments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;waliki.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;waliki.slides&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;allauth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;allauth.account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# END OF CHANGE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following lines to &lt;code&gt;waliki_site/urls.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# Examples:&lt;/span&gt;
    &lt;span class="c"&gt;# url(r&amp;#39;^$&amp;#39;, &amp;#39;waliki_site.views.home&amp;#39;, name=&amp;#39;home&amp;#39;),&lt;/span&gt;
    &lt;span class="c"&gt;# url(r&amp;#39;^blog/&amp;#39;, include(&amp;#39;blog.urls&amp;#39;)),&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;

    &lt;span class="c"&gt;# BEGIN OF CHANGE&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^accounts/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;allauth.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;waliki.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c"&gt;# END OF CHANGE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sixth, migrate the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Seventh, create a super user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py createsuperuser
Username &lt;span class="o"&gt;(&lt;/span&gt;leave blank to use &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
Email address: username@example.com
Password:
Password &lt;span class="o"&gt;(&lt;/span&gt;again&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, start the development server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENV&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We should be able to see Waliki at &lt;a class="reference external" href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customize-the-authentication"&gt;
&lt;h2&gt;Customize the Authentication&lt;/h2&gt;
&lt;p&gt;Since I am using Waliki to take my personal notes, I &lt;strong&gt;don't want&lt;/strong&gt; the wiki to
be edited by the others.  To disable the sign up feature, we have to customize
the account adapter.&lt;/p&gt;
&lt;p&gt;First, add following lines to &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ACCOUNT_ADAPTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;waliki_site.auth.AccountAdapter&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, create &lt;code&gt;waliki_site/auth.py&lt;/code&gt; with following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;allauth.account.adapter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultAccountAdapter&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AccountAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultAccountAdapter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_open_for_signup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these changes, the sign up feature will be disabled.  You can only login
with account created with &lt;code&gt;python manage.py createsuperuser&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deploy-waliki-with-apache-wsgi"&gt;
&lt;h2&gt;Deploy Waliki with Apache WSGI&lt;/h2&gt;
&lt;p&gt;We would like to deploy our Waliki site with Apache and WSGI so that all users
can have access to our Waliki.&lt;/p&gt;
&lt;p&gt;First, we have to install Apache and its WSGI module with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install apache2 libapache2-mod-wsgi-py3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NOTE: AFAIK, due to the design of WSGI module, we can't install WSGI module for
both Python 2.x and 3.0.  It is possible to have some problem if you have
installed &lt;code&gt;libapache2-mod-wsgi&lt;/code&gt; at the same time.  Remove
&lt;code&gt;libapache2-mod-wsgi&lt;/code&gt; or try to install Waliki with Python 2 if you have
encountered any problems.&lt;/p&gt;
&lt;p&gt;Second, we have to change &lt;code&gt;waliki_site/wsgi.py&lt;/code&gt; to workaround the
&lt;a class="reference external" href="https://code.google.com/p/modwsgi/wiki/VirtualEnvironments#Application_Environments"&gt;problem related to virtualenv&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim waliki_site/wsgi.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following lines to the beginning of &lt;code&gt;wsgi.py&lt;/code&gt; and change
&lt;code&gt;/PATH/TO/DIR/ENV&lt;/code&gt; to the virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;site&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;ENV_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/PATH/TO/DIR/ENV&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;activate_virtualenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;
    &lt;span class="n"&gt;ver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c"&gt;# Path to executables and site-packages.&lt;/span&gt;
    &lt;span class="n"&gt;bin_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;site_packages_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;site-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Add bin_dir to executable search path.&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bin_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pathsep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c"&gt;# Add site_packages_dir to the front of sys.path.&lt;/span&gt;
    &lt;span class="n"&gt;prev_sys_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site_packages_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;new_sys_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prev_sys_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_sys_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_sys_path&lt;/span&gt;

&lt;span class="n"&gt;activate_virtualenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENV_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, create a new virtual host configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vim /etc/apache2/sites-available/waliki.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And add following lines and change &lt;code&gt;/PATH/TO/DIR&lt;/code&gt; and &lt;code&gt;USERNAME&lt;/code&gt;
accordingly:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;lt;VirtualHost *:80&amp;gt;
    Define name waliki_site
    Define base /PATH/TO/DIR
    Define site ${base}/${name}
    Define user USERNAME

    WSGIDaemonProcess ${name} processes=1 threads=15 user=${user} display-name=%{GROUP} home=${site} python-path=${site}:${base}/ENV/lib/python2.7/site-packages
    WSGIProcessGroup ${name}
    WSGIScriptAlias / ${site}/${name}/wsgi.py

    Alias /robots.txt ${site}/static/robots.txt
    Alias /favicon.ico ${site}/static/favicon.ico

    Alias /media/ ${site}/media/
    Alias /static/ ${site}/static/

    &amp;lt;Directory ${site}/static&amp;gt;
        Require all granted
    &amp;lt;/Directory&amp;gt;

    &amp;lt;Directory ${site}/media&amp;gt;
        Require all granted
    &amp;lt;/Directory&amp;gt;

    &amp;lt;Directory ${site}/${name}&amp;gt;
        &amp;lt;Files wsgi.py&amp;gt;
            Require all granted
        &amp;lt;/Files&amp;gt;
    &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Fourth, enable the site with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo a2ensite waliki
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service apache2 reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, you should be able to see your Waliki installation!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="wsgi"></category><category term="waliki"></category></entry><entry><title>Autossh and Ubuntu Upstart Daemon</title><link href="http://logan.tw/posts/2014/12/15/autossh-and-ubuntu-upstart-daemon/" rel="alternate"></link><updated>2014-12-15T18:04:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-12-15:posts/2014/12/15/autossh-and-ubuntu-upstart-daemon/</id><summary type="html">&lt;p&gt;Since I am sharing the network without public IP, I would like to maintain a
SSH tunnel so that I can connect to my desktop from the remote site.  After
searching the web, I found that &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;Autossh&lt;/a&gt; fits my needs.  &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;Autossh&lt;/a&gt; is a
utility that can start and monitor the SSH tunnel.  If the connections are
broken, then &lt;a class="reference external" href="http://www.harding.motd.ca/autossh/"&gt;Autossh&lt;/a&gt; will restart the SSH connection automatically.&lt;/p&gt;
&lt;p&gt;In this post, I would like to introduce how to setup an autossh daemon with
&lt;a class="reference external" href="http://upstart.ubuntu.com"&gt;Ubuntu Upstart&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="setup-local-host"&gt;
&lt;h2&gt;Setup Local Host&lt;/h2&gt;
&lt;p&gt;First, create a new user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create a new user named &amp;quot;autossh&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo adduser --system --group --disabled-password autossh

&lt;span class="c"&gt;# Login as autossh&lt;/span&gt;
autossh:~&lt;span class="nv"&gt;$ &lt;/span&gt;sudo su autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, record the remote SSH server key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;autossh:~&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keyscan &lt;span class="o"&gt;[&lt;/span&gt;remote&lt;span class="o"&gt;]&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/known_hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, create SSH public keys:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create SSH private and public keys&lt;/span&gt;
autossh:~&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen -t rsa
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/autossh/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;enter&lt;span class="o"&gt;]&lt;/span&gt;
Created directory &lt;span class="s1"&gt;&amp;#39;/home/autossh/.ssh&amp;#39;&lt;/span&gt;.
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;enter&lt;span class="o"&gt;]&lt;/span&gt;
Enter same passphrase again: &lt;span class="o"&gt;[&lt;/span&gt;enter&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Print the public key&lt;/span&gt;
autossh:~&lt;span class="nv"&gt;$ &lt;/span&gt;cat ~/.ssh/id_rsa.pub
&lt;span class="o"&gt;[&lt;/span&gt;copy the output line&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fourth, logout and disable the shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;autossh:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chsh --shell /bin/false autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-remote-host"&gt;
&lt;h2&gt;Setup Remote Host&lt;/h2&gt;
&lt;p&gt;First, create a new user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Login to the remote host&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="o"&gt;[&lt;/span&gt;user&lt;span class="o"&gt;]&lt;/span&gt;@&lt;span class="o"&gt;[&lt;/span&gt;remote&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Create a new user&lt;/span&gt;
remote:~&lt;span class="nv"&gt;$ &lt;/span&gt;sudo adduser --system --group --shell /bin/false &lt;span class="se"&gt;\&lt;/span&gt;
                       --disabled-password autossh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, add the authorized public key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create directory for authorized keys&lt;/span&gt;
remote:~&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mkdir -p /home/autossh/.ssh

&lt;span class="c"&gt;# Add new public key&lt;/span&gt;
remote:~&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vi /home/autossh/.ssh/authorized_keys
&lt;span class="o"&gt;[&lt;/span&gt;paste the public key&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Change the owner of the file&lt;/span&gt;
remote:~&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chown -R autossh:autossh /home/autossh/.ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have finished the configuration on the remote host, logout from the remote
host with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remote:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-upstart-configuration-file"&gt;
&lt;h2&gt;Setup Upstart Configuration File&lt;/h2&gt;
&lt;p&gt;(&lt;strong&gt;Update 2015/11/15&lt;/strong&gt;: To setup a daemon for &lt;a class="reference external" href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;, read &lt;a class="reference external" href="http://logan.tw/posts/2015/11/15/autossh-and-systemd-service/"&gt;this post&lt;/a&gt;
instead.)&lt;/p&gt;
&lt;p&gt;Let's add the Ubuntu Upstart configuration file.&lt;/p&gt;
&lt;p&gt;First, create new upstart configuration with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo vim /etc/init/autossh.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add following lines to the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;description &amp;quot;autossh daemon for ssh tunnel&amp;quot;

start on net-device-up IFACE=eth0
stop on runlevel [01S6]

setuid autossh

respawn
respawn limit 5 60

script
export AUTOSSH_FIRST_POLL=30
export AUTOSSH_GATETIME=0
export AUTOSSH_POLL=60
autossh -M [daemon-port] -N -R [remote-port]:localhost:22 [remote] -i /home/autossh/.ssh/id_rsa
end script
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the variables properly.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;[daemon-port]&lt;/code&gt; can be any number larger than 8000.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[remote-port]&lt;/code&gt; is the remote port that will be opened on remote host
which will be mapped to local port.&lt;/li&gt;
&lt;li&gt;For the exported environment variables, you can refer to the &lt;a class="reference external" href="http://manpages.ubuntu.com/manpages/utopic/en/man1/autossh.1.html"&gt;autossh manual
pages&lt;/a&gt; for further details.  Usually, you would like to set
&lt;code&gt;AUTOSSH_GATETIME&lt;/code&gt; to zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, start the service now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service autossh start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these steps, the SSH tunnel should start to work now!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ubuntugeek.com/automatically-restart-ssh-sessions-and-tunnels-using-autossh.html"&gt;Automatically restart SSH sessions and tunnels Using Autossh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="ssh"></category><category term="autossh"></category><category term="upstart"></category><category term="init"></category></entry><entry><title>Let's Encrypt</title><link href="http://logan.tw/posts/2014/11/24/lets-encrypt/" rel="alternate"></link><updated>2014-11-24T23:32:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-24:posts/2014/11/24/lets-encrypt/</id><summary type="html">&lt;p&gt;According to the &lt;a class="reference external" href="http://andreasgal.com/2014/11/18/lets-encrypt-one-more-step-on-the-road-to-tls-everywhere/"&gt;post&lt;/a&gt; by &lt;a class="reference external" href="http://andreasgal.com"&gt;Andreas Gal&lt;/a&gt;, &lt;a class="reference external" href="https://www.eff.org/"&gt;EFF&lt;/a&gt;, &lt;a class="reference external" href="https://mozilla.com/"&gt;Mozilla&lt;/a&gt;, Cisco, Akamai,
and IdenTrust are going to form Internet Security Research Group which will
start the &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; ceritificate authority service in 2015 Q2.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; is expected to become a free, automated, and open SSL
sertificate authority which aims to increase the adoption of HTTPS protocol
and provide a more secure Internet.  I am looking forward to this project.&lt;/p&gt;
&lt;p&gt;For the impatient, you may check &lt;a class="reference external" href="https://github.com/letsencrypt"&gt;their GitHub&lt;/a&gt; for the preview release.&lt;/p&gt;
</summary><category term="http"></category><category term="ssl"></category></entry><entry><title>GitHub Pages and HTTPS</title><link href="http://logan.tw/posts/2014/11/16/github-pages-and-https/" rel="alternate"></link><updated>2014-11-16T23:31:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-16:posts/2014/11/16/github-pages-and-https/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; supports HTTPS protocol.  It will be good to prefer HTTPS to
HTTP.  However, I found that if the URLs are not written carefully, the
user might be redirected to HTTP URLs.&lt;/p&gt;
&lt;p&gt;For unknown reason, &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; are redirecting the directories without
trailing slash to the HTTP URLs.  For example, the following URL:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://loganchien.github.io/cert
&lt;/pre&gt;
&lt;p&gt;will be redirected to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://loganchien.github.io/cert/
&lt;/pre&gt;
&lt;p&gt;To avoid this pitfall, please make sure that your URLs are ending with trailing
slash if they are pointing to directories.  For example,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
https://loganchien.github.io/cert/
&lt;/pre&gt;
&lt;p&gt;This URL won't be redirected and work as expected.&lt;/p&gt;
</summary><category term="github"></category><category term="https"></category></entry><entry><title>Pelican and GitHub Pages</title><link href="http://logan.tw/posts/2014/11/16/pelican-and-github-pages/" rel="alternate"></link><updated>2014-11-16T23:01:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-16:posts/2014/11/16/pelican-and-github-pages/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; has built-in support for &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.  However, I noticed that
the &lt;code&gt;ghp-import&lt;/code&gt; command might screw up the commit log if your GitHub
Pages and your Pelican source code share the same branch name.&lt;/p&gt;
&lt;p&gt;According to the document of &lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;, the user pages should be
committed to &lt;code&gt;master&lt;/code&gt; branch (instead of &lt;code&gt;gh_pages&lt;/code&gt;.)  If you have
answered &lt;code&gt;master&lt;/code&gt; while &lt;code&gt;pelican-quickstart&lt;/code&gt; was asking for the
GitHub Page branch, then &lt;code&gt;ghp-import&lt;/code&gt; will automatically commit the
generated output to the &lt;code&gt;master&lt;/code&gt; branch.  Consequently, the git
repository will be screwed up.&lt;/p&gt;
&lt;p&gt;My solution is to create a &lt;code&gt;pelican-source&lt;/code&gt; branch for Pelican source
code, and commit the generated output to the &lt;code&gt;master&lt;/code&gt; branch.  This will
fix this issue without any problems.&lt;/p&gt;
</summary><category term="github"></category><category term="pelican"></category></entry><entry><title>SSL Certificate</title><link href="http://logan.tw/posts/2014/11/15/ssl-certificate/" rel="alternate"></link><updated>2014-11-15T02:30:00+08:00</updated><author><name>Logan</name></author><id>tag:logan.tw,2014-11-15:posts/2014/11/15/ssl-certificate/</id><summary type="html">&lt;p&gt;I would like to run &lt;a class="reference external" href="https://code.google.com/p/shellinabox/"&gt;shellinabox&lt;/a&gt; and my private blog system through HTTPS
protocol.  However, an SSL certificate is really expensive, thus I decided to
run our own &lt;strong&gt;certificate authority&lt;/strong&gt; and distribute my &lt;em&gt;cacert.pem&lt;/em&gt; through
&lt;a class="reference external" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In general, running a certificate authority requires three steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a RSA public/private keys for the CA.  This step will create
&lt;code&gt;cacert.pem&lt;/code&gt; as well.  You should distribute the CA certificate via
some safe tunnel.&lt;/li&gt;
&lt;li&gt;For each service, create a &lt;em&gt;certificate request&lt;/em&gt; and send it to CA.&lt;/li&gt;
&lt;li&gt;The CA should sign the certificate request, and return it back.&lt;/li&gt;
&lt;li&gt;Install the CA-signed SSL certificate to HTTPS server (and etc.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The OpenSSL package from Ubuntu has provide a simple script for us to
manage the certificates.  Let's start.&lt;/p&gt;
&lt;div class="section" id="create-a-certificate-authority"&gt;
&lt;h2&gt;Create a Certificate Authority&lt;/h2&gt;
&lt;p&gt;Create directory to save everything:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir MyCA
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod &lt;span class="m"&gt;700&lt;/span&gt; MyCA
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;MyCA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copy the tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cp /usr/lib/ssl/misc/CA.pl .
&lt;span class="nv"&gt;$ &lt;/span&gt;cp /etc/ssl/openssl.cnf .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit the configurations to fit your need, and finally create the certificate
for your CA:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./CA.pl -newca
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, the &lt;code&gt;cacert.pem&lt;/code&gt; will be generated at
&lt;code&gt;demoCA/cacert.pem&lt;/code&gt;.  Install this certificate as an authority in your
browser.  You can also check the fingerprint with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;openssl x509 -fingerprint -noout -in cacert.pem
&lt;span class="nv"&gt;$ &lt;/span&gt;openssl x509 -sha256 -fingerprint -noout -in cacert.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="generate-certificates-for-your-service"&gt;
&lt;h2&gt;Generate Certificates for Your Service&lt;/h2&gt;
&lt;p&gt;To create the SSL certificate for your service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create a certificate request&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;./CA.pl -newreq

&lt;span class="c"&gt;# Sign a certificate request&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;./CA.pl -sign
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated &lt;code&gt;newkey.pem&lt;/code&gt; and &lt;code&gt;newcert.pem&lt;/code&gt; are the private key
and the certificate respectively.&lt;/p&gt;
&lt;p&gt;Please notice that the &lt;code&gt;newkey.pem&lt;/code&gt; has been encrypted with a passpharse.
Under some situation, you have to decrypt it before installing the certificate
(e.g. Apache2).  Here's the command to decrypt the private key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;openssl rsa -in newkey.pem -out newkey.nopass.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="https"></category><category term="apache2"></category><category term="ssl"></category></entry></feed>